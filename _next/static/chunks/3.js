(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[3],{

/***/ "./node_modules/jspdf/dist/jspdf.node.debug.js":
/*!*****************************************************!*\
  !*** ./node_modules/jspdf/dist/jspdf.node.debug.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** @license\r\n * jsPDF - PDF Document creation from JavaScript\r\n * Version 1.5.3 Built on 2018-12-27T14:11:50.068Z\r\n *                      CommitID d93d28db14\r\n *\r\n * Copyright (c) 2010-2016 James Hall <james@parall.ax>, https://github.com/MrRio/jsPDF\r\n *               2010 Aaron Spike, https://github.com/acspike\r\n *               2012 Willow Systems Corporation, willow-systems.com\r\n *               2012 Pablo Hess, https://github.com/pablohess\r\n *               2012 Florian Jenett, https://github.com/fjenett\r\n *               2013 Warren Weckesser, https://github.com/warrenweckesser\r\n *               2013 Youssef Beddad, https://github.com/lifof\r\n *               2013 Lee Driscoll, https://github.com/lsdriscoll\r\n *               2013 Stefan Slonevskiy, https://github.com/stefslon\r\n *               2013 Jeremy Morel, https://github.com/jmorel\r\n *               2013 Christoph Hartmann, https://github.com/chris-rock\r\n *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria\r\n *               2014 James Makes, https://github.com/dollaruw\r\n *               2014 Diego Casorran, https://github.com/diegocr\r\n *               2014 Steven Spungin, https://github.com/Flamenco\r\n *               2014 Kenneth Glassey, https://github.com/Gavvers\r\n *\r\n * Licensed under the MIT License\r\n *\r\n * Contributor(s):\r\n *    siefkenj, ahwolf, rickygu, Midnith, saintclair, eaparango,\r\n *    kim3er, mfo, alnorth, Flamenco\r\n */\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\n/**\n * Creates new jsPDF document object instance.\n * @name jsPDF\n * @class\n * @param orientation {string/Object} Orientation of the first page. Possible values are \"portrait\" or \"landscape\" (or shortcuts \"p\" (Default), \"l\").<br />\n * Can also be an options object.\n * @param unit {string}  Measurement unit to be used when coordinates are specified.<br />\n * Possible values are \"pt\" (points), \"mm\" (Default), \"cm\", \"in\" or \"px\".\n * @param format {string/Array} The format of the first page. Can be:<ul><li>a0 - a10</li><li>b0 - b10</li><li>c0 - c10</li><li>dl</li><li>letter</li><li>government-letter</li><li>legal</li><li>junior-legal</li><li>ledger</li><li>tabloid</li><li>credit-card</li></ul><br />\n * Default is \"a4\". If you want to use your own format just pass instead of one of the above predefined formats the size as an number-array, e.g. [595.28, 841.89]\n * @returns {jsPDF} jsPDF-instance\n * @description\n * If the first parameter (orientation) is an object, it will be interpreted as an object of named parameters\n * ```\n * {\n *  orientation: 'p',\n *  unit: 'mm',\n *  format: 'a4',\n *  hotfixes: [] // an array of hotfix strings to enable\n * }\n * ```\n */\nvar jsPDF = function (global) {\n  /**\n   * jsPDF's Internal PubSub Implementation.\n   * Backward compatible rewritten on 2014 by\n   * Diego Casorran, https://github.com/diegocr\n   *\n   * @class\n   * @name PubSub\n   * @ignore\n   */\n\n  function PubSub(context) {\n    if (_typeof(context) !== 'object') {\n      throw new Error('Invalid Context passed to initialize PubSub (jsPDF-module)');\n    }\n\n    var topics = {};\n\n    this.subscribe = function (topic, callback, once) {\n      once = once || false;\n\n      if (typeof topic !== 'string' || typeof callback !== 'function' || typeof once !== 'boolean') {\n        throw new Error('Invalid arguments passed to PubSub.subscribe (jsPDF-module)');\n      }\n\n      if (!topics.hasOwnProperty(topic)) {\n        topics[topic] = {};\n      }\n\n      var token = Math.random().toString(35);\n      topics[topic][token] = [callback, !!once];\n      return token;\n    };\n\n    this.unsubscribe = function (token) {\n      for (var topic in topics) {\n        if (topics[topic][token]) {\n          delete topics[topic][token];\n\n          if (Object.keys(topics[topic]).length === 0) {\n            delete topics[topic];\n          }\n\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.publish = function (topic) {\n      if (topics.hasOwnProperty(topic)) {\n        var args = Array.prototype.slice.call(arguments, 1),\n            tokens = [];\n\n        for (var token in topics[topic]) {\n          var sub = topics[topic][token];\n\n          try {\n            sub[0].apply(context, args);\n          } catch (ex) {\n            if (global.console) {\n              console.error('jsPDF PubSub Error', ex.message, ex);\n            }\n          }\n\n          if (sub[1]) tokens.push(token);\n        }\n\n        if (tokens.length) tokens.forEach(this.unsubscribe);\n      }\n    };\n\n    this.getTopics = function () {\n      return topics;\n    };\n  }\n  /**\n   * @constructor\n   * @private\n   */\n\n\n  function jsPDF(orientation, unit, format, compressPdf) {\n    var options = {};\n    var filters = [];\n    var userUnit = 1.0;\n\n    if (_typeof(orientation) === 'object') {\n      options = orientation;\n      orientation = options.orientation;\n      unit = options.unit || unit;\n      format = options.format || format;\n      compressPdf = options.compress || options.compressPdf || compressPdf;\n      filters = options.filters || (compressPdf === true ? ['FlateEncode'] : filters);\n      userUnit = typeof options.userUnit === \"number\" ? Math.abs(options.userUnit) : 1.0;\n    }\n\n    unit = unit || 'mm';\n    orientation = ('' + (orientation || 'P')).toLowerCase();\n    var putOnlyUsedFonts = options.putOnlyUsedFonts || true;\n    var usedFonts = {};\n    var API = {\n      internal: {},\n      __private__: {}\n    };\n    API.__private__.PubSub = PubSub;\n    var pdfVersion = '1.3';\n\n    var getPdfVersion = API.__private__.getPdfVersion = function () {\n      return pdfVersion;\n    };\n\n    var setPdfVersion = API.__private__.setPdfVersion = function (value) {\n      pdfVersion = value;\n    }; // Size in pt of various paper formats\n\n\n    var pageFormats = {\n      'a0': [2383.94, 3370.39],\n      'a1': [1683.78, 2383.94],\n      'a2': [1190.55, 1683.78],\n      'a3': [841.89, 1190.55],\n      'a4': [595.28, 841.89],\n      'a5': [419.53, 595.28],\n      'a6': [297.64, 419.53],\n      'a7': [209.76, 297.64],\n      'a8': [147.40, 209.76],\n      'a9': [104.88, 147.40],\n      'a10': [73.70, 104.88],\n      'b0': [2834.65, 4008.19],\n      'b1': [2004.09, 2834.65],\n      'b2': [1417.32, 2004.09],\n      'b3': [1000.63, 1417.32],\n      'b4': [708.66, 1000.63],\n      'b5': [498.90, 708.66],\n      'b6': [354.33, 498.90],\n      'b7': [249.45, 354.33],\n      'b8': [175.75, 249.45],\n      'b9': [124.72, 175.75],\n      'b10': [87.87, 124.72],\n      'c0': [2599.37, 3676.54],\n      'c1': [1836.85, 2599.37],\n      'c2': [1298.27, 1836.85],\n      'c3': [918.43, 1298.27],\n      'c4': [649.13, 918.43],\n      'c5': [459.21, 649.13],\n      'c6': [323.15, 459.21],\n      'c7': [229.61, 323.15],\n      'c8': [161.57, 229.61],\n      'c9': [113.39, 161.57],\n      'c10': [79.37, 113.39],\n      'dl': [311.81, 623.62],\n      'letter': [612, 792],\n      'government-letter': [576, 756],\n      'legal': [612, 1008],\n      'junior-legal': [576, 360],\n      'ledger': [1224, 792],\n      'tabloid': [792, 1224],\n      'credit-card': [153, 243]\n    };\n\n    var getPageFormats = API.__private__.getPageFormats = function () {\n      return pageFormats;\n    };\n\n    var getPageFormat = API.__private__.getPageFormat = function (value) {\n      return pageFormats[value];\n    };\n\n    if (typeof format === \"string\") {\n      format = getPageFormat(format);\n    }\n\n    format = format || getPageFormat('a4');\n\n    var f2 = API.f2 = API.__private__.f2 = function (number) {\n      if (isNaN(number)) {\n        throw new Error('Invalid argument passed to jsPDF.f2');\n      }\n\n      return number.toFixed(2); // Ie, %.2f\n    };\n\n    var f3 = API.__private__.f3 = function (number) {\n      if (isNaN(number)) {\n        throw new Error('Invalid argument passed to jsPDF.f3');\n      }\n\n      return number.toFixed(3); // Ie, %.3f\n    };\n\n    var fileId = '00000000000000000000000000000000';\n\n    var getFileId = API.__private__.getFileId = function () {\n      return fileId;\n    };\n\n    var setFileId = API.__private__.setFileId = function (value) {\n      value = value || \"12345678901234567890123456789012\".split('').map(function () {\n        return \"ABCDEF0123456789\".charAt(Math.floor(Math.random() * 16));\n      }).join('');\n      fileId = value;\n      return fileId;\n    };\n    /**\n     * @name setFileId\n     * @memberOf jsPDF\n     * @function\n     * @instance\n     * @param {string} value GUID.\n     * @returns {jsPDF}\n     */\n\n\n    API.setFileId = function (value) {\n      setFileId(value);\n      return this;\n    };\n    /**\n     * @name getFileId\n     * @memberOf jsPDF\n     * @function\n     * @instance\n     *\n     * @returns {string} GUID.\n     */\n\n\n    API.getFileId = function () {\n      return getFileId();\n    };\n\n    var creationDate;\n\n    var convertDateToPDFDate = API.__private__.convertDateToPDFDate = function (parmDate) {\n      var result = '';\n      var tzoffset = parmDate.getTimezoneOffset(),\n          tzsign = tzoffset < 0 ? '+' : '-',\n          tzhour = Math.floor(Math.abs(tzoffset / 60)),\n          tzmin = Math.abs(tzoffset % 60),\n          timeZoneString = [tzsign, padd2(tzhour), \"'\", padd2(tzmin), \"'\"].join('');\n      result = ['D:', parmDate.getFullYear(), padd2(parmDate.getMonth() + 1), padd2(parmDate.getDate()), padd2(parmDate.getHours()), padd2(parmDate.getMinutes()), padd2(parmDate.getSeconds()), timeZoneString].join('');\n      return result;\n    };\n\n    var convertPDFDateToDate = API.__private__.convertPDFDateToDate = function (parmPDFDate) {\n      var year = parseInt(parmPDFDate.substr(2, 4), 10);\n      var month = parseInt(parmPDFDate.substr(6, 2), 10) - 1;\n      var date = parseInt(parmPDFDate.substr(8, 2), 10);\n      var hour = parseInt(parmPDFDate.substr(10, 2), 10);\n      var minutes = parseInt(parmPDFDate.substr(12, 2), 10);\n      var seconds = parseInt(parmPDFDate.substr(14, 2), 10);\n      var timeZoneHour = parseInt(parmPDFDate.substr(16, 2), 10);\n      var timeZoneMinutes = parseInt(parmPDFDate.substr(20, 2), 10);\n      var resultingDate = new Date(year, month, date, hour, minutes, seconds, 0);\n      return resultingDate;\n    };\n\n    var setCreationDate = API.__private__.setCreationDate = function (date) {\n      var tmpCreationDateString;\n      var regexPDFCreationDate = /^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\\+0[0-9]|\\+1[0-4]|\\-0[0-9]|\\-1[0-1])\\'(0[0-9]|[1-5][0-9])\\'?$/;\n\n      if (typeof date === \"undefined\") {\n        date = new Date();\n      }\n\n      if (_typeof(date) === \"object\" && Object.prototype.toString.call(date) === \"[object Date]\") {\n        tmpCreationDateString = convertDateToPDFDate(date);\n      } else if (regexPDFCreationDate.test(date)) {\n        tmpCreationDateString = date;\n      } else {\n        throw new Error('Invalid argument passed to jsPDF.setCreationDate');\n      }\n\n      creationDate = tmpCreationDateString;\n      return creationDate;\n    };\n\n    var getCreationDate = API.__private__.getCreationDate = function (type) {\n      var result = creationDate;\n\n      if (type === \"jsDate\") {\n        result = convertPDFDateToDate(creationDate);\n      }\n\n      return result;\n    };\n    /**\n     * @name setCreationDate\n     * @memberOf jsPDF\n     * @function\n     * @instance\n     * @param {Object} date\n     * @returns {jsPDF}\n     */\n\n\n    API.setCreationDate = function (date) {\n      setCreationDate(date);\n      return this;\n    };\n    /**\n     * @name getCreationDate\n     * @memberOf jsPDF\n     * @function\n     * @instance\n     * @param {Object} type\n     * @returns {Object}\n     */\n\n\n    API.getCreationDate = function (type) {\n      return getCreationDate(type);\n    };\n\n    var padd2 = API.__private__.padd2 = function (number) {\n      return ('0' + parseInt(number)).slice(-2);\n    };\n\n    var outToPages = !1; // switches where out() prints. outToPages true = push to pages obj. outToPages false = doc builder content\n\n    var pages = [];\n    var content = [];\n    var currentPage;\n    var content_length = 0;\n    var customOutputDestination;\n\n    var setOutputDestination = API.__private__.setCustomOutputDestination = function (destination) {\n      customOutputDestination = destination;\n    };\n\n    var resetOutputDestination = API.__private__.resetCustomOutputDestination = function (destination) {\n      customOutputDestination = undefined;\n    };\n\n    var out = API.__private__.out = function (string) {\n      var writeArray;\n      string = typeof string === \"string\" ? string : string.toString();\n\n      if (typeof customOutputDestination === \"undefined\") {\n        writeArray = outToPages ? pages[currentPage] : content;\n      } else {\n        writeArray = customOutputDestination;\n      }\n\n      writeArray.push(string);\n\n      if (!outToPages) {\n        content_length += string.length + 1;\n      }\n\n      return writeArray;\n    };\n\n    var write = API.__private__.write = function (value) {\n      return out(arguments.length === 1 ? value.toString() : Array.prototype.join.call(arguments, ' '));\n    };\n\n    var getArrayBuffer = API.__private__.getArrayBuffer = function (data) {\n      var len = data.length,\n          ab = new ArrayBuffer(len),\n          u8 = new Uint8Array(ab);\n\n      while (len--) {\n        u8[len] = data.charCodeAt(len);\n      }\n\n      return ab;\n    };\n\n    var standardFonts = [['Helvetica', \"helvetica\", \"normal\", 'WinAnsiEncoding'], ['Helvetica-Bold', \"helvetica\", \"bold\", 'WinAnsiEncoding'], ['Helvetica-Oblique', \"helvetica\", \"italic\", 'WinAnsiEncoding'], ['Helvetica-BoldOblique', \"helvetica\", \"bolditalic\", 'WinAnsiEncoding'], ['Courier', \"courier\", \"normal\", 'WinAnsiEncoding'], ['Courier-Bold', \"courier\", \"bold\", 'WinAnsiEncoding'], ['Courier-Oblique', \"courier\", \"italic\", 'WinAnsiEncoding'], ['Courier-BoldOblique', \"courier\", \"bolditalic\", 'WinAnsiEncoding'], ['Times-Roman', \"times\", \"normal\", 'WinAnsiEncoding'], ['Times-Bold', \"times\", \"bold\", 'WinAnsiEncoding'], ['Times-Italic', \"times\", \"italic\", 'WinAnsiEncoding'], ['Times-BoldItalic', \"times\", \"bolditalic\", 'WinAnsiEncoding'], ['ZapfDingbats', \"zapfdingbats\", \"normal\", null], ['Symbol', \"symbol\", \"normal\", null]];\n\n    var getStandardFonts = API.__private__.getStandardFonts = function (data) {\n      return standardFonts;\n    };\n\n    var activeFontSize = options.fontSize || 16;\n    /**\n     * Sets font size for upcoming text elements.\n     *\n     * @param {number} size Font size in points.\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name setFontSize\n     */\n\n    var setFontSize = API.__private__.setFontSize = API.setFontSize = function (size) {\n      activeFontSize = size;\n      return this;\n    };\n    /**\n     * Gets the fontsize for upcoming text elements.\n     *\n     * @function\n     * @instance\n     * @returns {number}\n     * @memberOf jsPDF\n     * @name getFontSize\n     */\n\n\n    var getFontSize = API.__private__.getFontSize = API.getFontSize = function () {\n      return activeFontSize;\n    };\n\n    var R2L = options.R2L || false;\n    /**\n     * Set value of R2L functionality.\n     *\n     * @param {boolean} value\n     * @function\n     * @instance\n     * @returns {jsPDF} jsPDF-instance\n     * @memberOf jsPDF\n     * @name setR2L\n     */\n\n    var setR2L = API.__private__.setR2L = API.setR2L = function (value) {\n      R2L = value;\n      return this;\n    };\n    /**\n     * Get value of R2L functionality.\n     *\n     * @function\n     * @instance\n     * @returns {boolean} jsPDF-instance\n     * @memberOf jsPDF\n     * @name getR2L\n     */\n\n\n    var getR2L = API.__private__.getR2L = API.getR2L = function (value) {\n      return R2L;\n    };\n\n    var zoomMode; // default: 1;\n\n    var setZoomMode = API.__private__.setZoomMode = function (zoom) {\n      var validZoomModes = [undefined, null, 'fullwidth', 'fullheight', 'fullpage', 'original'];\n\n      if (/^\\d*\\.?\\d*\\%$/.test(zoom)) {\n        zoomMode = zoom;\n      } else if (!isNaN(zoom)) {\n        zoomMode = parseInt(zoom, 10);\n      } else if (validZoomModes.indexOf(zoom) !== -1) {\n        zoomMode = zoom;\n      } else {\n        throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. \"' + zoom + '\" is not recognized.');\n      }\n    };\n\n    var getZoomMode = API.__private__.getZoomMode = function () {\n      return zoomMode;\n    };\n\n    var pageMode; // default: 'UseOutlines';\n\n    var setPageMode = API.__private__.setPageMode = function (pmode) {\n      var validPageModes = [undefined, null, 'UseNone', 'UseOutlines', 'UseThumbs', 'FullScreen'];\n\n      if (validPageModes.indexOf(pmode) == -1) {\n        throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. \"' + pmode + '\" is not recognized.');\n      }\n\n      pageMode = pmode;\n    };\n\n    var getPageMode = API.__private__.getPageMode = function () {\n      return pageMode;\n    };\n\n    var layoutMode; // default: 'continuous';\n\n    var setLayoutMode = API.__private__.setLayoutMode = function (layout) {\n      var validLayoutModes = [undefined, null, 'continuous', 'single', 'twoleft', 'tworight', 'two'];\n\n      if (validLayoutModes.indexOf(layout) == -1) {\n        throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. \"' + layout + '\" is not recognized.');\n      }\n\n      layoutMode = layout;\n    };\n\n    var getLayoutMode = API.__private__.getLayoutMode = function () {\n      return layoutMode;\n    };\n    /**\n     * Set the display mode options of the page like zoom and layout.\n     *\n     * @name setDisplayMode\n     * @memberOf jsPDF\n     * @function \n     * @instance\n     * @param {integer|String} zoom   You can pass an integer or percentage as\n     * a string. 2 will scale the document up 2x, '200%' will scale up by the\n     * same amount. You can also set it to 'fullwidth', 'fullheight',\n     * 'fullpage', or 'original'.\n     *\n     * Only certain PDF readers support this, such as Adobe Acrobat.\n     *\n     * @param {string} layout Layout mode can be: 'continuous' - this is the\n     * default continuous scroll. 'single' - the single page mode only shows one\n     * page at a time. 'twoleft' - two column left mode, first page starts on\n     * the left, and 'tworight' - pages are laid out in two columns, with the\n     * first page on the right. This would be used for books.\n     * @param {string} pmode 'UseOutlines' - it shows the\n     * outline of the document on the left. 'UseThumbs' - shows thumbnails along\n     * the left. 'FullScreen' - prompts the user to enter fullscreen mode.\n     *\n     * @returns {jsPDF}\n     */\n\n\n    var setDisplayMode = API.__private__.setDisplayMode = API.setDisplayMode = function (zoom, layout, pmode) {\n      setZoomMode(zoom);\n      setLayoutMode(layout);\n      setPageMode(pmode);\n      return this;\n    };\n\n    var documentProperties = {\n      'title': '',\n      'subject': '',\n      'author': '',\n      'keywords': '',\n      'creator': ''\n    };\n\n    var getDocumentProperty = API.__private__.getDocumentProperty = function (key) {\n      if (Object.keys(documentProperties).indexOf(key) === -1) {\n        throw new Error('Invalid argument passed to jsPDF.getDocumentProperty');\n      }\n\n      return documentProperties[key];\n    };\n\n    var getDocumentProperties = API.__private__.getDocumentProperties = function (properties) {\n      return documentProperties;\n    };\n    /**\n     * Adds a properties to the PDF document.\n     *\n     * @param {Object} A property_name-to-property_value object structure.\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name setDocumentProperties\n     */\n\n\n    var setDocumentProperties = API.__private__.setDocumentProperties = API.setProperties = API.setDocumentProperties = function (properties) {\n      // copying only those properties we can render.\n      for (var property in documentProperties) {\n        if (documentProperties.hasOwnProperty(property) && properties[property]) {\n          documentProperties[property] = properties[property];\n        }\n      }\n\n      return this;\n    };\n\n    var setDocumentProperty = API.__private__.setDocumentProperty = function (key, value) {\n      if (Object.keys(documentProperties).indexOf(key) === -1) {\n        throw new Error('Invalid arguments passed to jsPDF.setDocumentProperty');\n      }\n\n      return documentProperties[key] = value;\n    };\n\n    var objectNumber = 0; // 'n' Current object number\n\n    var offsets = []; // List of offsets. Activated and reset by buildDocument(). Pupulated by various calls buildDocument makes.\n\n    var fonts = {}; // collection of font objects, where key is fontKey - a dynamically created label for a given font.\n\n    var fontmap = {}; // mapping structure fontName > fontStyle > font key - performance layer. See addFont()\n\n    var activeFontKey; // will be string representing the KEY of the font as combination of fontName + fontStyle\n\n    var k; // Scale factor\n\n    var page = 0;\n    var pagesContext = [];\n    var additionalObjects = [];\n    var events = new PubSub(API);\n    var hotfixes = options.hotfixes || [];\n\n    var newObject = API.__private__.newObject = function () {\n      var oid = newObjectDeferred();\n      newObjectDeferredBegin(oid, true);\n      return oid;\n    }; // Does not output the object.  The caller must call newObjectDeferredBegin(oid) before outputing any data\n\n\n    var newObjectDeferred = API.__private__.newObjectDeferred = function () {\n      objectNumber++;\n\n      offsets[objectNumber] = function () {\n        return content_length;\n      };\n\n      return objectNumber;\n    };\n\n    var newObjectDeferredBegin = function newObjectDeferredBegin(oid, doOutput) {\n      doOutput = typeof doOutput === 'boolean' ? doOutput : false;\n      offsets[oid] = content_length;\n\n      if (doOutput) {\n        out(oid + ' 0 obj');\n      }\n\n      return oid;\n    }; // Does not output the object until after the pages have been output.\n    // Returns an object containing the objectId and content.\n    // All pages have been added so the object ID can be estimated to start right after.\n    // This does not modify the current objectNumber;  It must be updated after the newObjects are output.\n\n\n    var newAdditionalObject = API.__private__.newAdditionalObject = function () {\n      var objId = newObjectDeferred();\n      var obj = {\n        objId: objId,\n        content: ''\n      };\n      additionalObjects.push(obj);\n      return obj;\n    };\n\n    var rootDictionaryObjId = newObjectDeferred();\n    var resourceDictionaryObjId = newObjectDeferred(); /////////////////////\n    // Private functions\n    /////////////////////\n\n    var decodeColorString = API.__private__.decodeColorString = function (color) {\n      var colorEncoded = color.split(' ');\n\n      if (colorEncoded.length === 2 && (colorEncoded[1] === 'g' || colorEncoded[1] === 'G')) {\n        // convert grayscale value to rgb so that it can be converted to hex for consistency\n        var floatVal = parseFloat(colorEncoded[0]);\n        colorEncoded = [floatVal, floatVal, floatVal, 'r'];\n      }\n\n      var colorAsRGB = '#';\n\n      for (var i = 0; i < 3; i++) {\n        colorAsRGB += ('0' + Math.floor(parseFloat(colorEncoded[i]) * 255).toString(16)).slice(-2);\n      }\n\n      return colorAsRGB;\n    };\n\n    var encodeColorString = API.__private__.encodeColorString = function (options) {\n      var color;\n\n      if (typeof options === \"string\") {\n        options = {\n          ch1: options\n        };\n      }\n\n      var ch1 = options.ch1;\n      var ch2 = options.ch2;\n      var ch3 = options.ch3;\n      var ch4 = options.ch4;\n      var precision = options.precision;\n      var letterArray = options.pdfColorType === \"draw\" ? ['G', 'RG', 'K'] : ['g', 'rg', 'k'];\n\n      if (typeof ch1 === \"string\" && ch1.charAt(0) !== '#') {\n        var rgbColor = new RGBColor(ch1);\n\n        if (rgbColor.ok) {\n          ch1 = rgbColor.toHex();\n        } else if (!/^\\d*\\.?\\d*$/.test(ch1)) {\n          throw new Error('Invalid color \"' + ch1 + '\" passed to jsPDF.encodeColorString.');\n        }\n      } //convert short rgb to long form\n\n\n      if (typeof ch1 === \"string\" && /^#[0-9A-Fa-f]{3}$/.test(ch1)) {\n        ch1 = '#' + ch1[1] + ch1[1] + ch1[2] + ch1[2] + ch1[3] + ch1[3];\n      }\n\n      if (typeof ch1 === \"string\" && /^#[0-9A-Fa-f]{6}$/.test(ch1)) {\n        var hex = parseInt(ch1.substr(1), 16);\n        ch1 = hex >> 16 & 255;\n        ch2 = hex >> 8 & 255;\n        ch3 = hex & 255;\n      }\n\n      if (typeof ch2 === \"undefined\" || typeof ch4 === \"undefined\" && ch1 === ch2 && ch2 === ch3) {\n        // Gray color space.\n        if (typeof ch1 === \"string\") {\n          color = ch1 + \" \" + letterArray[0];\n        } else {\n          switch (options.precision) {\n            case 2:\n              color = f2(ch1 / 255) + \" \" + letterArray[0];\n              break;\n\n            case 3:\n            default:\n              color = f3(ch1 / 255) + \" \" + letterArray[0];\n          }\n        }\n      } else if (typeof ch4 === \"undefined\" || _typeof(ch4) === \"object\") {\n        // assume RGBA\n        if (ch4 && !isNaN(ch4.a)) {\n          //TODO Implement transparency.\n          //WORKAROUND use white for now, if transparent, otherwise handle as rgb\n          if (ch4.a === 0) {\n            color = ['1.000', '1.000', '1.000', letterArray[1]].join(\" \");\n            return color;\n          }\n        } // assume RGB\n\n\n        if (typeof ch1 === \"string\") {\n          color = [ch1, ch2, ch3, letterArray[1]].join(\" \");\n        } else {\n          switch (options.precision) {\n            case 2:\n              color = [f2(ch1 / 255), f2(ch2 / 255), f2(ch3 / 255), letterArray[1]].join(\" \");\n              break;\n\n            default:\n            case 3:\n              color = [f3(ch1 / 255), f3(ch2 / 255), f3(ch3 / 255), letterArray[1]].join(\" \");\n          }\n        }\n      } else {\n        // assume CMYK\n        if (typeof ch1 === 'string') {\n          color = [ch1, ch2, ch3, ch4, letterArray[2]].join(\" \");\n        } else {\n          switch (options.precision) {\n            case 2:\n              color = [f2(ch1 / 255), f2(ch2 / 255), f2(ch3 / 255), f2(ch4 / 255), letterArray[2]].join(\" \");\n              break;\n\n            case 3:\n            default:\n              color = [f3(ch1 / 255), f3(ch2 / 255), f3(ch3 / 255), f3(ch4 / 255), letterArray[2]].join(\" \");\n          }\n        }\n      }\n\n      return color;\n    };\n\n    var getFilters = API.__private__.getFilters = function () {\n      return filters;\n    };\n\n    var putStream = API.__private__.putStream = function (options) {\n      options = options || {};\n      var data = options.data || '';\n      var filters = options.filters || getFilters();\n      var alreadyAppliedFilters = options.alreadyAppliedFilters || [];\n      var addLength1 = options.addLength1 || false;\n      var valueOfLength1 = data.length;\n      var processedData = {};\n\n      if (filters === true) {\n        filters = ['FlateEncode'];\n      }\n\n      var keyValues = options.additionalKeyValues || [];\n\n      if (typeof jsPDF.API.processDataByFilters !== 'undefined') {\n        processedData = jsPDF.API.processDataByFilters(data, filters);\n      } else {\n        processedData = {\n          data: data,\n          reverseChain: []\n        };\n      }\n\n      var filterAsString = processedData.reverseChain + (Array.isArray(alreadyAppliedFilters) ? alreadyAppliedFilters.join(' ') : alreadyAppliedFilters.toString());\n\n      if (processedData.data.length !== 0) {\n        keyValues.push({\n          key: 'Length',\n          value: processedData.data.length\n        });\n\n        if (addLength1 === true) {\n          keyValues.push({\n            key: 'Length1',\n            value: valueOfLength1\n          });\n        }\n      }\n\n      if (filterAsString.length != 0) {\n        //if (filters.length === 0 && alreadyAppliedFilters.length === 1 && typeof alreadyAppliedFilters !== \"undefined\") {\n        if (filterAsString.split('/').length - 1 === 1) {\n          keyValues.push({\n            key: 'Filter',\n            value: filterAsString\n          });\n        } else {\n          keyValues.push({\n            key: 'Filter',\n            value: '[' + filterAsString + ']'\n          });\n        }\n      }\n\n      out('<<');\n\n      for (var i = 0; i < keyValues.length; i++) {\n        out('/' + keyValues[i].key + ' ' + keyValues[i].value);\n      }\n\n      out('>>');\n\n      if (processedData.data.length !== 0) {\n        out('stream');\n        out(processedData.data);\n        out('endstream');\n      }\n    };\n\n    var putPage = API.__private__.putPage = function (page) {\n      var mediaBox = page.mediaBox;\n      var pageNumber = page.number;\n      var data = page.data;\n      var pageObjectNumber = page.objId;\n      var pageContentsObjId = page.contentsObjId;\n      newObjectDeferredBegin(pageObjectNumber, true);\n      var wPt = pagesContext[currentPage].mediaBox.topRightX - pagesContext[currentPage].mediaBox.bottomLeftX;\n      var hPt = pagesContext[currentPage].mediaBox.topRightY - pagesContext[currentPage].mediaBox.bottomLeftY;\n      out('<</Type /Page');\n      out('/Parent ' + page.rootDictionaryObjId + ' 0 R');\n      out('/Resources ' + page.resourceDictionaryObjId + ' 0 R');\n      out('/MediaBox [' + parseFloat(f2(page.mediaBox.bottomLeftX)) + ' ' + parseFloat(f2(page.mediaBox.bottomLeftY)) + ' ' + f2(page.mediaBox.topRightX) + ' ' + f2(page.mediaBox.topRightY) + ']');\n\n      if (page.cropBox !== null) {\n        out('/CropBox [' + f2(page.cropBox.bottomLeftX) + ' ' + f2(page.cropBox.bottomLeftY) + ' ' + f2(page.cropBox.topRightX) + ' ' + f2(page.cropBox.topRightY) + ']');\n      }\n\n      if (page.bleedBox !== null) {\n        out('/BleedBox [' + f2(page.bleedBox.bottomLeftX) + ' ' + f2(page.bleedBox.bottomLeftY) + ' ' + f2(page.bleedBox.topRightX) + ' ' + f2(page.bleedBox.topRightY) + ']');\n      }\n\n      if (page.trimBox !== null) {\n        out('/TrimBox [' + f2(page.trimBox.bottomLeftX) + ' ' + f2(page.trimBox.bottomLeftY) + ' ' + f2(page.trimBox.topRightX) + ' ' + f2(page.trimBox.topRightY) + ']');\n      }\n\n      if (page.artBox !== null) {\n        out('/ArtBox [' + f2(page.artBox.bottomLeftX) + ' ' + f2(page.artBox.bottomLeftY) + ' ' + f2(page.artBox.topRightX) + ' ' + f2(page.artBox.topRightY) + ']');\n      }\n\n      if (typeof page.userUnit === \"number\" && page.userUnit !== 1.0) {\n        out('/UserUnit ' + page.userUnit);\n      }\n\n      events.publish('putPage', {\n        objId: pageObjectNumber,\n        pageContext: pagesContext[pageNumber],\n        pageNumber: pageNumber,\n        page: data\n      });\n      out('/Contents ' + pageContentsObjId + ' 0 R');\n      out('>>');\n      out('endobj'); // Page content\n\n      var pageContent = data.join('\\n');\n      newObjectDeferredBegin(pageContentsObjId, true);\n      putStream({\n        data: pageContent,\n        filters: getFilters()\n      });\n      out('endobj');\n      return pageObjectNumber;\n    };\n\n    var putPages = API.__private__.putPages = function () {\n      var n,\n          i,\n          pageObjectNumbers = [];\n\n      for (n = 1; n <= page; n++) {\n        pagesContext[n].objId = newObjectDeferred();\n        pagesContext[n].contentsObjId = newObjectDeferred();\n      }\n\n      for (n = 1; n <= page; n++) {\n        pageObjectNumbers.push(putPage({\n          number: n,\n          data: pages[n],\n          objId: pagesContext[n].objId,\n          contentsObjId: pagesContext[n].contentsObjId,\n          mediaBox: pagesContext[n].mediaBox,\n          cropBox: pagesContext[n].cropBox,\n          bleedBox: pagesContext[n].bleedBox,\n          trimBox: pagesContext[n].trimBox,\n          artBox: pagesContext[n].artBox,\n          userUnit: pagesContext[n].userUnit,\n          rootDictionaryObjId: rootDictionaryObjId,\n          resourceDictionaryObjId: resourceDictionaryObjId\n        }));\n      }\n\n      newObjectDeferredBegin(rootDictionaryObjId, true);\n      out('<</Type /Pages');\n      var kids = '/Kids [';\n\n      for (i = 0; i < page; i++) {\n        kids += pageObjectNumbers[i] + ' 0 R ';\n      }\n\n      out(kids + ']');\n      out('/Count ' + page);\n      out('>>');\n      out('endobj');\n      events.publish('postPutPages');\n    };\n\n    var putFont = function putFont(font) {\n      events.publish('putFont', {\n        font: font,\n        out: out,\n        newObject: newObject,\n        putStream: putStream\n      });\n\n      if (font.isAlreadyPutted !== true) {\n        font.objectNumber = newObject();\n        out('<<');\n        out('/Type /Font');\n        out('/BaseFont /' + font.postScriptName);\n        out('/Subtype /Type1');\n\n        if (typeof font.encoding === 'string') {\n          out('/Encoding /' + font.encoding);\n        }\n\n        out('/FirstChar 32');\n        out('/LastChar 255');\n        out('>>');\n        out('endobj');\n      }\n    };\n\n    var putFonts = function putFonts() {\n      for (var fontKey in fonts) {\n        if (fonts.hasOwnProperty(fontKey)) {\n          if (putOnlyUsedFonts === false || putOnlyUsedFonts === true && usedFonts.hasOwnProperty(fontKey)) {\n            putFont(fonts[fontKey]);\n          }\n        }\n      }\n    };\n\n    var putResourceDictionary = function putResourceDictionary() {\n      out('/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]');\n      out('/Font <<'); // Do this for each font, the '1' bit is the index of the font\n\n      for (var fontKey in fonts) {\n        if (fonts.hasOwnProperty(fontKey)) {\n          if (putOnlyUsedFonts === false || putOnlyUsedFonts === true && usedFonts.hasOwnProperty(fontKey)) {\n            out('/' + fontKey + ' ' + fonts[fontKey].objectNumber + ' 0 R');\n          }\n        }\n      }\n\n      out('>>');\n      out('/XObject <<');\n      events.publish('putXobjectDict');\n      out('>>');\n    };\n\n    var putResources = function putResources() {\n      putFonts();\n      events.publish('putResources');\n      newObjectDeferredBegin(resourceDictionaryObjId, true);\n      out('<<');\n      putResourceDictionary();\n      out('>>');\n      out('endobj');\n      events.publish('postPutResources');\n    };\n\n    var putAdditionalObjects = function putAdditionalObjects() {\n      events.publish('putAdditionalObjects');\n\n      for (var i = 0; i < additionalObjects.length; i++) {\n        var obj = additionalObjects[i];\n        newObjectDeferredBegin(obj.objId, true);\n        out(obj.content);\n        out('endobj');\n      }\n\n      events.publish('postPutAdditionalObjects');\n    };\n\n    var addToFontDictionary = function addToFontDictionary(fontKey, fontName, fontStyle) {\n      // this is mapping structure for quick font key lookup.\n      // returns the KEY of the font (ex: \"F1\") for a given\n      // pair of font name and type (ex: \"Arial\". \"Italic\")\n      if (!fontmap.hasOwnProperty(fontName)) {\n        fontmap[fontName] = {};\n      }\n\n      fontmap[fontName][fontStyle] = fontKey;\n    };\n\n    var addFont = function addFont(postScriptName, fontName, fontStyle, encoding, isStandardFont) {\n      isStandardFont = isStandardFont || false;\n      var fontKey = 'F' + (Object.keys(fonts).length + 1).toString(10),\n          // This is FontObject\n      font = {\n        'id': fontKey,\n        'postScriptName': postScriptName,\n        'fontName': fontName,\n        'fontStyle': fontStyle,\n        'encoding': encoding,\n        'isStandardFont': isStandardFont,\n        'metadata': {}\n      };\n      var instance = this;\n      events.publish('addFont', {\n        font: font,\n        instance: instance\n      });\n\n      if (fontKey !== undefined) {\n        fonts[fontKey] = font;\n        addToFontDictionary(fontKey, fontName, fontStyle);\n      }\n\n      return fontKey;\n    };\n\n    var addFonts = function addFonts(arrayOfFonts) {\n      for (var i = 0, l = standardFonts.length; i < l; i++) {\n        var fontKey = addFont(arrayOfFonts[i][0], arrayOfFonts[i][1], arrayOfFonts[i][2], standardFonts[i][3], true);\n        usedFonts[fontKey] = true; // adding aliases for standard fonts, this time matching the capitalization\n\n        var parts = arrayOfFonts[i][0].split('-');\n        addToFontDictionary(fontKey, parts[0], parts[1] || '');\n      }\n\n      events.publish('addFonts', {\n        fonts: fonts,\n        dictionary: fontmap\n      });\n    };\n\n    var SAFE = function __safeCall(fn) {\n      fn.foo = function __safeCallWrapper() {\n        try {\n          return fn.apply(this, arguments);\n        } catch (e) {\n          var stack = e.stack || '';\n          if (~stack.indexOf(' at ')) stack = stack.split(\" at \")[1];\n          var m = \"Error in function \" + stack.split(\"\\n\")[0].split('<')[0] + \": \" + e.message;\n\n          if (global.console) {\n            global.console.error(m, e);\n            if (global.alert) alert(m);\n          } else {\n            throw new Error(m);\n          }\n        }\n      };\n\n      fn.foo.bar = fn;\n      return fn.foo;\n    };\n\n    var to8bitStream = function to8bitStream(text, flags) {\n      /**\n       * PDF 1.3 spec:\n       * \"For text strings encoded in Unicode, the first two bytes must be 254 followed by\n       * 255, representing the Unicode byte order marker, U+FEFF. (This sequence conflicts\n       * with the PDFDocEncoding character sequence thorn ydieresis, which is unlikely\n       * to be a meaningful beginning of a word or phrase.) The remainder of the\n       * string consists of Unicode character codes, according to the UTF-16 encoding\n       * specified in the Unicode standard, version 2.0. Commonly used Unicode values\n       * are represented as 2 bytes per character, with the high-order byte appearing first\n       * in the string.\"\n       *\n       * In other words, if there are chars in a string with char code above 255, we\n       * recode the string to UCS2 BE - string doubles in length and BOM is prepended.\n       *\n       * HOWEVER!\n       * Actual *content* (body) text (as opposed to strings used in document properties etc)\n       * does NOT expect BOM. There, it is treated as a literal GID (Glyph ID)\n       *\n       * Because of Adobe's focus on \"you subset your fonts!\" you are not supposed to have\n       * a font that maps directly Unicode (UCS2 / UTF16BE) code to font GID, but you could\n       * fudge it with \"Identity-H\" encoding and custom CIDtoGID map that mimics Unicode\n       * code page. There, however, all characters in the stream are treated as GIDs,\n       * including BOM, which is the reason we need to skip BOM in content text (i.e. that\n       * that is tied to a font).\n       *\n       * To signal this \"special\" PDFEscape / to8bitStream handling mode,\n       * API.text() function sets (unless you overwrite it with manual values\n       * given to API.text(.., flags) )\n       * flags.autoencode = true\n       * flags.noBOM = true\n       *\n       * ===================================================================================\n       * `flags` properties relied upon:\n       *   .sourceEncoding = string with encoding label.\n       *                     \"Unicode\" by default. = encoding of the incoming text.\n       *                     pass some non-existing encoding name\n       *                     (ex: 'Do not touch my strings! I know what I am doing.')\n       *                     to make encoding code skip the encoding step.\n       *   .outputEncoding = Either valid PDF encoding name\n       *                     (must be supported by jsPDF font metrics, otherwise no encoding)\n       *                     or a JS object, where key = sourceCharCode, value = outputCharCode\n       *                     missing keys will be treated as: sourceCharCode === outputCharCode\n       *   .noBOM\n       *       See comment higher above for explanation for why this is important\n       *   .autoencode\n       *       See comment higher above for explanation for why this is important\n       */\n      var i, l, sourceEncoding, encodingBlock, outputEncoding, newtext, isUnicode, ch, bch;\n      flags = flags || {};\n      sourceEncoding = flags.sourceEncoding || 'Unicode';\n      outputEncoding = flags.outputEncoding; // This 'encoding' section relies on font metrics format\n      // attached to font objects by, among others,\n      // \"Willow Systems' standard_font_metrics plugin\"\n      // see jspdf.plugin.standard_font_metrics.js for format\n      // of the font.metadata.encoding Object.\n      // It should be something like\n      //   .encoding = {'codePages':['WinANSI....'], 'WinANSI...':{code:code, ...}}\n      //   .widths = {0:width, code:width, ..., 'fof':divisor}\n      //   .kerning = {code:{previous_char_code:shift, ..., 'fof':-divisor},...}\n\n      if ((flags.autoencode || outputEncoding) && fonts[activeFontKey].metadata && fonts[activeFontKey].metadata[sourceEncoding] && fonts[activeFontKey].metadata[sourceEncoding].encoding) {\n        encodingBlock = fonts[activeFontKey].metadata[sourceEncoding].encoding; // each font has default encoding. Some have it clearly defined.\n\n        if (!outputEncoding && fonts[activeFontKey].encoding) {\n          outputEncoding = fonts[activeFontKey].encoding;\n        } // Hmmm, the above did not work? Let's try again, in different place.\n\n\n        if (!outputEncoding && encodingBlock.codePages) {\n          outputEncoding = encodingBlock.codePages[0]; // let's say, first one is the default\n        }\n\n        if (typeof outputEncoding === 'string') {\n          outputEncoding = encodingBlock[outputEncoding];\n        } // we want output encoding to be a JS Object, where\n        // key = sourceEncoding's character code and\n        // value = outputEncoding's character code.\n\n\n        if (outputEncoding) {\n          isUnicode = false;\n          newtext = [];\n\n          for (i = 0, l = text.length; i < l; i++) {\n            ch = outputEncoding[text.charCodeAt(i)];\n\n            if (ch) {\n              newtext.push(String.fromCharCode(ch));\n            } else {\n              newtext.push(text[i]);\n            } // since we are looping over chars anyway, might as well\n            // check for residual unicodeness\n\n\n            if (newtext[i].charCodeAt(0) >> 8) {\n              /* more than 255 */\n              isUnicode = true;\n            }\n          }\n\n          text = newtext.join('');\n        }\n      }\n\n      i = text.length; // isUnicode may be set to false above. Hence the triple-equal to undefined\n\n      while (isUnicode === undefined && i !== 0) {\n        if (text.charCodeAt(i - 1) >> 8) {\n          /* more than 255 */\n          isUnicode = true;\n        }\n\n        i--;\n      }\n\n      if (!isUnicode) {\n        return text;\n      }\n\n      newtext = flags.noBOM ? [] : [254, 255];\n\n      for (i = 0, l = text.length; i < l; i++) {\n        ch = text.charCodeAt(i);\n        bch = ch >> 8; // divide by 256\n\n        if (bch >> 8) {\n          /* something left after dividing by 256 second time */\n          throw new Error(\"Character at position \" + i + \" of string '\" + text + \"' exceeds 16bits. Cannot be encoded into UCS-2 BE\");\n        }\n\n        newtext.push(bch);\n        newtext.push(ch - (bch << 8));\n      }\n\n      return String.fromCharCode.apply(undefined, newtext);\n    };\n\n    var pdfEscape = API.__private__.pdfEscape = API.pdfEscape = function (text, flags) {\n      /**\n       * Replace '/', '(', and ')' with pdf-safe versions\n       *\n       * Doing to8bitStream does NOT make this PDF display unicode text. For that\n       * we also need to reference a unicode font and embed it - royal pain in the rear.\n       *\n       * There is still a benefit to to8bitStream - PDF simply cannot handle 16bit chars,\n       * which JavaScript Strings are happy to provide. So, while we still cannot display\n       * 2-byte characters property, at least CONDITIONALLY converting (entire string containing)\n       * 16bit chars to (USC-2-BE) 2-bytes per char + BOM streams we ensure that entire PDF\n       * is still parseable.\n       * This will allow immediate support for unicode in document properties strings.\n       */\n      return to8bitStream(text, flags).replace(/\\\\/g, '\\\\\\\\').replace(/\\(/g, '\\\\(').replace(/\\)/g, '\\\\)');\n    };\n\n    var beginPage = API.__private__.beginPage = function (width, height) {\n      var tmp; // Dimensions are stored as user units and converted to points on output\n\n      var orientation = typeof height === 'string' && height.toLowerCase();\n\n      if (typeof width === 'string') {\n        if (tmp = getPageFormat(width.toLowerCase())) {\n          width = tmp[0];\n          height = tmp[1];\n        }\n      }\n\n      if (Array.isArray(width)) {\n        height = width[1];\n        width = width[0];\n      }\n\n      if (isNaN(width) || isNaN(height)) {\n        width = format[0];\n        height = format[1];\n      }\n\n      if (orientation) {\n        switch (orientation.substr(0, 1)) {\n          case 'l':\n            if (height > width) orientation = 's';\n            break;\n\n          case 'p':\n            if (width > height) orientation = 's';\n            break;\n        }\n\n        if (orientation === 's') {\n          tmp = width;\n          width = height;\n          height = tmp;\n        }\n      }\n\n      if (width > 14400 || height > 14400) {\n        console.warn('A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400');\n        width = Math.min(14400, width);\n        height = Math.min(14400, height);\n      }\n\n      format = [width, height];\n      outToPages = true;\n      pages[++page] = [];\n      pagesContext[page] = {\n        objId: 0,\n        contentsObjId: 0,\n        userUnit: Number(userUnit),\n        artBox: null,\n        bleedBox: null,\n        cropBox: null,\n        trimBox: null,\n        mediaBox: {\n          bottomLeftX: 0,\n          bottomLeftY: 0,\n          topRightX: Number(width),\n          topRightY: Number(height)\n        }\n      };\n\n      _setPage(page);\n    };\n\n    var _addPage = function _addPage() {\n      beginPage.apply(this, arguments); // Set line width\n\n      setLineWidth(lineWidth); // Set draw color\n\n      out(strokeColor); // resurrecting non-default line caps, joins\n\n      if (lineCapID !== 0) {\n        out(lineCapID + ' J');\n      }\n\n      if (lineJoinID !== 0) {\n        out(lineJoinID + ' j');\n      }\n\n      events.publish('addPage', {\n        pageNumber: page\n      });\n    };\n\n    var _deletePage = function _deletePage(n) {\n      if (n > 0 && n <= page) {\n        pages.splice(n, 1);\n        page--;\n\n        if (currentPage > page) {\n          currentPage = page;\n        }\n\n        this.setPage(currentPage);\n      }\n    };\n\n    var _setPage = function _setPage(n) {\n      if (n > 0 && n <= page) {\n        currentPage = n;\n      }\n    };\n\n    var getNumberOfPages = API.__private__.getNumberOfPages = API.getNumberOfPages = function () {\n      return pages.length - 1;\n    };\n    /**\n     * Returns a document-specific font key - a label assigned to a\n     * font name + font type combination at the time the font was added\n     * to the font inventory.\n     *\n     * Font key is used as label for the desired font for a block of text\n     * to be added to the PDF document stream.\n     * @private\n     * @function\n     * @param fontName {string} can be undefined on \"falthy\" to indicate \"use current\"\n     * @param fontStyle {string} can be undefined on \"falthy\" to indicate \"use current\"\n     * @returns {string} Font key.\n     * @ignore\n     */\n\n\n    var _getFont = function getFont(fontName, fontStyle, options) {\n      var key = undefined,\n          fontNameLowerCase;\n      options = options || {};\n      fontName = fontName !== undefined ? fontName : fonts[activeFontKey].fontName;\n      fontStyle = fontStyle !== undefined ? fontStyle : fonts[activeFontKey].fontStyle;\n      fontNameLowerCase = fontName.toLowerCase();\n\n      if (fontmap[fontNameLowerCase] !== undefined && fontmap[fontNameLowerCase][fontStyle] !== undefined) {\n        key = fontmap[fontNameLowerCase][fontStyle];\n      } else if (fontmap[fontName] !== undefined && fontmap[fontName][fontStyle] !== undefined) {\n        key = fontmap[fontName][fontStyle];\n      } else {\n        if (options.disableWarning === false) {\n          console.warn(\"Unable to look up font label for font '\" + fontName + \"', '\" + fontStyle + \"'. Refer to getFontList() for available fonts.\");\n        }\n      }\n\n      if (!key && !options.noFallback) {\n        key = fontmap['times'][fontStyle];\n\n        if (key == null) {\n          key = fontmap['times']['normal'];\n        }\n      }\n\n      return key;\n    };\n\n    var putInfo = API.__private__.putInfo = function () {\n      newObject();\n      out('<<');\n      out('/Producer (jsPDF ' + jsPDF.version + ')');\n\n      for (var key in documentProperties) {\n        if (documentProperties.hasOwnProperty(key) && documentProperties[key]) {\n          out('/' + key.substr(0, 1).toUpperCase() + key.substr(1) + ' (' + pdfEscape(documentProperties[key]) + ')');\n        }\n      }\n\n      out('/CreationDate (' + creationDate + ')');\n      out('>>');\n      out('endobj');\n    };\n\n    var putCatalog = API.__private__.putCatalog = function (options) {\n      options = options || {};\n      var tmpRootDictionaryObjId = options.rootDictionaryObjId || rootDictionaryObjId;\n      newObject();\n      out('<<');\n      out('/Type /Catalog');\n      out('/Pages ' + tmpRootDictionaryObjId + ' 0 R'); // PDF13ref Section 7.2.1\n\n      if (!zoomMode) zoomMode = 'fullwidth';\n\n      switch (zoomMode) {\n        case 'fullwidth':\n          out('/OpenAction [3 0 R /FitH null]');\n          break;\n\n        case 'fullheight':\n          out('/OpenAction [3 0 R /FitV null]');\n          break;\n\n        case 'fullpage':\n          out('/OpenAction [3 0 R /Fit]');\n          break;\n\n        case 'original':\n          out('/OpenAction [3 0 R /XYZ null null 1]');\n          break;\n\n        default:\n          var pcn = '' + zoomMode;\n          if (pcn.substr(pcn.length - 1) === '%') zoomMode = parseInt(zoomMode) / 100;\n\n          if (typeof zoomMode === 'number') {\n            out('/OpenAction [3 0 R /XYZ null null ' + f2(zoomMode) + ']');\n          }\n\n      }\n\n      if (!layoutMode) layoutMode = 'continuous';\n\n      switch (layoutMode) {\n        case 'continuous':\n          out('/PageLayout /OneColumn');\n          break;\n\n        case 'single':\n          out('/PageLayout /SinglePage');\n          break;\n\n        case 'two':\n        case 'twoleft':\n          out('/PageLayout /TwoColumnLeft');\n          break;\n\n        case 'tworight':\n          out('/PageLayout /TwoColumnRight');\n          break;\n      }\n\n      if (pageMode) {\n        /**\n         * A name object specifying how the document should be displayed when opened:\n         * UseNone      : Neither document outline nor thumbnail images visible -- DEFAULT\n         * UseOutlines  : Document outline visible\n         * UseThumbs    : Thumbnail images visible\n         * FullScreen   : Full-screen mode, with no menu bar, window controls, or any other window visible\n         */\n        out('/PageMode /' + pageMode);\n      }\n\n      events.publish('putCatalog');\n      out('>>');\n      out('endobj');\n    };\n\n    var putTrailer = API.__private__.putTrailer = function () {\n      out('trailer');\n      out('<<');\n      out('/Size ' + (objectNumber + 1));\n      out('/Root ' + objectNumber + ' 0 R');\n      out('/Info ' + (objectNumber - 1) + ' 0 R');\n      out(\"/ID [ <\" + fileId + \"> <\" + fileId + \"> ]\");\n      out('>>');\n    };\n\n    var putHeader = API.__private__.putHeader = function () {\n      out('%PDF-' + pdfVersion);\n      out(\"%\\xBA\\xDF\\xAC\\xE0\");\n    };\n\n    var putXRef = API.__private__.putXRef = function () {\n      var i = 1;\n      var p = \"0000000000\";\n      out('xref');\n      out('0 ' + (objectNumber + 1));\n      out('0000000000 65535 f ');\n\n      for (i = 1; i <= objectNumber; i++) {\n        var offset = offsets[i];\n\n        if (typeof offset === 'function') {\n          out((p + offsets[i]()).slice(-10) + ' 00000 n ');\n        } else {\n          if (typeof offsets[i] !== \"undefined\") {\n            out((p + offsets[i]).slice(-10) + ' 00000 n ');\n          } else {\n            out('0000000000 00000 n ');\n          }\n        }\n      }\n    };\n\n    var buildDocument = API.__private__.buildDocument = function () {\n      outToPages = false; // switches out() to content\n      //reset fields relevant for objectNumber generation and xref.\n\n      objectNumber = 0;\n      content_length = 0;\n      content = [];\n      offsets = [];\n      additionalObjects = [];\n      rootDictionaryObjId = newObjectDeferred();\n      resourceDictionaryObjId = newObjectDeferred();\n      events.publish('buildDocument');\n      putHeader();\n      putPages();\n      putAdditionalObjects();\n      putResources();\n      putInfo();\n      putCatalog();\n      var offsetOfXRef = content_length;\n      putXRef();\n      putTrailer();\n      out('startxref');\n      out('' + offsetOfXRef);\n      out('%%EOF');\n      outToPages = true;\n      return content.join('\\n');\n    };\n\n    var getBlob = API.__private__.getBlob = function (data) {\n      return new Blob([getArrayBuffer(data)], {\n        type: \"application/pdf\"\n      });\n    };\n    /**\n     * Generates the PDF document.\n     *\n     * If `type` argument is undefined, output is raw body of resulting PDF returned as a string.\n     *\n     * @param {string} type A string identifying one of the possible output types. Possible values are 'arraybuffer', 'blob', 'bloburi'/'bloburl', 'datauristring'/'dataurlstring', 'datauri'/'dataurl', 'dataurlnewwindow'.\n     * @param {Object} options An object providing some additional signalling to PDF generator. Possible options are 'filename'.\n     *\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name output\n     */\n\n\n    var output = API.output = API.__private__.output = SAFE(function output(type, options) {\n      options = options || {};\n      var pdfDocument = buildDocument();\n\n      if (typeof options === \"string\") {\n        options = {\n          filename: options\n        };\n      } else {\n        options.filename = options.filename || 'generated.pdf';\n      }\n\n      switch (type) {\n        case undefined:\n          return pdfDocument;\n\n        case 'save':\n          API.save(options.filename);\n          break;\n\n        case 'arraybuffer':\n          return getArrayBuffer(pdfDocument);\n\n        case 'blob':\n          return getBlob(pdfDocument);\n\n        case 'bloburi':\n        case 'bloburl':\n          // Developer is responsible of calling revokeObjectURL\n          if (typeof global.URL !== \"undefined\" && typeof global.URL.createObjectURL === \"function\") {\n            return global.URL && global.URL.createObjectURL(getBlob(pdfDocument)) || void 0;\n          } else {\n            console.warn('bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.');\n          }\n\n          break;\n\n        case 'datauristring':\n        case 'dataurlstring':\n          return 'data:application/pdf;filename=' + options.filename + ';base64,' + btoa(pdfDocument);\n\n        case 'dataurlnewwindow':\n          var htmlForNewWindow = '<html>' + '<style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style>' + '<body>' + '<iframe src=\"' + this.output('datauristring') + '\"></iframe>' + '</body></html>';\n          var nW = global.open();\n\n          if (nW !== null) {\n            nW.document.write(htmlForNewWindow);\n          }\n\n          if (nW || typeof safari === \"undefined\") return nW;\n\n        /* pass through */\n\n        case 'datauri':\n        case 'dataurl':\n          return global.document.location.href = 'data:application/pdf;filename=' + options.filename + ';base64,' + btoa(pdfDocument);\n\n        default:\n          return null;\n      }\n    });\n    /**\n     * Used to see if a supplied hotfix was requested when the pdf instance was created.\n     * @param {string} hotfixName - The name of the hotfix to check.\n     * @returns {boolean}\n     */\n\n    var hasHotfix = function hasHotfix(hotfixName) {\n      return Array.isArray(hotfixes) === true && hotfixes.indexOf(hotfixName) > -1;\n    };\n\n    switch (unit) {\n      case 'pt':\n        k = 1;\n        break;\n\n      case 'mm':\n        k = 72 / 25.4;\n        break;\n\n      case 'cm':\n        k = 72 / 2.54;\n        break;\n\n      case 'in':\n        k = 72;\n        break;\n\n      case 'px':\n        if (hasHotfix('px_scaling') == true) {\n          k = 72 / 96;\n        } else {\n          k = 96 / 72;\n        }\n\n        break;\n\n      case 'pc':\n        k = 12;\n        break;\n\n      case 'em':\n        k = 12;\n        break;\n\n      case 'ex':\n        k = 6;\n        break;\n\n      default:\n        throw new Error('Invalid unit: ' + unit);\n    }\n\n    setCreationDate();\n    setFileId(); //---------------------------------------\n    // Public API\n\n    var getPageInfo = API.__private__.getPageInfo = function (pageNumberOneBased) {\n      if (isNaN(pageNumberOneBased) || pageNumberOneBased % 1 !== 0) {\n        throw new Error('Invalid argument passed to jsPDF.getPageInfo');\n      }\n\n      var objId = pagesContext[pageNumberOneBased].objId;\n      return {\n        objId: objId,\n        pageNumber: pageNumberOneBased,\n        pageContext: pagesContext[pageNumberOneBased]\n      };\n    };\n\n    var getPageInfoByObjId = API.__private__.getPageInfoByObjId = function (objId) {\n\n      for (var pageNumber in pagesContext) {\n        if (pagesContext[pageNumber].objId === objId) {\n          break;\n        }\n      }\n\n      if (isNaN(objId) || objId % 1 !== 0) {\n        throw new Error('Invalid argument passed to jsPDF.getPageInfoByObjId');\n      }\n\n      return getPageInfo(pageNumber);\n    };\n\n    var getCurrentPageInfo = API.__private__.getCurrentPageInfo = function () {\n      return {\n        objId: pagesContext[currentPage].objId,\n        pageNumber: currentPage,\n        pageContext: pagesContext[currentPage]\n      };\n    };\n    /**\n     * Adds (and transfers the focus to) new page to the PDF document.\n     * @param format {String/Array} The format of the new page. Can be: <ul><li>a0 - a10</li><li>b0 - b10</li><li>c0 - c10</li><li>dl</li><li>letter</li><li>government-letter</li><li>legal</li><li>junior-legal</li><li>ledger</li><li>tabloid</li><li>credit-card</li></ul><br />\n     * Default is \"a4\". If you want to use your own format just pass instead of one of the above predefined formats the size as an number-array, e.g. [595.28, 841.89]\n     * @param orientation {string} Orientation of the new page. Possible values are \"portrait\" or \"landscape\" (or shortcuts \"p\" (Default), \"l\").\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     *\n     * @memberOf jsPDF\n     * @name addPage\n     */\n\n\n    API.addPage = function () {\n      _addPage.apply(this, arguments);\n\n      return this;\n    };\n    /**\n     * Adds (and transfers the focus to) new page to the PDF document.\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     *\n     * @memberOf jsPDF\n     * @name setPage\n     * @param {number} page Switch the active page to the page number specified.\n     * @example\n     * doc = jsPDF()\n     * doc.addPage()\n     * doc.addPage()\n     * doc.text('I am on page 3', 10, 10)\n     * doc.setPage(1)\n     * doc.text('I am on page 1', 10, 10)\n     */\n\n\n    API.setPage = function () {\n      _setPage.apply(this, arguments);\n\n      return this;\n    };\n    /**\n     * @name insertPage\n     * @memberOf jsPDF\n     * \n     * @function \n     * @instance\n     * @param {Object} beforePage\n     * @returns {jsPDF}\n     */\n\n\n    API.insertPage = function (beforePage) {\n      this.addPage();\n      this.movePage(currentPage, beforePage);\n      return this;\n    };\n    /**\n     * @name movePage\n     * @memberOf jsPDF\n     * @function\n     * @instance\n     * @param {Object} targetPage\n     * @param {Object} beforePage\n     * @returns {jsPDF}\n     */\n\n\n    API.movePage = function (targetPage, beforePage) {\n      if (targetPage > beforePage) {\n        var tmpPages = pages[targetPage];\n        var tmpPagesContext = pagesContext[targetPage];\n\n        for (var i = targetPage; i > beforePage; i--) {\n          pages[i] = pages[i - 1];\n          pagesContext[i] = pagesContext[i - 1];\n        }\n\n        pages[beforePage] = tmpPages;\n        pagesContext[beforePage] = tmpPagesContext;\n        this.setPage(beforePage);\n      } else if (targetPage < beforePage) {\n        var tmpPages = pages[targetPage];\n        var tmpPagesContext = pagesContext[targetPage];\n\n        for (var i = targetPage; i < beforePage; i++) {\n          pages[i] = pages[i + 1];\n          pagesContext[i] = pagesContext[i + 1];\n        }\n\n        pages[beforePage] = tmpPages;\n        pagesContext[beforePage] = tmpPagesContext;\n        this.setPage(beforePage);\n      }\n\n      return this;\n    };\n    /**\n     * Deletes a page from the PDF.\n     * @name deletePage\n     * @memberOf jsPDF\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     */\n\n\n    API.deletePage = function () {\n      _deletePage.apply(this, arguments);\n\n      return this;\n    };\n    /**\n     * Adds text to page. Supports adding multiline text when 'text' argument is an Array of Strings.\n     *\n     * @function\n     * @instance\n     * @param {String|Array} text String or array of strings to be added to the page. Each line is shifted one line down per font, spacing settings declared before this call.\n     * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page.\n     * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page.\n     * @param {Object} [options] - Collection of settings signaling how the text must be encoded.\n     * @param {string} [options.align=left] - The alignment of the text, possible values: left, center, right, justify.\n     * @param {string} [options.baseline=alphabetic] - Sets text baseline used when drawing the text, possible values: alphabetic, ideographic, bottom, top, middle.\n     * @param {string} [options.angle=0] - Rotate the text counterclockwise. Expects the angle in degree.\n     * @param {string} [options.charSpace=0] - The space between each letter.\n     * @param {string} [options.lineHeightFactor=1.15] - The lineheight of each line.\n     * @param {string} [options.flags] - Flags for to8bitStream.\n     * @param {string} [options.flags.noBOM=true] - Don't add BOM to Unicode-text.\n     * @param {string} [options.flags.autoencode=true] - Autoencode the Text.\n     * @param {string} [options.maxWidth=0] - Split the text by given width, 0 = no split.\n     * @param {string} [options.renderingMode=fill] - Set how the text should be rendered, possible values: fill, stroke, fillThenStroke, invisible, fillAndAddForClipping, strokeAndAddPathForClipping, fillThenStrokeAndAddToPathForClipping, addToPathForClipping.\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name text\n     */\n\n\n    var text = API.__private__.text = API.text = function (text, x, y, options) {\n      /**\n       * Inserts something like this into PDF\n       *   BT\n       *    /F1 16 Tf  % Font name + size\n       *    16 TL % How many units down for next line in multiline text\n       *    0 g % color\n       *    28.35 813.54 Td % position\n       *    (line one) Tj\n       *    T* (line two) Tj\n       *    T* (line three) Tj\n       *   ET\n       */\n      //backwardsCompatibility\n      var tmp; // Pre-August-2012 the order of arguments was function(x, y, text, flags)\n      // in effort to make all calls have similar signature like\n      //   function(data, coordinates... , miscellaneous)\n      // this method had its args flipped.\n      // code below allows backward compatibility with old arg order.\n\n      if (typeof text === 'number' && typeof x === 'number' && (typeof y === 'string' || Array.isArray(y))) {\n        tmp = y;\n        y = x;\n        x = text;\n        text = tmp;\n      }\n\n      var flags = arguments[3];\n      var angle = arguments[4];\n      var align = arguments[5];\n\n      if (_typeof(flags) !== \"object\" || flags === null) {\n        if (typeof angle === 'string') {\n          align = angle;\n          angle = null;\n        }\n\n        if (typeof flags === 'string') {\n          align = flags;\n          flags = null;\n        }\n\n        if (typeof flags === 'number') {\n          angle = flags;\n          flags = null;\n        }\n\n        options = {\n          flags: flags,\n          angle: angle,\n          align: align\n        };\n      }\n\n      flags = flags || {};\n      flags.noBOM = flags.noBOM || true;\n      flags.autoencode = flags.autoencode || true;\n\n      if (isNaN(x) || isNaN(y) || typeof text === \"undefined\" || text === null) {\n        throw new Error('Invalid arguments passed to jsPDF.text');\n      }\n\n      if (text.length === 0) {\n        return scope;\n      }\n\n      var xtra = '';\n      var isHex = false;\n      var lineHeight = typeof options.lineHeightFactor === 'number' ? options.lineHeightFactor : lineHeightFactor;\n      var scope = options.scope || this;\n\n      function ESC(s) {\n        s = s.split(\"\\t\").join(Array(options.TabLen || 9).join(\" \"));\n        return pdfEscape(s, flags);\n      }\n\n      function transformTextToSpecialArray(text) {\n        //we don't want to destroy original text array, so cloning it\n        var sa = text.concat();\n        var da = [];\n        var len = sa.length;\n        var curDa; //we do array.join('text that must not be PDFescaped\")\n        //thus, pdfEscape each component separately\n\n        while (len--) {\n          curDa = sa.shift();\n\n          if (typeof curDa === \"string\") {\n            da.push(curDa);\n          } else {\n            if (Array.isArray(text) && curDa.length === 1) {\n              da.push(curDa[0]);\n            } else {\n              da.push([curDa[0], curDa[1], curDa[2]]);\n            }\n          }\n        }\n\n        return da;\n      }\n\n      function processTextByFunction(text, processingFunction) {\n        var result;\n\n        if (typeof text === 'string') {\n          result = processingFunction(text)[0];\n        } else if (Array.isArray(text)) {\n          //we don't want to destroy original text array, so cloning it\n          var sa = text.concat();\n          var da = [];\n          var len = sa.length;\n          var curDa;\n          var tmpResult; //we do array.join('text that must not be PDFescaped\")\n          //thus, pdfEscape each component separately\n\n          while (len--) {\n            curDa = sa.shift();\n\n            if (typeof curDa === \"string\") {\n              da.push(processingFunction(curDa)[0]);\n            } else if (Array.isArray(curDa) && curDa[0] === \"string\") {\n              tmpResult = processingFunction(curDa[0], curDa[1], curDa[2]);\n              da.push([tmpResult[0], tmpResult[1], tmpResult[2]]);\n            }\n          }\n\n          result = da;\n        }\n\n        return result;\n      } //Check if text is of type String\n\n\n      var textIsOfTypeString = false;\n      var tmpTextIsOfTypeString = true;\n\n      if (typeof text === 'string') {\n        textIsOfTypeString = true;\n      } else if (Array.isArray(text)) {\n        //we don't want to destroy original text array, so cloning it\n        var sa = text.concat();\n        var da = [];\n        var len = sa.length;\n        var curDa; //we do array.join('text that must not be PDFescaped\")\n        //thus, pdfEscape each component separately\n\n        while (len--) {\n          curDa = sa.shift();\n\n          if (typeof curDa !== \"string\" || Array.isArray(curDa) && typeof curDa[0] !== \"string\") {\n            tmpTextIsOfTypeString = false;\n          }\n        }\n\n        textIsOfTypeString = tmpTextIsOfTypeString;\n      }\n\n      if (textIsOfTypeString === false) {\n        throw new Error('Type of text must be string or Array. \"' + text + '\" is not recognized.');\n      } //Escaping \n\n\n      var activeFontEncoding = fonts[activeFontKey].encoding;\n\n      if (activeFontEncoding === \"WinAnsiEncoding\" || activeFontEncoding === \"StandardEncoding\") {\n        text = processTextByFunction(text, function (text, posX, posY) {\n          return [ESC(text), posX, posY];\n        });\n      } //If there are any newlines in text, we assume\n      //the user wanted to print multiple lines, so break the\n      //text up into an array. If the text is already an array,\n      //we assume the user knows what they are doing.\n      //Convert text into an array anyway to simplify\n      //later code.\n\n\n      if (typeof text === 'string') {\n        if (text.match(/[\\r?\\n]/)) {\n          text = text.split(/\\r\\n|\\r|\\n/g);\n        } else {\n          text = [text];\n        }\n      } //baseline\n\n\n      var height = activeFontSize / scope.internal.scaleFactor;\n      var descent = height * (lineHeightFactor - 1);\n\n      switch (options.baseline) {\n        case 'bottom':\n          y -= descent;\n          break;\n\n        case 'top':\n          y += height - descent;\n          break;\n\n        case 'hanging':\n          y += height - 2 * descent;\n          break;\n\n        case 'middle':\n          y += height / 2 - descent;\n          break;\n\n        case 'ideographic':\n        case 'alphabetic':\n        default:\n          // do nothing, everything is fine\n          break;\n      } //multiline\n\n\n      var maxWidth = options.maxWidth || 0;\n\n      if (maxWidth > 0) {\n        if (typeof text === 'string') {\n          text = scope.splitTextToSize(text, maxWidth);\n        } else if (Object.prototype.toString.call(text) === '[object Array]') {\n          text = scope.splitTextToSize(text.join(\" \"), maxWidth);\n        }\n      } //creating Payload-Object to make text byRef\n\n\n      var payload = {\n        text: text,\n        x: x,\n        y: y,\n        options: options,\n        mutex: {\n          pdfEscape: pdfEscape,\n          activeFontKey: activeFontKey,\n          fonts: fonts,\n          activeFontSize: activeFontSize\n        }\n      };\n      events.publish('preProcessText', payload);\n      text = payload.text;\n      options = payload.options; //angle\n\n      var angle = options.angle;\n      var k = scope.internal.scaleFactor;\n      var transformationMatrix = [];\n\n      if (angle) {\n        angle *= Math.PI / 180;\n        var c = Math.cos(angle),\n            s = Math.sin(angle);\n        transformationMatrix = [f2(c), f2(s), f2(s * -1), f2(c)];\n      } //charSpace\n\n\n      var charSpace = options.charSpace;\n\n      if (typeof charSpace !== 'undefined') {\n        xtra += f3(charSpace * k) + \" Tc\\n\";\n      } //lang\n\n\n      var lang = options.lang;\n      var tmpRenderingMode = -1;\n      var parmRenderingMode = typeof options.renderingMode !== \"undefined\" ? options.renderingMode : options.stroke;\n      var pageContext = scope.internal.getCurrentPageInfo().pageContext;\n\n      switch (parmRenderingMode) {\n        case 0:\n        case false:\n        case 'fill':\n          tmpRenderingMode = 0;\n          break;\n\n        case 1:\n        case true:\n        case 'stroke':\n          tmpRenderingMode = 1;\n          break;\n\n        case 2:\n        case 'fillThenStroke':\n          tmpRenderingMode = 2;\n          break;\n\n        case 3:\n        case 'invisible':\n          tmpRenderingMode = 3;\n          break;\n\n        case 4:\n        case 'fillAndAddForClipping':\n          tmpRenderingMode = 4;\n          break;\n\n        case 5:\n        case 'strokeAndAddPathForClipping':\n          tmpRenderingMode = 5;\n          break;\n\n        case 6:\n        case 'fillThenStrokeAndAddToPathForClipping':\n          tmpRenderingMode = 6;\n          break;\n\n        case 7:\n        case 'addToPathForClipping':\n          tmpRenderingMode = 7;\n          break;\n      }\n\n      var usedRenderingMode = typeof pageContext.usedRenderingMode !== 'undefined' ? pageContext.usedRenderingMode : -1; //if the coder wrote it explicitly to use a specific \n      //renderingMode, then use it\n\n      if (tmpRenderingMode !== -1) {\n        xtra += tmpRenderingMode + \" Tr\\n\"; //otherwise check if we used the rendering Mode already\n        //if so then set the rendering Mode...\n      } else if (usedRenderingMode !== -1) {\n        xtra += \"0 Tr\\n\";\n      }\n\n      if (tmpRenderingMode !== -1) {\n        pageContext.usedRenderingMode = tmpRenderingMode;\n      } //align\n\n\n      var align = options.align || 'left';\n      var leading = activeFontSize * lineHeight;\n      var pageWidth = scope.internal.pageSize.getWidth();\n      var k = scope.internal.scaleFactor;\n      var activeFont = fonts[activeFontKey];\n      var charSpace = options.charSpace || activeCharSpace;\n      var maxWidth = options.maxWidth || 0;\n      var lineWidths;\n      var flags = {};\n      var wordSpacingPerLine = [];\n\n      if (Object.prototype.toString.call(text) === '[object Array]') {\n        var da = transformTextToSpecialArray(text);\n        var newY;\n        var maxLineLength;\n        var lineWidths;\n\n        if (align !== \"left\") {\n          lineWidths = da.map(function (v) {\n            return scope.getStringUnitWidth(v, {\n              font: activeFont,\n              charSpace: charSpace,\n              fontSize: activeFontSize\n            }) * activeFontSize / k;\n          });\n        }\n\n        var maxLineLength = Math.max.apply(Math, lineWidths); //The first line uses the \"main\" Td setting,\n        //and the subsequent lines are offset by the\n        //previous line's x coordinate.\n\n        var prevWidth = 0;\n        var delta;\n        var newX;\n\n        if (align === \"right\") {\n          x -= lineWidths[0];\n          text = [];\n\n          for (var i = 0, len = da.length; i < len; i++) {\n            delta = maxLineLength - lineWidths[i];\n\n            if (i === 0) {\n              newX = getHorizontalCoordinate(x);\n              newY = getVerticalCoordinate(y);\n            } else {\n              newX = (prevWidth - lineWidths[i]) * k;\n              newY = -leading;\n            }\n\n            text.push([da[i], newX, newY]);\n            prevWidth = lineWidths[i];\n          }\n        } else if (align === \"center\") {\n          x -= lineWidths[0] / 2;\n          text = [];\n\n          for (var i = 0, len = da.length; i < len; i++) {\n            delta = (maxLineLength - lineWidths[i]) / 2;\n\n            if (i === 0) {\n              newX = getHorizontalCoordinate(x);\n              newY = getVerticalCoordinate(y);\n            } else {\n              newX = (prevWidth - lineWidths[i]) / 2 * k;\n              newY = -leading;\n            }\n\n            text.push([da[i], newX, newY]);\n            prevWidth = lineWidths[i];\n          }\n        } else if (align === \"left\") {\n          text = [];\n\n          for (var i = 0, len = da.length; i < len; i++) {\n            newY = i === 0 ? getVerticalCoordinate(y) : -leading;\n            newX = i === 0 ? getHorizontalCoordinate(x) : 0; //text.push([da[i], newX, newY]);\n\n            text.push(da[i]);\n          }\n        } else if (align === \"justify\") {\n          text = [];\n          var maxWidth = maxWidth !== 0 ? maxWidth : pageWidth;\n\n          for (var i = 0, len = da.length; i < len; i++) {\n            newY = i === 0 ? getVerticalCoordinate(y) : -leading;\n            newX = i === 0 ? getHorizontalCoordinate(x) : 0;\n\n            if (i < len - 1) {\n              wordSpacingPerLine.push(((maxWidth - lineWidths[i]) / (da[i].split(\" \").length - 1) * k).toFixed(2));\n            }\n\n            text.push([da[i], newX, newY]);\n          }\n        } else {\n          throw new Error('Unrecognized alignment option, use \"left\", \"center\", \"right\" or \"justify\".');\n        }\n      } //R2L\n\n\n      var doReversing = typeof options.R2L === \"boolean\" ? options.R2L : R2L;\n\n      if (doReversing === true) {\n        text = processTextByFunction(text, function (text, posX, posY) {\n          return [text.split(\"\").reverse().join(\"\"), posX, posY];\n        });\n      } //creating Payload-Object to make text byRef\n\n\n      var payload = {\n        text: text,\n        x: x,\n        y: y,\n        options: options,\n        mutex: {\n          pdfEscape: pdfEscape,\n          activeFontKey: activeFontKey,\n          fonts: fonts,\n          activeFontSize: activeFontSize\n        }\n      };\n      events.publish('postProcessText', payload);\n      text = payload.text;\n      isHex = payload.mutex.isHex;\n      var da = transformTextToSpecialArray(text);\n      text = [];\n      var variant = 0;\n      var len = da.length;\n      var posX;\n      var posY;\n      var content;\n      var wordSpacing = '';\n\n      for (var i = 0; i < len; i++) {\n        wordSpacing = '';\n\n        if (!Array.isArray(da[i])) {\n          posX = getHorizontalCoordinate(x);\n          posY = getVerticalCoordinate(y);\n          content = (isHex ? \"<\" : \"(\") + da[i] + (isHex ? \">\" : \")\");\n        } else {\n          posX = parseFloat(da[i][1]);\n          posY = parseFloat(da[i][2]);\n          content = (isHex ? \"<\" : \"(\") + da[i][0] + (isHex ? \">\" : \")\");\n          variant = 1;\n        }\n\n        if (wordSpacingPerLine !== undefined && wordSpacingPerLine[i] !== undefined) {\n          wordSpacing = wordSpacingPerLine[i] + \" Tw\\n\";\n        }\n\n        if (transformationMatrix.length !== 0 && i === 0) {\n          text.push(wordSpacing + transformationMatrix.join(\" \") + \" \" + posX.toFixed(2) + \" \" + posY.toFixed(2) + \" Tm\\n\" + content);\n        } else if (variant === 1 || variant === 0 && i === 0) {\n          text.push(wordSpacing + posX.toFixed(2) + \" \" + posY.toFixed(2) + \" Td\\n\" + content);\n        } else {\n          text.push(wordSpacing + content);\n        }\n      }\n\n      if (variant === 0) {\n        text = text.join(\" Tj\\nT* \");\n      } else {\n        text = text.join(\" Tj\\n\");\n      }\n\n      text += \" Tj\\n\";\n      var result = 'BT\\n/' + activeFontKey + ' ' + activeFontSize + ' Tf\\n' + // font face, style, size\n      (activeFontSize * lineHeight).toFixed(2) + ' TL\\n' + // line spacing\n      textColor + '\\n';\n      result += xtra;\n      result += text;\n      result += \"ET\";\n      out(result);\n      usedFonts[activeFontKey] = true;\n      return scope;\n    };\n    /**\n     * Letter spacing method to print text with gaps\n     *\n     * @function\n     * @instance\n     * @param {String|Array} text String to be added to the page.\n     * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page\n     * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page\n     * @param {number} spacing Spacing (in units declared at inception)\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name lstext\n     * @deprecated We'll be removing this function. It doesn't take character width into account.\n     */\n\n\n    var lstext = API.__private__.lstext = API.lstext = function (text, x, y, charSpace) {\n      console.warn('jsPDF.lstext is deprecated');\n      return this.text(text, x, y, {\n        charSpace: charSpace\n      });\n    };\n    /**\n     * \n     * @name clip\n     * @function\n     * @instance\n     * @param {string} rule \n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @description All .clip() after calling drawing ops with a style argument of null.\n     */\n\n\n    var clip = API.__private__.clip = API.clip = function (rule) {\n      // Call .clip() after calling drawing ops with a style argument of null\n      // W is the PDF clipping op\n      if ('evenodd' === rule) {\n        out('W*');\n      } else {\n        out('W');\n      } // End the path object without filling or stroking it.\n      // This operator is a path-painting no-op, used primarily for the side effect of changing the current clipping path\n      // (see Section 4.4.3, “Clipping Path Operators”)\n\n\n      out('n');\n    };\n    /**\n     * This fixes the previous function clip(). Perhaps the 'stroke path' hack was due to the missing 'n' instruction?\n     * We introduce the fixed version so as to not break API.\n     * @param fillRule\n     * @ignore\n     */\n\n\n    var clip_fixed = API.__private__.clip_fixed = API.clip_fixed = function (rule) {\n      console.log(\"clip_fixed is deprecated\");\n      API.clip(rule);\n    };\n\n    var isValidStyle = API.__private__.isValidStyle = function (style) {\n      var validStyleVariants = [undefined, null, 'S', 'F', 'DF', 'FD', 'f', 'f*', 'B', 'B*'];\n      var result = false;\n\n      if (validStyleVariants.indexOf(style) !== -1) {\n        result = true;\n      }\n\n      return result;\n    };\n\n    var getStyle = API.__private__.getStyle = function (style) {\n      // see path-painting operators in PDF spec\n      var op = 'S'; // stroke\n\n      if (style === 'F') {\n        op = 'f'; // fill\n      } else if (style === 'FD' || style === 'DF') {\n        op = 'B'; // both\n      } else if (style === 'f' || style === 'f*' || style === 'B' || style === 'B*') {\n        /*\n         Allow direct use of these PDF path-painting operators:\n         - f    fill using nonzero winding number rule\n         - f*    fill using even-odd rule\n         - B    fill then stroke with fill using non-zero winding number rule\n         - B*    fill then stroke with fill using even-odd rule\n         */\n        op = style;\n      }\n\n      return op;\n    };\n    /**\n     * Draw a line on the current page.\n     *\n     * @name line\n     * @function \n     * @instance\n     * @param {number} x1\n     * @param {number} y1\n     * @param {number} x2\n     * @param {number} y2\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     */\n\n\n    var line = API.__private__.line = API.line = function (x1, y1, x2, y2) {\n      if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2)) {\n        throw new Error('Invalid arguments passed to jsPDF.line');\n      }\n\n      return this.lines([[x2 - x1, y2 - y1]], x1, y1);\n    };\n    /**\n     * Adds series of curves (straight lines or cubic bezier curves) to canvas, starting at `x`, `y` coordinates.\n     * All data points in `lines` are relative to last line origin.\n     * `x`, `y` become x1,y1 for first line / curve in the set.\n     * For lines you only need to specify [x2, y2] - (ending point) vector against x1, y1 starting point.\n     * For bezier curves you need to specify [x2,y2,x3,y3,x4,y4] - vectors to control points 1, 2, ending point. All vectors are against the start of the curve - x1,y1.\n     *\n     * @example .lines([[2,2],[-2,2],[1,1,2,2,3,3],[2,1]], 212,110, [1,1], 'F', false) // line, line, bezier curve, line\n     * @param {Array} lines Array of *vector* shifts as pairs (lines) or sextets (cubic bezier curves).\n     * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page.\n     * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page.\n     * @param {number} scale (Defaults to [1.0,1.0]) x,y Scaling factor for all vectors. Elements can be any floating number Sub-one makes drawing smaller. Over-one grows the drawing. Negative flips the direction.\n     * @param {string} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.\n     * @param {boolean} closed If true, the path is closed with a straight line from the end of the last curve to the starting point.\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name lines\n     */\n\n\n    var lines = API.__private__.lines = API.lines = function (lines, x, y, scale, style, closed) {\n      var scalex, scaley, i, l, leg, x2, y2, x3, y3, x4, y4, tmp; // Pre-August-2012 the order of arguments was function(x, y, lines, scale, style)\n      // in effort to make all calls have similar signature like\n      //   function(content, coordinateX, coordinateY , miscellaneous)\n      // this method had its args flipped.\n      // code below allows backward compatibility with old arg order.\n\n      if (typeof lines === 'number') {\n        tmp = y;\n        y = x;\n        x = lines;\n        lines = tmp;\n      }\n\n      scale = scale || [1, 1];\n      closed = closed || false;\n\n      if (isNaN(x) || isNaN(y) || !Array.isArray(lines) || !Array.isArray(scale) || !isValidStyle(style) || typeof closed !== 'boolean') {\n        throw new Error('Invalid arguments passed to jsPDF.lines');\n      } // starting point\n\n\n      out(f3(getHorizontalCoordinate(x)) + ' ' + f3(getVerticalCoordinate(y)) + ' m ');\n      scalex = scale[0];\n      scaley = scale[1];\n      l = lines.length; //, x2, y2 // bezier only. In page default measurement \"units\", *after* scaling\n      //, x3, y3 // bezier only. In page default measurement \"units\", *after* scaling\n      // ending point for all, lines and bezier. . In page default measurement \"units\", *after* scaling\n\n      x4 = x; // last / ending point = starting point for first item.\n\n      y4 = y; // last / ending point = starting point for first item.\n\n      for (i = 0; i < l; i++) {\n        leg = lines[i];\n\n        if (leg.length === 2) {\n          // simple line\n          x4 = leg[0] * scalex + x4; // here last x4 was prior ending point\n\n          y4 = leg[1] * scaley + y4; // here last y4 was prior ending point\n\n          out(f3(getHorizontalCoordinate(x4)) + ' ' + f3(getVerticalCoordinate(y4)) + ' l');\n        } else {\n          // bezier curve\n          x2 = leg[0] * scalex + x4; // here last x4 is prior ending point\n\n          y2 = leg[1] * scaley + y4; // here last y4 is prior ending point\n\n          x3 = leg[2] * scalex + x4; // here last x4 is prior ending point\n\n          y3 = leg[3] * scaley + y4; // here last y4 is prior ending point\n\n          x4 = leg[4] * scalex + x4; // here last x4 was prior ending point\n\n          y4 = leg[5] * scaley + y4; // here last y4 was prior ending point\n\n          out(f3(getHorizontalCoordinate(x2)) + ' ' + f3(getVerticalCoordinate(y2)) + ' ' + f3(getHorizontalCoordinate(x3)) + ' ' + f3(getVerticalCoordinate(y3)) + ' ' + f3(getHorizontalCoordinate(x4)) + ' ' + f3(getVerticalCoordinate(y4)) + ' c');\n        }\n      }\n\n      if (closed) {\n        out(' h');\n      } // stroking / filling / both the path\n\n\n      if (style !== null) {\n        out(getStyle(style));\n      }\n\n      return this;\n    };\n    /**\n     * Adds a rectangle to PDF.\n     *\n     * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page.\n     * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page.\n     * @param {number} w Width (in units declared at inception of PDF document).\n     * @param {number} h Height (in units declared at inception of PDF document).\n     * @param {string} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name rect\n     */\n\n\n    var rect = API.__private__.rect = API.rect = function (x, y, w, h, style) {\n      if (isNaN(x) || isNaN(y) || isNaN(w) || isNaN(h) || !isValidStyle(style)) {\n        throw new Error('Invalid arguments passed to jsPDF.rect');\n      }\n\n      out([f2(getHorizontalCoordinate(x)), f2(getVerticalCoordinate(y)), f2(w * k), f2(-h * k), 're'].join(' '));\n\n      if (style !== null) {\n        out(getStyle(style));\n      }\n\n      return this;\n    };\n    /**\n     * Adds a triangle to PDF.\n     *\n     * @param {number} x1 Coordinate (in units declared at inception of PDF document) against left edge of the page.\n     * @param {number} y1 Coordinate (in units declared at inception of PDF document) against upper edge of the page.\n     * @param {number} x2 Coordinate (in units declared at inception of PDF document) against left edge of the page.\n     * @param {number} y2 Coordinate (in units declared at inception of PDF document) against upper edge of the page.\n     * @param {number} x3 Coordinate (in units declared at inception of PDF document) against left edge of the page.\n     * @param {number} y3 Coordinate (in units declared at inception of PDF document) against upper edge of the page.\n     * @param {string} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name triangle\n     */\n\n\n    var triangle = API.__private__.triangle = API.triangle = function (x1, y1, x2, y2, x3, y3, style) {\n      if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(x3) || isNaN(y3) || !isValidStyle(style)) {\n        throw new Error('Invalid arguments passed to jsPDF.triangle');\n      }\n\n      this.lines([[x2 - x1, y2 - y1], // vector to point 2\n      [x3 - x2, y3 - y2], // vector to point 3\n      [x1 - x3, y1 - y3] // closing vector back to point 1\n      ], x1, y1, // start of path\n      [1, 1], style, true);\n      return this;\n    };\n    /**\n     * Adds a rectangle with rounded corners to PDF.\n     *\n     * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page.\n     * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page.\n     * @param {number} w Width (in units declared at inception of PDF document).\n     * @param {number} h Height (in units declared at inception of PDF document).\n     * @param {number} rx Radius along x axis (in units declared at inception of PDF document).\n     * @param {number} ry Radius along y axis (in units declared at inception of PDF document).\n     * @param {string} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name roundedRect\n     */\n\n\n    var roundedRect = API.__private__.roundedRect = API.roundedRect = function (x, y, w, h, rx, ry, style) {\n      if (isNaN(x) || isNaN(y) || isNaN(w) || isNaN(h) || isNaN(rx) || isNaN(ry) || !isValidStyle(style)) {\n        throw new Error('Invalid arguments passed to jsPDF.roundedRect');\n      }\n\n      var MyArc = 4 / 3 * (Math.SQRT2 - 1);\n      this.lines([[w - 2 * rx, 0], [rx * MyArc, 0, rx, ry - ry * MyArc, rx, ry], [0, h - 2 * ry], [0, ry * MyArc, -(rx * MyArc), ry, -rx, ry], [-w + 2 * rx, 0], [-(rx * MyArc), 0, -rx, -(ry * MyArc), -rx, -ry], [0, -h + 2 * ry], [0, -(ry * MyArc), rx * MyArc, -ry, rx, -ry]], x + rx, y, // start of path\n      [1, 1], style);\n      return this;\n    };\n    /**\n     * Adds an ellipse to PDF.\n     *\n     * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page.\n     * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page.\n     * @param {number} rx Radius along x axis (in units declared at inception of PDF document).\n     * @param {number} ry Radius along y axis (in units declared at inception of PDF document).\n     * @param {string} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name ellipse\n     */\n\n\n    var ellise = API.__private__.ellipse = API.ellipse = function (x, y, rx, ry, style) {\n      if (isNaN(x) || isNaN(y) || isNaN(rx) || isNaN(ry) || !isValidStyle(style)) {\n        throw new Error('Invalid arguments passed to jsPDF.ellipse');\n      }\n\n      var lx = 4 / 3 * (Math.SQRT2 - 1) * rx,\n          ly = 4 / 3 * (Math.SQRT2 - 1) * ry;\n      out([f2(getHorizontalCoordinate(x + rx)), f2(getVerticalCoordinate(y)), 'm', f2(getHorizontalCoordinate(x + rx)), f2(getVerticalCoordinate(y - ly)), f2(getHorizontalCoordinate(x + lx)), f2(getVerticalCoordinate(y - ry)), f2(getHorizontalCoordinate(x)), f2(getVerticalCoordinate(y - ry)), 'c'].join(' '));\n      out([f2(getHorizontalCoordinate(x - lx)), f2(getVerticalCoordinate(y - ry)), f2(getHorizontalCoordinate(x - rx)), f2(getVerticalCoordinate(y - ly)), f2(getHorizontalCoordinate(x - rx)), f2(getVerticalCoordinate(y)), 'c'].join(' '));\n      out([f2(getHorizontalCoordinate(x - rx)), f2(getVerticalCoordinate(y + ly)), f2(getHorizontalCoordinate(x - lx)), f2(getVerticalCoordinate(y + ry)), f2(getHorizontalCoordinate(x)), f2(getVerticalCoordinate(y + ry)), 'c'].join(' '));\n      out([f2(getHorizontalCoordinate(x + lx)), f2(getVerticalCoordinate(y + ry)), f2(getHorizontalCoordinate(x + rx)), f2(getVerticalCoordinate(y + ly)), f2(getHorizontalCoordinate(x + rx)), f2(getVerticalCoordinate(y)), 'c'].join(' '));\n\n      if (style !== null) {\n        out(getStyle(style));\n      }\n\n      return this;\n    };\n    /**\n     * Adds an circle to PDF.\n     *\n     * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page.\n     * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page.\n     * @param {number} r Radius (in units declared at inception of PDF document).\n     * @param {string} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name circle\n     */\n\n\n    var circle = API.__private__.circle = API.circle = function (x, y, r, style) {\n      if (isNaN(x) || isNaN(y) || isNaN(r) || !isValidStyle(style)) {\n        throw new Error('Invalid arguments passed to jsPDF.circle');\n      }\n\n      return this.ellipse(x, y, r, r, style);\n    };\n    /**\n     * Sets text font face, variant for upcoming text elements.\n     * See output of jsPDF.getFontList() for possible font names, styles.\n     *\n     * @param {string} fontName Font name or family. Example: \"times\".\n     * @param {string} fontStyle Font style or variant. Example: \"italic\".\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name setFont\n     */\n\n\n    API.setFont = function (fontName, fontStyle) {\n      activeFontKey = _getFont(fontName, fontStyle, {\n        disableWarning: false\n      });\n      return this;\n    };\n    /**\n     * Switches font style or variant for upcoming text elements,\n     * while keeping the font face or family same.\n     * See output of jsPDF.getFontList() for possible font names, styles.\n     *\n     * @param {string} style Font style or variant. Example: \"italic\".\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name setFontStyle\n     */\n\n\n    API.setFontStyle = API.setFontType = function (style) {\n      activeFontKey = _getFont(undefined, style); // if font is not found, the above line blows up and we never go further\n\n      return this;\n    };\n    /**\n     * Returns an object - a tree of fontName to fontStyle relationships available to\n     * active PDF document.\n     *\n     * @public\n     * @function\n     * @instance\n     * @returns {Object} Like {'times':['normal', 'italic', ... ], 'arial':['normal', 'bold', ... ], ... }\n     * @memberOf jsPDF\n     * @name getFontList\n     */\n\n\n    var getFontList = API.__private__.getFontList = API.getFontList = function () {\n      // TODO: iterate over fonts array or return copy of fontmap instead in case more are ever added.\n      var list = {},\n          fontName,\n          fontStyle,\n          tmp;\n\n      for (fontName in fontmap) {\n        if (fontmap.hasOwnProperty(fontName)) {\n          list[fontName] = tmp = [];\n\n          for (fontStyle in fontmap[fontName]) {\n            if (fontmap[fontName].hasOwnProperty(fontStyle)) {\n              tmp.push(fontStyle);\n            }\n          }\n        }\n      }\n\n      return list;\n    };\n    /**\n     * Add a custom font to the current instance.\n     *\n     * @property {string} postScriptName PDF specification full name for the font.\n     * @property {string} id PDF-document-instance-specific label assinged to the font.\n     * @property {string} fontStyle Style of the Font.\n     * @property {Object} encoding Encoding_name-to-Font_metrics_object mapping.\n     * @function\n     * @instance\n     * @memberOf jsPDF\n     * @name addFont\n     */\n\n\n    API.addFont = function (postScriptName, fontName, fontStyle, encoding) {\n      encoding = encoding || 'Identity-H';\n      addFont.call(this, postScriptName, fontName, fontStyle, encoding);\n    };\n\n    var lineWidth = options.lineWidth || 0.200025; // 2mm\n\n    /**\n     * Sets line width for upcoming lines.\n     *\n     * @param {number} width Line width (in units declared at inception of PDF document).\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name setLineWidth\n     */\n\n    var setLineWidth = API.__private__.setLineWidth = API.setLineWidth = function (width) {\n      out((width * k).toFixed(2) + ' w');\n      return this;\n    };\n    /**\n     * Sets the dash pattern for upcoming lines.\n     * \n     * To reset the settings simply call the method without any parameters.\n     * @param {array} dashArray The pattern of the line, expects numbers. \n     * @param {number} dashPhase The phase at which the dash pattern starts.\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name setLineDash\n     */\n\n\n    var setLineDash = API.__private__.setLineDash = jsPDF.API.setLineDash = function (dashArray, dashPhase) {\n      dashArray = dashArray || [];\n      dashPhase = dashPhase || 0;\n\n      if (isNaN(dashPhase) || !Array.isArray(dashArray)) {\n        throw new Error('Invalid arguments passed to jsPDF.setLineDash');\n      }\n\n      dashArray = dashArray.map(function (x) {\n        return (x * k).toFixed(3);\n      }).join(' ');\n      dashPhase = parseFloat((dashPhase * k).toFixed(3));\n      out('[' + dashArray + '] ' + dashPhase + ' d');\n      return this;\n    };\n\n    var lineHeightFactor;\n\n    var getLineHeight = API.__private__.getLineHeight = API.getLineHeight = function () {\n      return activeFontSize * lineHeightFactor;\n    };\n\n    var lineHeightFactor;\n\n    var getLineHeight = API.__private__.getLineHeight = API.getLineHeight = function () {\n      return activeFontSize * lineHeightFactor;\n    };\n    /**\n     * Sets the LineHeightFactor of proportion.\n     *\n     * @param {number} value LineHeightFactor value. Default: 1.15.\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name setLineHeightFactor\n     */\n\n\n    var setLineHeightFactor = API.__private__.setLineHeightFactor = API.setLineHeightFactor = function (value) {\n      value = value || 1.15;\n\n      if (typeof value === \"number\") {\n        lineHeightFactor = value;\n      }\n\n      return this;\n    };\n    /**\n     * Gets the LineHeightFactor, default: 1.15.\n     *\n     * @function\n     * @instance\n     * @returns {number} lineHeightFactor\n     * @memberOf jsPDF\n     * @name getLineHeightFactor\n     */\n\n\n    var getLineHeightFactor = API.__private__.getLineHeightFactor = API.getLineHeightFactor = function () {\n      return lineHeightFactor;\n    };\n\n    setLineHeightFactor(options.lineHeight);\n\n    var getHorizontalCoordinate = API.__private__.getHorizontalCoordinate = function (value) {\n      return value * k;\n    };\n\n    var getVerticalCoordinate = API.__private__.getVerticalCoordinate = function (value) {\n      return pagesContext[currentPage].mediaBox.topRightY - pagesContext[currentPage].mediaBox.bottomLeftY - value * k;\n    };\n\n    var getHorizontalCoordinateString = API.__private__.getHorizontalCoordinateString = function (value) {\n      return f2(value * k);\n    };\n\n    var getVerticalCoordinateString = API.__private__.getVerticalCoordinateString = function (value) {\n      return f2(pagesContext[currentPage].mediaBox.topRightY - pagesContext[currentPage].mediaBox.bottomLeftY - value * k);\n    };\n\n    var strokeColor = options.strokeColor || '0 G';\n    /**\n     *  Gets the stroke color for upcoming elements.\n     *\n     * @function\n     * @instance\n     * @returns {string} colorAsHex\n     * @memberOf jsPDF\n     * @name getDrawColor\n     */\n\n    var getStrokeColor = API.__private__.getStrokeColor = API.getDrawColor = function () {\n      return decodeColorString(strokeColor);\n    };\n    /**\n     * Sets the stroke color for upcoming elements.\n     *\n     * Depending on the number of arguments given, Gray, RGB, or CMYK\n     * color space is implied.\n     *\n     * When only ch1 is given, \"Gray\" color space is implied and it\n     * must be a value in the range from 0.00 (solid black) to to 1.00 (white)\n     * if values are communicated as String types, or in range from 0 (black)\n     * to 255 (white) if communicated as Number type.\n     * The RGB-like 0-255 range is provided for backward compatibility.\n     *\n     * When only ch1,ch2,ch3 are given, \"RGB\" color space is implied and each\n     * value must be in the range from 0.00 (minimum intensity) to to 1.00\n     * (max intensity) if values are communicated as String types, or\n     * from 0 (min intensity) to to 255 (max intensity) if values are communicated\n     * as Number types.\n     * The RGB-like 0-255 range is provided for backward compatibility.\n     *\n     * When ch1,ch2,ch3,ch4 are given, \"CMYK\" color space is implied and each\n     * value must be a in the range from 0.00 (0% concentration) to to\n     * 1.00 (100% concentration)\n     *\n     * Because JavaScript treats fixed point numbers badly (rounds to\n     * floating point nearest to binary representation) it is highly advised to\n     * communicate the fractional numbers as String types, not JavaScript Number type.\n     *\n     * @param {Number|String} ch1 Color channel value or {string} ch1 color value in hexadecimal, example: '#FFFFFF'.\n     * @param {Number|String} ch2 Color channel value.\n     * @param {Number|String} ch3 Color channel value.\n     * @param {Number|String} ch4 Color channel value.\n     *\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name setDrawColor\n     */\n\n\n    var setStrokeColor = API.__private__.setStrokeColor = API.setDrawColor = function (ch1, ch2, ch3, ch4) {\n      var options = {\n        \"ch1\": ch1,\n        \"ch2\": ch2,\n        \"ch3\": ch3,\n        \"ch4\": ch4,\n        \"pdfColorType\": \"draw\",\n        \"precision\": 2\n      };\n      strokeColor = encodeColorString(options);\n      out(strokeColor);\n      return this;\n    };\n\n    var fillColor = options.fillColor || '0 g';\n    /**\n     * Gets the fill color for upcoming elements.\n     *\n     * @function\n     * @instance\n     * @returns {string} colorAsHex\n     * @memberOf jsPDF\n     * @name getFillColor\n     */\n\n    var getFillColor = API.__private__.getFillColor = API.getFillColor = function () {\n      return decodeColorString(fillColor);\n    };\n    /**\n     * Sets the fill color for upcoming elements.\n     *\n     * Depending on the number of arguments given, Gray, RGB, or CMYK\n     * color space is implied.\n     *\n     * When only ch1 is given, \"Gray\" color space is implied and it\n     * must be a value in the range from 0.00 (solid black) to to 1.00 (white)\n     * if values are communicated as String types, or in range from 0 (black)\n     * to 255 (white) if communicated as Number type.\n     * The RGB-like 0-255 range is provided for backward compatibility.\n     *\n     * When only ch1,ch2,ch3 are given, \"RGB\" color space is implied and each\n     * value must be in the range from 0.00 (minimum intensity) to to 1.00\n     * (max intensity) if values are communicated as String types, or\n     * from 0 (min intensity) to to 255 (max intensity) if values are communicated\n     * as Number types.\n     * The RGB-like 0-255 range is provided for backward compatibility.\n     *\n     * When ch1,ch2,ch3,ch4 are given, \"CMYK\" color space is implied and each\n     * value must be a in the range from 0.00 (0% concentration) to to\n     * 1.00 (100% concentration)\n     *\n     * Because JavaScript treats fixed point numbers badly (rounds to\n     * floating point nearest to binary representation) it is highly advised to\n     * communicate the fractional numbers as String types, not JavaScript Number type.\n     *\n     * @param {Number|String} ch1 Color channel value or {string} ch1 color value in hexadecimal, example: '#FFFFFF'.\n     * @param {Number|String} ch2 Color channel value.\n     * @param {Number|String} ch3 Color channel value.\n     * @param {Number|String} ch4 Color channel value.\n     *\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name setFillColor\n     */\n\n\n    var setFillColor = API.__private__.setFillColor = API.setFillColor = function (ch1, ch2, ch3, ch4) {\n      var options = {\n        \"ch1\": ch1,\n        \"ch2\": ch2,\n        \"ch3\": ch3,\n        \"ch4\": ch4,\n        \"pdfColorType\": \"fill\",\n        \"precision\": 2\n      };\n      fillColor = encodeColorString(options);\n      out(fillColor);\n      return this;\n    };\n\n    var textColor = options.textColor || '0 g';\n    /**\n     * Gets the text color for upcoming elements.\n     *\n     * @function\n     * @instance\n     * @returns {string} colorAsHex\n     * @memberOf jsPDF\n     * @name getTextColor\n     */\n\n    var getTextColor = API.__private__.getTextColor = API.getTextColor = function () {\n      return decodeColorString(textColor);\n    };\n    /**\n     * Sets the text color for upcoming elements.\n     *\n     * Depending on the number of arguments given, Gray, RGB, or CMYK\n     * color space is implied.\n     *\n     * When only ch1 is given, \"Gray\" color space is implied and it\n     * must be a value in the range from 0.00 (solid black) to to 1.00 (white)\n     * if values are communicated as String types, or in range from 0 (black)\n     * to 255 (white) if communicated as Number type.\n     * The RGB-like 0-255 range is provided for backward compatibility.\n     *\n     * When only ch1,ch2,ch3 are given, \"RGB\" color space is implied and each\n     * value must be in the range from 0.00 (minimum intensity) to to 1.00\n     * (max intensity) if values are communicated as String types, or\n     * from 0 (min intensity) to to 255 (max intensity) if values are communicated\n     * as Number types.\n     * The RGB-like 0-255 range is provided for backward compatibility.\n     *\n     * When ch1,ch2,ch3,ch4 are given, \"CMYK\" color space is implied and each\n     * value must be a in the range from 0.00 (0% concentration) to to\n     * 1.00 (100% concentration)\n     *\n     * Because JavaScript treats fixed point numbers badly (rounds to\n     * floating point nearest to binary representation) it is highly advised to\n     * communicate the fractional numbers as String types, not JavaScript Number type.\n     *\n     * @param {Number|String} ch1 Color channel value or {string} ch1 color value in hexadecimal, example: '#FFFFFF'.\n     * @param {Number|String} ch2 Color channel value.\n     * @param {Number|String} ch3 Color channel value.\n     * @param {Number|String} ch4 Color channel value.\n     *\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name setTextColor\n     */\n\n\n    var setTextColor = API.__private__.setTextColor = API.setTextColor = function (ch1, ch2, ch3, ch4) {\n      var options = {\n        \"ch1\": ch1,\n        \"ch2\": ch2,\n        \"ch3\": ch3,\n        \"ch4\": ch4,\n        \"pdfColorType\": \"text\",\n        \"precision\": 3\n      };\n      textColor = encodeColorString(options);\n      return this;\n    };\n\n    var activeCharSpace = options.charSpace || 0;\n    /**\n     * Get global value of CharSpace.\n     *\n     * @function\n     * @instance\n     * @returns {number} charSpace\n     * @memberOf jsPDF\n     * @name getCharSpace\n     */\n\n    var getCharSpace = API.__private__.getCharSpace = API.getCharSpace = function () {\n      return activeCharSpace;\n    };\n    /**\n     * Set global value of CharSpace.\n     *\n     * @param {number} charSpace\n     * @function\n     * @instance\n     * @returns {jsPDF} jsPDF-instance\n     * @memberOf jsPDF\n     * @name setCharSpace\n     */\n\n\n    var setCharSpace = API.__private__.setCharSpace = API.setCharSpace = function (charSpace) {\n      if (isNaN(charSpace)) {\n        throw new Error('Invalid argument passed to jsPDF.setCharSpace');\n      }\n\n      activeCharSpace = charSpace;\n      return this;\n    };\n\n    var lineCapID = 0;\n    /**\n     * Is an Object providing a mapping from human-readable to\n     * integer flag values designating the varieties of line cap\n     * and join styles.\n     *\n     * @memberOf jsPDF\n     * @name CapJoinStyles\n     */\n\n    API.CapJoinStyles = {\n      0: 0,\n      'butt': 0,\n      'but': 0,\n      'miter': 0,\n      1: 1,\n      'round': 1,\n      'rounded': 1,\n      'circle': 1,\n      2: 2,\n      'projecting': 2,\n      'project': 2,\n      'square': 2,\n      'bevel': 2\n    };\n    /**\n     * Sets the line cap styles.\n     * See {jsPDF.CapJoinStyles} for variants.\n     *\n     * @param {String|Number} style A string or number identifying the type of line cap.\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name setLineCap\n     */\n\n    var setLineCap = API.__private__.setLineCap = API.setLineCap = function (style) {\n      var id = API.CapJoinStyles[style];\n\n      if (id === undefined) {\n        throw new Error(\"Line cap style of '\" + style + \"' is not recognized. See or extend .CapJoinStyles property for valid styles\");\n      }\n\n      lineCapID = id;\n      out(id + ' J');\n      return this;\n    };\n\n    var lineJoinID = 0;\n    /**\n     * Sets the line join styles.\n     * See {jsPDF.CapJoinStyles} for variants.\n     *\n     * @param {String|Number} style A string or number identifying the type of line join.\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name setLineJoin\n     */\n\n    var setLineJoin = API.__private__.setLineJoin = API.setLineJoin = function (style) {\n      var id = API.CapJoinStyles[style];\n\n      if (id === undefined) {\n        throw new Error(\"Line join style of '\" + style + \"' is not recognized. See or extend .CapJoinStyles property for valid styles\");\n      }\n\n      lineJoinID = id;\n      out(id + ' j');\n      return this;\n    };\n\n    var miterLimit;\n    /**\n     * Sets the miterLimit property, which effects the maximum miter length.\n     *\n     * @param {number} length The length of the miter\n     * @function\n     * @instance\n     * @returns {jsPDF}\n     * @memberOf jsPDF\n     * @name setMiterLimit\n     */\n\n    var setMiterLimit = API.__private__.setMiterLimit = API.setMiterLimit = function (length) {\n      length = length || 0;\n\n      if (isNaN(length)) {\n        throw new Error('Invalid argument passed to jsPDF.setMiterLimit');\n      }\n\n      miterLimit = parseFloat(f2(length * k));\n      out(miterLimit + ' M');\n      return this;\n    };\n    /**\n     * Saves as PDF document. An alias of jsPDF.output('save', 'filename.pdf').\n     * Uses FileSaver.js-method saveAs.\n     *\n     * @memberOf jsPDF\n     * @name save\n     * @function\n     * @instance\n     * @param  {string} filename The filename including extension.\n     * @param  {Object} options An Object with additional options, possible options: 'returnPromise'.\n     * @returns {jsPDF} jsPDF-instance\n     */\n\n\n    API.save = function (filename, options) {\n      filename = filename || 'generated.pdf';\n      options = options || {};\n      options.returnPromise = options.returnPromise || false;\n\n      if (options.returnPromise === false) {\n        saveAs(getBlob(buildDocument()), filename);\n\n        if (typeof saveAs.unload === 'function') {\n          if (global.setTimeout) {\n            setTimeout(saveAs.unload, 911);\n          }\n        }\n      } else {\n        return new Promise(function (resolve, reject) {\n          try {\n            var result = saveAs(getBlob(buildDocument()), filename);\n\n            if (typeof saveAs.unload === 'function') {\n              if (global.setTimeout) {\n                setTimeout(saveAs.unload, 911);\n              }\n            }\n\n            resolve(result);\n          } catch (e) {\n            reject(e.message);\n          }\n        });\n      }\n    }; // applying plugins (more methods) ON TOP of built-in API.\n    // this is intentional as we allow plugins to override\n    // built-ins\n\n\n    for (var plugin in jsPDF.API) {\n      if (jsPDF.API.hasOwnProperty(plugin)) {\n        if (plugin === 'events' && jsPDF.API.events.length) {\n          (function (events, newEvents) {\n            // jsPDF.API.events is a JS Array of Arrays\n            // where each Array is a pair of event name, handler\n            // Events were added by plugins to the jsPDF instantiator.\n            // These are always added to the new instance and some ran\n            // during instantiation.\n            var eventname, handler_and_args, i;\n\n            for (i = newEvents.length - 1; i !== -1; i--) {\n              // subscribe takes 3 args: 'topic', function, runonce_flag\n              // if undefined, runonce is false.\n              // users can attach callback directly,\n              // or they can attach an array with [callback, runonce_flag]\n              // that's what the \"apply\" magic is for below.\n              eventname = newEvents[i][0];\n              handler_and_args = newEvents[i][1];\n              events.subscribe.apply(events, [eventname].concat(typeof handler_and_args === 'function' ? [handler_and_args] : handler_and_args));\n            }\n          })(events, jsPDF.API.events);\n        } else {\n          API[plugin] = jsPDF.API[plugin];\n        }\n      }\n    }\n    /**\n     * Object exposing internal API to plugins\n     * @public\n     * @ignore\n     */\n\n\n    API.internal = {\n      'pdfEscape': pdfEscape,\n      'getStyle': getStyle,\n      'getFont': function getFont() {\n        return fonts[_getFont.apply(API, arguments)];\n      },\n      'getFontSize': getFontSize,\n      'getCharSpace': getCharSpace,\n      'getTextColor': getTextColor,\n      'getLineHeight': getLineHeight,\n      'getLineHeightFactor': getLineHeightFactor,\n      'write': write,\n      'getHorizontalCoordinate': getHorizontalCoordinate,\n      'getVerticalCoordinate': getVerticalCoordinate,\n      'getCoordinateString': getHorizontalCoordinateString,\n      'getVerticalCoordinateString': getVerticalCoordinateString,\n      'collections': {},\n      'newObject': newObject,\n      'newAdditionalObject': newAdditionalObject,\n      'newObjectDeferred': newObjectDeferred,\n      'newObjectDeferredBegin': newObjectDeferredBegin,\n      'getFilters': getFilters,\n      'putStream': putStream,\n      'events': events,\n      // ratio that you use in multiplication of a given \"size\" number to arrive to 'point'\n      // units of measurement.\n      // scaleFactor is set at initialization of the document and calculated against the stated\n      // default measurement units for the document.\n      // If default is \"mm\", k is the number that will turn number in 'mm' into 'points' number.\n      // through multiplication.\n      'scaleFactor': k,\n      'pageSize': {\n        getWidth: function getWidth() {\n          return (pagesContext[currentPage].mediaBox.topRightX - pagesContext[currentPage].mediaBox.bottomLeftX) / k;\n        },\n        setWidth: function setWidth(value) {\n          pagesContext[currentPage].mediaBox.topRightX = value * k + pagesContext[currentPage].mediaBox.bottomLeftX;\n        },\n        getHeight: function getHeight() {\n          return (pagesContext[currentPage].mediaBox.topRightY - pagesContext[currentPage].mediaBox.bottomLeftY) / k;\n        },\n        setHeight: function setHeight(value) {\n          pagesContext[currentPage].mediaBox.topRightY = value * k + pagesContext[currentPage].mediaBox.bottomLeftY;\n        }\n      },\n      'output': output,\n      'getNumberOfPages': getNumberOfPages,\n      'pages': pages,\n      'out': out,\n      'f2': f2,\n      'f3': f3,\n      'getPageInfo': getPageInfo,\n      'getPageInfoByObjId': getPageInfoByObjId,\n      'getCurrentPageInfo': getCurrentPageInfo,\n      'getPDFVersion': getPdfVersion,\n      'hasHotfix': hasHotfix //Expose the hasHotfix check so plugins can also check them.\n\n    };\n    Object.defineProperty(API.internal.pageSize, 'width', {\n      get: function get() {\n        return (pagesContext[currentPage].mediaBox.topRightX - pagesContext[currentPage].mediaBox.bottomLeftX) / k;\n      },\n      set: function set(value) {\n        pagesContext[currentPage].mediaBox.topRightX = value * k + pagesContext[currentPage].mediaBox.bottomLeftX;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    Object.defineProperty(API.internal.pageSize, 'height', {\n      get: function get() {\n        return (pagesContext[currentPage].mediaBox.topRightY - pagesContext[currentPage].mediaBox.bottomLeftY) / k;\n      },\n      set: function set(value) {\n        pagesContext[currentPage].mediaBox.topRightY = value * k + pagesContext[currentPage].mediaBox.bottomLeftY;\n      },\n      enumerable: true,\n      configurable: true\n    }); //////////////////////////////////////////////////////\n    // continuing initialization of jsPDF Document object\n    //////////////////////////////////////////////////////\n    // Add the first page automatically\n\n    addFonts(standardFonts);\n    activeFontKey = 'F1';\n\n    _addPage(format, orientation);\n\n    events.publish('initialized');\n    return API;\n  }\n  /**\n   * jsPDF.API is a STATIC property of jsPDF class.\n   * jsPDF.API is an object you can add methods and properties to.\n   * The methods / properties you add will show up in new jsPDF objects.\n   *\n   * One property is prepopulated. It is the 'events' Object. Plugin authors can add topics,\n   * callbacks to this object. These will be reassigned to all new instances of jsPDF.\n   *\n   * @static\n   * @public\n   * @memberOf jsPDF\n   * @name API\n   *\n   * @example\n   * jsPDF.API.mymethod = function(){\n   *   // 'this' will be ref to internal API object. see jsPDF source\n   *   // , so you can refer to built-in methods like so:\n   *   //     this.line(....)\n   *   //     this.text(....)\n   * }\n   * var pdfdoc = new jsPDF()\n   * pdfdoc.mymethod() // <- !!!!!!\n   */\n\n\n  jsPDF.API = {\n    events: []\n  };\n  /**\n   * The version of jsPDF.\n   * @name version\n   * @type {string}\n   * @memberOf jsPDF\n   */\n\n  jsPDF.version = '1.5.3';\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return jsPDF;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n\n  return jsPDF;\n}(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || Function('return typeof this === \"object\" && this.content')() || Function('return this')()); // `self` is undefined in Firefox for Android content script context\n// while `this` is nsIContentFrameMessageManager\n// with an attribute `content` that corresponds to the window\n\n/*rollup-keeper-start*/\n\n\nwindow.tmp = jsPDF;\n/*rollup-keeper-end*/\n\n/**\n * @license\n * Copyright (c) 2016 Alexander Weidt,\n * https://github.com/BiggA94\n * \n * Licensed under the MIT License. http://opensource.org/licenses/mit-license\n */\n\n/** \n* jsPDF AcroForm Plugin\n* @module AcroForm\n*/\n(function (jsPDFAPI, globalObj) {\n\n  var scope;\n  var scaleFactor = 1;\n\n  var pdfEscape = function pdfEscape(value) {\n    return value.replace(/\\\\/g, '\\\\\\\\').replace(/\\(/g, '\\\\(').replace(/\\)/g, '\\\\)');\n  };\n\n  var pdfUnescape = function pdfUnescape(value) {\n    return value.replace(/\\\\\\\\/g, '\\\\').replace(/\\\\\\(/g, '(').replace(/\\\\\\)/g, ')');\n  };\n\n  var f2 = function f2(number) {\n    if (isNaN(number)) {\n      throw new Error('Invalid argument passed to jsPDF.f2');\n    }\n\n    return number.toFixed(2); // Ie, %.2f\n  };\n\n  var f5 = function f5(number) {\n    if (isNaN(number)) {\n      throw new Error('Invalid argument passed to jsPDF.f2');\n    }\n\n    return number.toFixed(5); // Ie, %.2f\n  };\n\n  jsPDFAPI.__acroform__ = {};\n\n  var inherit = function inherit(child, parent) {\n\n    child.prototype = Object.create(parent.prototype);\n    child.prototype.constructor = child;\n  };\n\n  var scale = function scale(x) {\n    return x * scaleFactor;\n  };\n\n  var antiScale = function antiScale(x) {\n    return x / scaleFactor;\n  };\n\n  var createFormXObject = function createFormXObject(formObject) {\n    var xobj = new AcroFormXObject();\n    var height = AcroFormAppearance.internal.getHeight(formObject) || 0;\n    var width = AcroFormAppearance.internal.getWidth(formObject) || 0;\n    xobj.BBox = [0, 0, Number(f2(width)), Number(f2(height))];\n    return xobj;\n  };\n  /**\n  * Bit-Operations\n  */\n\n\n  var setBit = jsPDFAPI.__acroform__.setBit = function (number, bitPosition) {\n    number = number || 0;\n    bitPosition = bitPosition || 0;\n\n    if (isNaN(number) || isNaN(bitPosition)) {\n      throw new Error('Invalid arguments passed to jsPDF.API.__acroform__.setBit');\n    }\n\n    var bitMask = 1 << bitPosition;\n    number |= bitMask;\n    return number;\n  };\n\n  var clearBit = jsPDFAPI.__acroform__.clearBit = function (number, bitPosition) {\n    number = number || 0;\n    bitPosition = bitPosition || 0;\n\n    if (isNaN(number) || isNaN(bitPosition)) {\n      throw new Error('Invalid arguments passed to jsPDF.API.__acroform__.clearBit');\n    }\n\n    var bitMask = 1 << bitPosition;\n    number &= ~bitMask;\n    return number;\n  };\n\n  var getBit = jsPDFAPI.__acroform__.getBit = function (number, bitPosition) {\n    if (isNaN(number) || isNaN(bitPosition)) {\n      throw new Error('Invalid arguments passed to jsPDF.API.__acroform__.getBit');\n    }\n\n    return (number & 1 << bitPosition) === 0 ? 0 : 1;\n  };\n  /*\n  * Ff starts counting the bit position at 1 and not like javascript at 0\n  */\n\n\n  var getBitForPdf = jsPDFAPI.__acroform__.getBitForPdf = function (number, bitPosition) {\n    if (isNaN(number) || isNaN(bitPosition)) {\n      throw new Error('Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf');\n    }\n\n    return getBit(number, bitPosition - 1);\n  };\n\n  var setBitForPdf = jsPDFAPI.__acroform__.setBitForPdf = function (number, bitPosition) {\n    if (isNaN(number) || isNaN(bitPosition)) {\n      throw new Error('Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf');\n    }\n\n    return setBit(number, bitPosition - 1);\n  };\n\n  var clearBitForPdf = jsPDFAPI.__acroform__.clearBitForPdf = function (number, bitPosition, value) {\n    if (isNaN(number) || isNaN(bitPosition)) {\n      throw new Error('Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf');\n    }\n\n    return clearBit(number, bitPosition - 1);\n  };\n\n  var calculateCoordinates = jsPDFAPI.__acroform__.calculateCoordinates = function (args) {\n    var getHorizontalCoordinate = this.internal.getHorizontalCoordinate;\n    var getVerticalCoordinate = this.internal.getVerticalCoordinate;\n    var x = args[0];\n    var y = args[1];\n    var w = args[2];\n    var h = args[3];\n    var coordinates = {};\n    coordinates.lowerLeft_X = getHorizontalCoordinate(x) || 0;\n    coordinates.lowerLeft_Y = getVerticalCoordinate(y + h) || 0;\n    coordinates.upperRight_X = getHorizontalCoordinate(x + w) || 0;\n    coordinates.upperRight_Y = getVerticalCoordinate(y) || 0;\n    return [Number(f2(coordinates.lowerLeft_X)), Number(f2(coordinates.lowerLeft_Y)), Number(f2(coordinates.upperRight_X)), Number(f2(coordinates.upperRight_Y))];\n  };\n\n  var calculateAppearanceStream = function calculateAppearanceStream(formObject) {\n    if (formObject.appearanceStreamContent) {\n      return formObject.appearanceStreamContent;\n    }\n\n    if (!formObject.V && !formObject.DV) {\n      return;\n    } // else calculate it\n\n\n    var stream = [];\n    var text = formObject.V || formObject.DV;\n    var calcRes = calculateX(formObject, text);\n    var fontKey = scope.internal.getFont(formObject.fontName, formObject.fontStyle).id; //PDF 32000-1:2008, page 444\n\n    stream.push('/Tx BMC');\n    stream.push('q');\n    stream.push('BT'); // Begin Text\n\n    stream.push(scope.__private__.encodeColorString(formObject.color));\n    stream.push('/' + fontKey + ' ' + f2(calcRes.fontSize) + ' Tf');\n    stream.push('1 0 0 1 0 0 Tm'); // Transformation Matrix\n\n    stream.push(calcRes.text);\n    stream.push('ET'); // End Text    \n\n    stream.push('Q');\n    stream.push('EMC');\n    var appearanceStreamContent = new createFormXObject(formObject);\n    appearanceStreamContent.stream = stream.join(\"\\n\");\n    return appearanceStreamContent;\n  };\n\n  var calculateX = function calculateX(formObject, text) {\n    var maxFontSize = formObject.maxFontSize || 12;\n    var font = formObject.fontName;\n    var returnValue = {\n      text: \"\",\n      fontSize: \"\"\n    }; // Remove Brackets\n\n    text = text.substr(0, 1) == '(' ? text.substr(1) : text;\n    text = text.substr(text.length - 1) == ')' ? text.substr(0, text.length - 1) : text; // split into array of words\n\n    var textSplit = text.split(' ');\n\n    var color = scope.__private__.encodeColorString(formObject.color);\n\n    var fontSize = maxFontSize; // The Starting fontSize (The Maximum)\n\n    var lineSpacing = 2;\n    var borderPadding = 2;\n    var height = AcroFormAppearance.internal.getHeight(formObject) || 0;\n    height = height < 0 ? -height : height;\n    var width = AcroFormAppearance.internal.getWidth(formObject) || 0;\n    width = width < 0 ? -width : width;\n\n    var isSmallerThanWidth = function isSmallerThanWidth(i, lastLine, fontSize) {\n      if (i + 1 < textSplit.length) {\n        var tmp = lastLine + \" \" + textSplit[i + 1];\n        var TextWidth = calculateFontSpace(tmp, formObject, fontSize).width;\n        var FieldWidth = width - 2 * borderPadding;\n        return TextWidth <= FieldWidth;\n      } else {\n        return false;\n      }\n    };\n\n    fontSize++;\n\n    FontSize: while (true) {\n      var text = \"\";\n      fontSize--;\n      var textHeight = calculateFontSpace(\"3\", formObject, fontSize).height;\n      var startY = formObject.multiline ? height - fontSize : (height - textHeight) / 2;\n      startY += lineSpacing;\n      var startX = -borderPadding;\n      var lastY = startY;\n      var firstWordInLine = 0,\n          lastWordInLine = 0;\n      var lastLength = 0;\n\n      if (fontSize <= 0) {\n        // In case, the Text doesn't fit at all\n        fontSize = 12;\n        text = \"(...) Tj\\n\";\n        text += \"% Width of Text: \" + calculateFontSpace(text, formObject, fontSize).width + \", FieldWidth:\" + width + \"\\n\";\n        break;\n      }\n\n      lastLength = calculateFontSpace(textSplit[0] + \" \", formObject, fontSize).width;\n      var lastLine = \"\";\n      var lineCount = 0;\n\n      Line: for (var i in textSplit) {\n        if (textSplit.hasOwnProperty(i)) {\n          lastLine += textSplit[i] + \" \"; // Remove last blank\n\n          lastLine = lastLine.substr(lastLine.length - 1) == \" \" ? lastLine.substr(0, lastLine.length - 1) : lastLine;\n          var key = parseInt(i);\n          lastLength = calculateFontSpace(lastLine + \" \", formObject, fontSize).width;\n          var nextLineIsSmaller = isSmallerThanWidth(key, lastLine, fontSize);\n          var isLastWord = i >= textSplit.length - 1;\n\n          if (nextLineIsSmaller && !isLastWord) {\n            lastLine += \" \";\n            continue; // Line\n          } else if (!nextLineIsSmaller && !isLastWord) {\n            if (!formObject.multiline) {\n              continue FontSize;\n            } else {\n              if ((textHeight + lineSpacing) * (lineCount + 2) + lineSpacing > height) {\n                // If the Text is higher than the\n                // FieldObject\n                continue FontSize;\n              }\n\n              lastWordInLine = key; // go on\n            }\n          } else if (isLastWord) {\n            lastWordInLine = key;\n          } else {\n            if (formObject.multiline && (textHeight + lineSpacing) * (lineCount + 2) + lineSpacing > height) {\n              // If the Text is higher than the FieldObject\n              continue FontSize;\n            }\n          }\n\n          var line = '';\n\n          for (var x = firstWordInLine; x <= lastWordInLine; x++) {\n            line += textSplit[x] + ' ';\n          } // Remove last blank\n\n\n          line = line.substr(line.length - 1) == \" \" ? line.substr(0, line.length - 1) : line; // lastLength -= blankSpace.width;\n\n          lastLength = calculateFontSpace(line, formObject, fontSize).width; // Calculate startX\n\n          switch (formObject.textAlign) {\n            case 'right':\n              startX = width - lastLength - borderPadding;\n              break;\n\n            case 'center':\n              startX = (width - lastLength) / 2;\n              break;\n\n            case 'left':\n            default:\n              startX = borderPadding;\n              break;\n          }\n\n          text += f2(startX) + ' ' + f2(lastY) + ' Td\\n';\n          text += '(' + pdfEscape(line) + ') Tj\\n'; // reset X in PDF\n\n          text += -f2(startX) + ' 0 Td\\n'; // After a Line, adjust y position\n\n          lastY = -(fontSize + lineSpacing);\n\n          lastLength = 0;\n          firstWordInLine = lastWordInLine + 1;\n          lineCount++;\n          lastLine = \"\";\n          continue Line;\n        }\n      }\n\n      break;\n    }\n\n    returnValue.text = text;\n    returnValue.fontSize = fontSize;\n    return returnValue;\n  };\n  /**\n  * Small workaround for calculating the TextMetric approximately.\n  * \n  * @param text\n  * @param fontsize\n  * @returns {TextMetrics} (Has Height and Width)\n  */\n\n\n  var calculateFontSpace = function calculateFontSpace(text, formObject, fontSize) {\n    var font = scope.internal.getFont(formObject.fontName, formObject.fontStyle);\n    var width = scope.getStringUnitWidth(text, {\n      font: font,\n      fontSize: parseFloat(fontSize),\n      charSpace: 0\n    }) * parseFloat(fontSize);\n    var height = scope.getStringUnitWidth(\"3\", {\n      font: font,\n      fontSize: parseFloat(fontSize),\n      charSpace: 0\n    }) * parseFloat(fontSize) * 1.5;\n    return {\n      height: height,\n      width: width\n    };\n  };\n\n  var acroformPluginTemplate = {\n    fields: [],\n    xForms: [],\n\n    /**\n    * acroFormDictionaryRoot contains information about the AcroForm\n    * Dictionary 0: The Event-Token, the AcroFormDictionaryCallback has\n    * 1: The Object ID of the Root\n    */\n    acroFormDictionaryRoot: null,\n\n    /**\n    * After the PDF gets evaluated, the reference to the root has to be\n    * reset, this indicates, whether the root has already been printed\n    * out\n    */\n    printedOut: false,\n    internal: null,\n    isInitialized: false\n  };\n\n  var annotReferenceCallback = function annotReferenceCallback() {\n    //set objId to undefined and force it to get a new objId on buildDocument\n    scope.internal.acroformPlugin.acroFormDictionaryRoot.objId = undefined;\n    var fields = scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields;\n\n    for (var i in fields) {\n      if (fields.hasOwnProperty(i)) {\n        var formObject = fields[i]; //set objId to undefined and force it to get a new objId on buildDocument\n\n        formObject.objId = undefined; // add Annot Reference!\n\n        if (formObject.hasAnnotation) {\n          // If theres an Annotation Widget in the Form Object, put the\n          // Reference in the /Annot array\n          createAnnotationReference.call(scope, formObject);\n        }\n      }\n    }\n  };\n\n  var putForm = function putForm(formObject) {\n    if (scope.internal.acroformPlugin.printedOut) {\n      scope.internal.acroformPlugin.printedOut = false;\n      scope.internal.acroformPlugin.acroFormDictionaryRoot = null;\n    }\n\n    if (!scope.internal.acroformPlugin.acroFormDictionaryRoot) {\n      initializeAcroForm.call(scope);\n    }\n\n    scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(formObject);\n  };\n  /**\n  * Create the Reference to the widgetAnnotation, so that it gets referenced\n  * in the Annot[] int the+ (Requires the Annotation Plugin)\n  */\n\n\n  var createAnnotationReference = function createAnnotationReference(object) {\n    var options = {\n      type: 'reference',\n      object: object\n    };\n\n    var findEntry = function findEntry(entry) {\n      return entry.type === options.type && entry.object === options.object;\n    };\n\n    if (scope.internal.getPageInfo(object.page).pageContext.annotations.find(findEntry) === undefined) {\n      scope.internal.getPageInfo(object.page).pageContext.annotations.push(options);\n    }\n  }; // Callbacks\n\n\n  var putCatalogCallback = function putCatalogCallback() {\n    // Put reference to AcroForm to DocumentCatalog\n    if (typeof scope.internal.acroformPlugin.acroFormDictionaryRoot != 'undefined') {\n      // for safety, shouldn't normally be the case\n      scope.internal.write('/AcroForm ' + scope.internal.acroformPlugin.acroFormDictionaryRoot.objId + ' ' + 0 + ' R');\n    } else {\n      throw new Error('putCatalogCallback: Root missing.');\n    }\n  };\n  /**\n  * Adds /Acroform X 0 R to Document Catalog, and creates the AcroForm\n  * Dictionary\n  */\n\n\n  var AcroFormDictionaryCallback = function AcroFormDictionaryCallback() {\n    // Remove event\n    scope.internal.events.unsubscribe(scope.internal.acroformPlugin.acroFormDictionaryRoot._eventID);\n    delete scope.internal.acroformPlugin.acroFormDictionaryRoot._eventID;\n    scope.internal.acroformPlugin.printedOut = true;\n  };\n  /**\n  * Creates the single Fields and writes them into the Document\n  * \n  * If fieldArray is set, use the fields that are inside it instead of the\n  * fields from the AcroRoot (for the FormXObjects...)\n  */\n\n\n  var createFieldCallback = function createFieldCallback(fieldArray) {\n    var standardFields = !fieldArray;\n\n    if (!fieldArray) {\n      // in case there is no fieldArray specified, we want to print out\n      // the Fields of the AcroForm\n      // Print out Root\n      scope.internal.newObjectDeferredBegin(scope.internal.acroformPlugin.acroFormDictionaryRoot.objId, true);\n      scope.internal.acroformPlugin.acroFormDictionaryRoot.putStream();\n    }\n\n    var fieldArray = fieldArray || scope.internal.acroformPlugin.acroFormDictionaryRoot.Kids;\n\n    for (var i in fieldArray) {\n      if (fieldArray.hasOwnProperty(i)) {\n        var fieldObject = fieldArray[i];\n        var keyValueList = [];\n        var oldRect = fieldObject.Rect;\n\n        if (fieldObject.Rect) {\n          fieldObject.Rect = calculateCoordinates.call(this, fieldObject.Rect);\n        } // Start Writing the Object\n\n\n        scope.internal.newObjectDeferredBegin(fieldObject.objId, true);\n        fieldObject.DA = AcroFormAppearance.createDefaultAppearanceStream(fieldObject);\n\n        if (_typeof(fieldObject) === \"object\" && typeof fieldObject.getKeyValueListForStream === \"function\") {\n          keyValueList = fieldObject.getKeyValueListForStream();\n        }\n\n        fieldObject.Rect = oldRect;\n\n        if (fieldObject.hasAppearanceStream && !fieldObject.appearanceStreamContent) {\n          // Calculate Appearance\n          var appearance = calculateAppearanceStream.call(this, fieldObject);\n          keyValueList.push({\n            key: 'AP',\n            value: \"<</N \" + appearance + \">>\"\n          });\n          scope.internal.acroformPlugin.xForms.push(appearance);\n        } // Assume AppearanceStreamContent is a Array with N,R,D (at least\n        // one of them!)\n\n\n        if (fieldObject.appearanceStreamContent) {\n          var appearanceStreamString = \"\"; // Iterate over N,R and D\n\n          for (var k in fieldObject.appearanceStreamContent) {\n            if (fieldObject.appearanceStreamContent.hasOwnProperty(k)) {\n              var value = fieldObject.appearanceStreamContent[k];\n              appearanceStreamString += \"/\" + k + \" \";\n              appearanceStreamString += \"<<\";\n\n              if (Object.keys(value).length >= 1 || Array.isArray(value)) {\n                // appearanceStream is an Array or Object!\n                for (var i in value) {\n                  if (value.hasOwnProperty(i)) {\n                    var obj = value[i];\n\n                    if (typeof obj === 'function') {\n                      // if Function is referenced, call it in order\n                      // to get the FormXObject\n                      obj = obj.call(this, fieldObject);\n                    }\n\n                    appearanceStreamString += \"/\" + i + \" \" + obj + \" \"; // In case the XForm is already used, e.g. OffState\n                    // of CheckBoxes, don't add it\n\n                    if (!(scope.internal.acroformPlugin.xForms.indexOf(obj) >= 0)) scope.internal.acroformPlugin.xForms.push(obj);\n                  }\n                }\n              } else {\n                var obj = value;\n\n                if (typeof obj === 'function') {\n                  // if Function is referenced, call it in order to\n                  // get the FormXObject\n                  obj = obj.call(this, fieldObject);\n                }\n\n                appearanceStreamString += \"/\" + i + \" \" + obj;\n                if (!(scope.internal.acroformPlugin.xForms.indexOf(obj) >= 0)) scope.internal.acroformPlugin.xForms.push(obj);\n              }\n\n              appearanceStreamString += \">>\";\n            }\n          } // appearance stream is a normal Object..\n\n\n          keyValueList.push({\n            key: 'AP',\n            value: \"<<\\n\" + appearanceStreamString + \">>\"\n          });\n        }\n\n        scope.internal.putStream({\n          additionalKeyValues: keyValueList\n        });\n        scope.internal.out(\"endobj\");\n      }\n    }\n\n    if (standardFields) {\n      createXFormObjectCallback.call(this, scope.internal.acroformPlugin.xForms);\n    }\n  };\n\n  var createXFormObjectCallback = function createXFormObjectCallback(fieldArray) {\n    for (var i in fieldArray) {\n      if (fieldArray.hasOwnProperty(i)) {\n        var key = i;\n        var fieldObject = fieldArray[i]; // Start Writing the Object\n\n        scope.internal.newObjectDeferredBegin(fieldObject && fieldObject.objId, true);\n\n        if (_typeof(fieldObject) === \"object\" && typeof fieldObject.putStream === \"function\") {\n          fieldObject.putStream();\n        }\n\n        delete fieldArray[key];\n      }\n    }\n  };\n\n  var initializeAcroForm = function initializeAcroForm() {\n    if (this.internal !== undefined && (this.internal.acroformPlugin === undefined || this.internal.acroformPlugin.isInitialized === false)) {\n      scope = this;\n      AcroFormField.FieldNum = 0;\n      this.internal.acroformPlugin = JSON.parse(JSON.stringify(acroformPluginTemplate));\n\n      if (this.internal.acroformPlugin.acroFormDictionaryRoot) {\n        throw new Error(\"Exception while creating AcroformDictionary\");\n      }\n\n      scaleFactor = scope.internal.scaleFactor; // The Object Number of the AcroForm Dictionary\n\n      scope.internal.acroformPlugin.acroFormDictionaryRoot = new AcroFormDictionary(); // add Callback for creating the AcroForm Dictionary\n\n      scope.internal.acroformPlugin.acroFormDictionaryRoot._eventID = scope.internal.events.subscribe('postPutResources', AcroFormDictionaryCallback);\n      scope.internal.events.subscribe('buildDocument', annotReferenceCallback); // buildDocument\n      // Register event, that is triggered when the DocumentCatalog is\n      // written, in order to add /AcroForm\n\n      scope.internal.events.subscribe('putCatalog', putCatalogCallback); // Register event, that creates all Fields\n\n      scope.internal.events.subscribe('postPutPages', createFieldCallback);\n      scope.internal.acroformPlugin.isInitialized = true;\n    }\n  }; //PDF 32000-1:2008, page 26, 7.3.6\n\n\n  var arrayToPdfArray = jsPDFAPI.__acroform__.arrayToPdfArray = function (array) {\n    if (Array.isArray(array)) {\n      var content = '[';\n\n      for (var i = 0; i < array.length; i++) {\n        if (i !== 0) {\n          content += ' ';\n        }\n\n        switch (_typeof(array[i])) {\n          case 'boolean':\n          case 'number':\n          case 'object':\n            content += array[i].toString();\n            break;\n\n          case 'string':\n            if (array[i].substr(0, 1) !== '/') {\n              content += '(' + pdfEscape(array[i].toString()) + ')';\n            } else {\n              content += array[i].toString();\n            }\n\n            break;\n        }\n      }\n\n      content += ']';\n      return content;\n    }\n\n    throw new Error('Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray');\n  };\n\n  function getMatches(string, regex, index) {\n    index || (index = 1); // default to the first capturing group\n\n    var matches = [];\n    var match;\n\n    while (match = regex.exec(string)) {\n      matches.push(match[index]);\n    }\n\n    return matches;\n  }\n\n  var pdfArrayToStringArray = function pdfArrayToStringArray(array) {\n    var result = [];\n\n    if (typeof array === \"string\") {\n      result = getMatches(array, /\\((.*?)\\)/g);\n    }\n\n    return result;\n  };\n\n  var toPdfString = function toPdfString(string) {\n    string = string || \"\";\n    string.toString();\n    string = '(' + pdfEscape(string) + ')';\n    return string;\n  }; // ##########################\n  // Classes\n  // ##########################\n\n  /**\n  * @class AcroFormPDFObject\n  * @classdesc A AcroFormPDFObject\n  */\n\n\n  var AcroFormPDFObject = function AcroFormPDFObject() {\n    var _objId;\n    /**    *\n    * @name AcroFormPDFObject#objId\n    * @type {any}\n    */\n\n\n    Object.defineProperty(this, 'objId', {\n      configurable: true,\n      get: function get() {\n        if (!_objId) {\n          _objId = scope.internal.newObjectDeferred();\n        }\n\n        if (!_objId) {\n          throw new Error(\"AcroFormPDFObject: Couldn't create Object ID\");\n        }\n\n        return _objId;\n      },\n      set: function set(value) {\n        _objId = value;\n      }\n    });\n  };\n  /**\n  * @function AcroFormPDFObject.toString\n  */\n\n\n  AcroFormPDFObject.prototype.toString = function () {\n    return this.objId + \" 0 R\";\n  };\n\n  AcroFormPDFObject.prototype.putStream = function () {\n    var keyValueList = this.getKeyValueListForStream();\n    scope.internal.putStream({\n      data: this.stream,\n      additionalKeyValues: keyValueList\n    });\n    scope.internal.out(\"endobj\");\n  };\n  /**\n  * Returns an key-value-List of all non-configurable Variables from the Object\n  * \n  * @name getKeyValueListForStream\n  * @returns {string}\n  */\n\n\n  AcroFormPDFObject.prototype.getKeyValueListForStream = function () {\n    var createKeyValueListFromFieldObject = function createKeyValueListFromFieldObject(fieldObject) {\n      var keyValueList = [];\n      var keys = Object.getOwnPropertyNames(fieldObject).filter(function (key) {\n        return key != 'content' && key != 'appearanceStreamContent' && key.substring(0, 1) != \"_\";\n      });\n\n      for (var i in keys) {\n        if (Object.getOwnPropertyDescriptor(fieldObject, keys[i]).configurable === false) {\n          var key = keys[i];\n          var value = fieldObject[key];\n\n          if (value) {\n            if (Array.isArray(value)) {\n              keyValueList.push({\n                key: key,\n                value: arrayToPdfArray(value)\n              });\n            } else if (value instanceof AcroFormPDFObject) {\n              // In case it is a reference to another PDFObject,\n              // take the reference number\n              keyValueList.push({\n                key: key,\n                value: value.objId + \" 0 R\"\n              });\n            } else if (typeof value !== \"function\") {\n              keyValueList.push({\n                key: key,\n                value: value\n              });\n            }\n          }\n        }\n      }\n\n      return keyValueList;\n    };\n\n    return createKeyValueListFromFieldObject(this);\n  };\n\n  var AcroFormXObject = function AcroFormXObject() {\n    AcroFormPDFObject.call(this);\n    Object.defineProperty(this, 'Type', {\n      value: \"/XObject\",\n      configurable: false,\n      writeable: true\n    });\n    Object.defineProperty(this, 'Subtype', {\n      value: \"/Form\",\n      configurable: false,\n      writeable: true\n    });\n    Object.defineProperty(this, 'FormType', {\n      value: 1,\n      configurable: false,\n      writeable: true\n    });\n    var _BBox = [];\n    Object.defineProperty(this, 'BBox', {\n      configurable: false,\n      writeable: true,\n      get: function get() {\n        return _BBox;\n      },\n      set: function set(value) {\n        _BBox = value;\n      }\n    });\n    Object.defineProperty(this, 'Resources', {\n      value: \"2 0 R\",\n      configurable: false,\n      writeable: true\n    });\n\n    var _stream;\n\n    Object.defineProperty(this, 'stream', {\n      enumerable: false,\n      configurable: true,\n      set: function set(value) {\n        _stream = value.trim();\n      },\n      get: function get() {\n        if (_stream) {\n          return _stream;\n        } else {\n          return null;\n        }\n      }\n    });\n  };\n\n  inherit(AcroFormXObject, AcroFormPDFObject);\n\n  var AcroFormDictionary = function AcroFormDictionary() {\n    AcroFormPDFObject.call(this);\n    var _Kids = [];\n    Object.defineProperty(this, 'Kids', {\n      enumerable: false,\n      configurable: true,\n      get: function get() {\n        if (_Kids.length > 0) {\n          return _Kids;\n        } else {\n          return;\n        }\n      }\n    });\n    Object.defineProperty(this, 'Fields', {\n      enumerable: false,\n      configurable: false,\n      get: function get() {\n        return _Kids;\n      }\n    }); // Default Appearance\n\n    var _DA;\n\n    Object.defineProperty(this, 'DA', {\n      enumerable: false,\n      configurable: false,\n      get: function get() {\n        if (!_DA) {\n          return;\n        }\n\n        return '(' + _DA + ')';\n      },\n      set: function set(value) {\n        _DA = value;\n      }\n    });\n  };\n\n  inherit(AcroFormDictionary, AcroFormPDFObject);\n  /**\n  * The Field Object contains the Variables, that every Field needs\n  * \n  * @class AcroFormField\n  * @classdesc An AcroForm FieldObject\n  */\n\n  var AcroFormField = function AcroFormField() {\n    AcroFormPDFObject.call(this); //Annotation-Flag See Table 165\n\n    var _F = 4;\n    Object.defineProperty(this, 'F', {\n      enumerable: false,\n      configurable: false,\n      get: function get() {\n        return _F;\n      },\n      set: function set(value) {\n        if (!isNaN(value)) {\n          _F = value;\n        } else {\n          throw new Error('Invalid value \"' + value + '\" for attribute F supplied.');\n        }\n      }\n    });\n    /**\n    * (PDF 1.2) If set, print the annotation when the page is printed. If clear, never print the annotation, regardless of wether is is displayed on the screen. \n    * NOTE 2 This can be useful for annotations representing interactive pushbuttons, which would serve no meaningful purpose on the printed page.\n    *\n    * @name AcroFormField#showWhenPrinted\n    * @default true\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'showWhenPrinted', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(_F, 3));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.F = setBitForPdf(_F, 3);\n        } else {\n          this.F = clearBitForPdf(_F, 3);\n        }\n      }\n    });\n    var _Ff = 0;\n    Object.defineProperty(this, 'Ff', {\n      enumerable: false,\n      configurable: false,\n      get: function get() {\n        return _Ff;\n      },\n      set: function set(value) {\n        if (!isNaN(value)) {\n          _Ff = value;\n        } else {\n          throw new Error('Invalid value \"' + value + '\" for attribute Ff supplied.');\n        }\n      }\n    });\n    var _Rect = [];\n    Object.defineProperty(this, 'Rect', {\n      enumerable: false,\n      configurable: false,\n      get: function get() {\n        if (_Rect.length === 0) {\n          return;\n        }\n\n        return _Rect;\n      },\n      set: function set(value) {\n        if (typeof value !== \"undefined\") {\n          _Rect = value;\n        } else {\n          _Rect = [];\n        }\n      }\n    });\n    /**\n    * The x-position of the field.\n    *\n    * @name AcroFormField#x\n    * @default null\n    * @type {number}\n    */\n\n    Object.defineProperty(this, 'x', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        if (!_Rect || isNaN(_Rect[0])) {\n          return 0;\n        }\n\n        return antiScale(_Rect[0]);\n      },\n      set: function set(value) {\n        _Rect[0] = scale(value);\n      }\n    });\n    /**\n    * The y-position of the field.\n    *\n    * @name AcroFormField#y\n    * @default null\n    * @type {number}\n    */\n\n    Object.defineProperty(this, 'y', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        if (!_Rect || isNaN(_Rect[1])) {\n          return 0;\n        }\n\n        return antiScale(_Rect[1]);\n      },\n      set: function set(value) {\n        _Rect[1] = scale(value);\n      }\n    });\n    /**\n    * The width of the field.\n    *\n    * @name AcroFormField#width\n    * @default null\n    * @type {number}\n    */\n\n    Object.defineProperty(this, 'width', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        if (!_Rect || isNaN(_Rect[2])) {\n          return 0;\n        }\n\n        return antiScale(_Rect[2]);\n      },\n      set: function set(value) {\n        _Rect[2] = scale(value);\n      }\n    });\n    /**\n    * The height of the field.\n    *\n    * @name AcroFormField#height\n    * @default null\n    * @type {number}\n    */\n\n    Object.defineProperty(this, 'height', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        if (!_Rect || isNaN(_Rect[3])) {\n          return 0;\n        }\n\n        return antiScale(_Rect[3]);\n      },\n      set: function set(value) {\n        _Rect[3] = scale(value);\n      }\n    });\n    var _FT = \"\";\n    Object.defineProperty(this, 'FT', {\n      enumerable: true,\n      configurable: false,\n      get: function get() {\n        return _FT;\n      },\n      set: function set(value) {\n        switch (value) {\n          case '/Btn':\n          case '/Tx':\n          case '/Ch':\n          case '/Sig':\n            _FT = value;\n            break;\n\n          default:\n            throw new Error('Invalid value \"' + value + '\" for attribute FT supplied.');\n        }\n      }\n    });\n    var _T = null;\n    Object.defineProperty(this, 'T', {\n      enumerable: true,\n      configurable: false,\n      get: function get() {\n        if (!_T || _T.length < 1) {\n          // In case of a Child from a Radio´Group, you don't need a FieldName\n          if (this instanceof AcroFormChildClass) {\n            return;\n          }\n\n          _T = \"FieldObject\" + AcroFormField.FieldNum++;\n        }\n\n        return '(' + pdfEscape(_T) + ')';\n      },\n      set: function set(value) {\n        _T = value.toString();\n      }\n    });\n    /**\n    * (Optional) The partial field name (see 12.7.3.2, “Field Names”).\n    *\n    * @name AcroFormField#fieldName\n    * @default null\n    * @type {string}\n    */\n\n    Object.defineProperty(this, 'fieldName', {\n      configurable: true,\n      enumerable: true,\n      get: function get() {\n        return _T;\n      },\n      set: function set(value) {\n        _T = value;\n      }\n    });\n    var _fontName = 'helvetica';\n    /**\n    * The fontName of the font to be used.\n    *\n    * @name AcroFormField#fontName\n    * @default 'helvetica'\n    * @type {string}\n    */\n\n    Object.defineProperty(this, 'fontName', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return _fontName;\n      },\n      set: function set(value) {\n        _fontName = value;\n      }\n    });\n    var _fontStyle = 'normal';\n    /**\n    * The fontStyle of the font to be used.\n    *\n    * @name AcroFormField#fontStyle\n    * @default 'normal'\n    * @type {string}\n    */\n\n    Object.defineProperty(this, 'fontStyle', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return _fontStyle;\n      },\n      set: function set(value) {\n        _fontStyle = value;\n      }\n    });\n    var _fontSize = 0;\n    /**\n    * The fontSize of the font to be used.\n    *\n    * @name AcroFormField#fontSize\n    * @default 0 (for auto)\n    * @type {number}\n    */\n\n    Object.defineProperty(this, 'fontSize', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return antiScale(_fontSize);\n      },\n      set: function set(value) {\n        _fontSize = scale(value);\n      }\n    });\n    var _maxFontSize = 50;\n    /**\n    * The maximum fontSize of the font to be used.\n    *\n    * @name AcroFormField#maxFontSize\n    * @default 0 (for auto)\n    * @type {number}\n    */\n\n    Object.defineProperty(this, 'maxFontSize', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return antiScale(_maxFontSize);\n      },\n      set: function set(value) {\n        _maxFontSize = scale(value);\n      }\n    });\n    var _color = 'black';\n    /**\n    * The color of the text\n    *\n    * @name AcroFormField#color\n    * @default 'black'\n    * @type {string|rgba}\n    */\n\n    Object.defineProperty(this, 'color', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return _color;\n      },\n      set: function set(value) {\n        _color = value;\n      }\n    });\n    var _DA = '/F1 0 Tf 0 g'; // Defines the default appearance (Needed for variable Text)\n\n    Object.defineProperty(this, 'DA', {\n      enumerable: true,\n      configurable: false,\n      get: function get() {\n        if (!_DA || this instanceof AcroFormChildClass || this instanceof AcroFormTextField) {\n          return;\n        }\n\n        return toPdfString(_DA);\n      },\n      set: function set(value) {\n        value = value.toString();\n        _DA = value;\n      }\n    });\n    var _DV = null;\n    Object.defineProperty(this, 'DV', {\n      enumerable: false,\n      configurable: false,\n      get: function get() {\n        if (!_DV) {\n          return;\n        }\n\n        if (this instanceof AcroFormButton === false) {\n          return toPdfString(_DV);\n        }\n\n        return _DV;\n      },\n      set: function set(value) {\n        value = value.toString();\n\n        if (this instanceof AcroFormButton === false) {\n          if (value.substr(0, 1) === '(') {\n            _DV = pdfUnescape(value.substr(1, value.length - 2));\n          } else {\n            _DV = pdfUnescape(value);\n          }\n        } else {\n          _DV = value;\n        }\n      }\n    });\n    /**\n    * (Optional; inheritable) The default value to which the field reverts when a reset-form action is executed (see 12.7.5.3, “Reset-Form Action”). The format of this value is the same as that of value. \n    *\n    * @name AcroFormField#defaultValue\n    * @default null\n    * @type {any}\n    */\n\n    Object.defineProperty(this, 'defaultValue', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        if (this instanceof AcroFormButton === true) {\n          return pdfUnescape(_DV.substr(1, _DV.length - 1));\n        } else {\n          return _DV;\n        }\n      },\n      set: function set(value) {\n        value = value.toString();\n\n        if (this instanceof AcroFormButton === true) {\n          _DV = '/' + value;\n        } else {\n          _DV = value;\n        }\n      }\n    });\n    var _V = null;\n    Object.defineProperty(this, 'V', {\n      enumerable: false,\n      configurable: false,\n      get: function get() {\n        if (!_V) {\n          return;\n        }\n\n        if (this instanceof AcroFormButton === false) {\n          return toPdfString(_V);\n        }\n\n        return _V;\n      },\n      set: function set(value) {\n        value = value.toString();\n\n        if (this instanceof AcroFormButton === false) {\n          if (value.substr(0, 1) === '(') {\n            _V = pdfUnescape(value.substr(1, value.length - 2));\n          } else {\n            _V = pdfUnescape(value);\n          }\n        } else {\n          _V = value;\n        }\n      }\n    });\n    /**\n    * (Optional; inheritable) The field’s value, whose format varies depending on the field type. See the descriptions of individual field types for further information. \n    *\n    * @name AcroFormField#value\n    * @default null\n    * @type {any}\n    */\n\n    Object.defineProperty(this, 'value', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        if (this instanceof AcroFormButton === true) {\n          return pdfUnescape(_V.substr(1, _V.length - 1));\n        } else {\n          return _V;\n        }\n      },\n      set: function set(value) {\n        value = value.toString();\n\n        if (this instanceof AcroFormButton === true) {\n          _V = '/' + value;\n        } else {\n          _V = value;\n        }\n      }\n    });\n    /**\n    * Check if field has annotations\n    *\n    * @name AcroFormField#hasAnnotation\n    * @readonly\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'hasAnnotation', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return this.Rect;\n      }\n    });\n    Object.defineProperty(this, 'Type', {\n      enumerable: true,\n      configurable: false,\n      get: function get() {\n        return this.hasAnnotation ? \"/Annot\" : null;\n      }\n    });\n    Object.defineProperty(this, 'Subtype', {\n      enumerable: true,\n      configurable: false,\n      get: function get() {\n        return this.hasAnnotation ? \"/Widget\" : null;\n      }\n    });\n    var _hasAppearanceStream = false;\n    /**\n    * true if field has an appearanceStream\n    *\n    * @name AcroFormField#hasAppearanceStream\n    * @readonly\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'hasAppearanceStream', {\n      enumerable: true,\n      configurable: true,\n      writeable: true,\n      get: function get() {\n        return _hasAppearanceStream;\n      },\n      set: function set(value) {\n        value = Boolean(value);\n        _hasAppearanceStream = value;\n      }\n    });\n    /**\n    * The page on which the AcroFormField is placed\n    *\n    * @name AcroFormField#page\n    * @type {number}\n    */\n\n    var _page;\n\n    Object.defineProperty(this, 'page', {\n      enumerable: true,\n      configurable: true,\n      writeable: true,\n      get: function get() {\n        if (!_page) {\n          return;\n        }\n\n        return _page;\n      },\n      set: function set(value) {\n        _page = value;\n      }\n    });\n    /**\n    * If set, the user may not change the value of the field. Any associated widget annotations will not interact with the user; that is, they will not respond to mouse clicks or change their appearance in response to mouse motions. This flag is useful for fields whose values are computed or imported from a database. \n    *\n    * @name AcroFormField#readOnly\n    * @default false\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'readOnly', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 1));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 1);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 1);\n        }\n      }\n    });\n    /**\n    * If set, the field shall have a value at the time it is exported by a submitform action (see 12.7.5.2, “Submit-Form Action”). \n    *\n    * @name AcroFormField#required\n    * @default false\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'required', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 2));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 2);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 2);\n        }\n      }\n    });\n    /**\n    * If set, the field shall not be exported by a submit-form action (see 12.7.5.2, “Submit-Form Action”)\n    *\n    * @name AcroFormField#noExport\n    * @default false\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'noExport', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 3));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 3);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 3);\n        }\n      }\n    });\n    var _Q = null;\n    Object.defineProperty(this, 'Q', {\n      enumerable: true,\n      configurable: false,\n      get: function get() {\n        if (_Q === null) {\n          return;\n        }\n\n        return _Q;\n      },\n      set: function set(value) {\n        if ([0, 1, 2].indexOf(value) !== -1) {\n          _Q = value;\n        } else {\n          throw new Error('Invalid value \"' + value + '\" for attribute Q supplied.');\n        }\n      }\n    });\n    /**\n    * (Optional; inheritable) A code specifying the form of quadding (justification) that shall be used in displaying the text:\n    * 'left', 'center', 'right'\n    *\n    * @name AcroFormField#textAlign\n    * @default 'left'\n    * @type {string}\n    */\n\n    Object.defineProperty(this, 'textAlign', {\n      get: function get() {\n        var result = 'left';\n\n        switch (_Q) {\n          case 0:\n          default:\n            result = 'left';\n            break;\n\n          case 1:\n            result = 'center';\n            break;\n\n          case 2:\n            result = 'right';\n            break;\n        }\n\n        return result;\n      },\n      configurable: true,\n      enumerable: true,\n      set: function set(value) {\n        switch (value) {\n          case 'right':\n          case 2:\n            _Q = 2;\n            break;\n\n          case 'center':\n          case 1:\n            _Q = 1;\n            break;\n\n          case 'left':\n          case 0:\n          default:\n            _Q = 0;\n        }\n      }\n    });\n  };\n\n  inherit(AcroFormField, AcroFormPDFObject);\n  /**\n  * @class AcroFormChoiceField\n  * @extends AcroFormField\n  */\n\n  var AcroFormChoiceField = function AcroFormChoiceField() {\n    AcroFormField.call(this); // Field Type = Choice Field\n\n    this.FT = \"/Ch\"; // options\n\n    this.V = '()';\n    this.fontName = 'zapfdingbats'; // Top Index\n\n    var _TI = 0;\n    Object.defineProperty(this, 'TI', {\n      enumerable: true,\n      configurable: false,\n      get: function get() {\n        return _TI;\n      },\n      set: function set(value) {\n        _TI = value;\n      }\n    });\n    /**\n    * (Optional) For scrollable list boxes, the top index (the index in the Opt array of the first option visible in the list). Default value: 0.\n    * \n    * @name AcroFormChoiceField#topIndex\n    * @default 0\n    * @type {number}\n    */\n\n    Object.defineProperty(this, 'topIndex', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return _TI;\n      },\n      set: function set(value) {\n        _TI = value;\n      }\n    });\n    var _Opt = [];\n    Object.defineProperty(this, 'Opt', {\n      enumerable: true,\n      configurable: false,\n      get: function get() {\n        return arrayToPdfArray(_Opt);\n      },\n      set: function set(value) {\n        _Opt = pdfArrayToStringArray(value);\n      }\n    });\n    /**\n    * @memberof AcroFormChoiceField\n    * @name getOptions\n    * @function\n    * @instance\n    * @returns {array} array of Options\n    */\n\n    this.getOptions = function () {\n      return _Opt;\n    };\n    /**\n    * @memberof AcroFormChoiceField\n    * @name setOptions\n    * @function\n    * @instance\n    * @param {array} value\n    */\n\n\n    this.setOptions = function (value) {\n      _Opt = value;\n\n      if (this.sort) {\n        _Opt.sort();\n      }\n    };\n    /**\n    * @memberof AcroFormChoiceField\n    * @name addOption\n    * @function\n    * @instance\n    * @param {string} value\n    */\n\n\n    this.addOption = function (value) {\n      value = value || \"\";\n      value = value.toString();\n\n      _Opt.push(value);\n\n      if (this.sort) {\n        _Opt.sort();\n      }\n    };\n    /**\n    * @memberof AcroFormChoiceField\n    * @name removeOption\n    * @function\n    * @instance\n    * @param {string} value\n    * @param {boolean} allEntries (default: false)\n    */\n\n\n    this.removeOption = function (value, allEntries) {\n      allEntries = allEntries || false;\n      value = value || \"\";\n      value = value.toString();\n\n      while (_Opt.indexOf(value) !== -1) {\n        _Opt.splice(_Opt.indexOf(value), 1);\n\n        if (allEntries === false) {\n          break;\n        }\n      }\n    };\n    /**\n    * If set, the field is a combo box; if clear, the field is a list box. \n    *\n    * @name AcroFormChoiceField#combo\n    * @default false\n    * @type {boolean}\n    */\n\n\n    Object.defineProperty(this, 'combo', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 18));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 18);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 18);\n        }\n      }\n    });\n    /**\n    * If set, the combo box shall include an editable text box as well as a drop-down list; if clear, it shall include only a drop-down list. This flag shall be used only if the Combo flag is set. \n    *\n    * @name AcroFormChoiceField#edit\n    * @default false\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'edit', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 19));\n      },\n      set: function set(value) {\n        //PDF 32000-1:2008, page 444\n        if (this.combo === true) {\n          if (Boolean(value) === true) {\n            this.Ff = setBitForPdf(this.Ff, 19);\n          } else {\n            this.Ff = clearBitForPdf(this.Ff, 19);\n          }\n        }\n      }\n    });\n    /**\n    * If set, the field’s option items shall be sorted alphabetically. This flag is intended for use by writers, not by readers. Conforming readers shall display the options in the order in which they occur in the Opt array (see Table 231). \n    *\n    * @name AcroFormChoiceField#sort\n    * @default false\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'sort', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 20));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 20);\n\n          _Opt.sort();\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 20);\n        }\n      }\n    });\n    /**\n    * (PDF 1.4) If set, more than one of the field’s option items may be selected simultaneously; if clear, at most one item shall be selected \n    *\n    * @name AcroFormChoiceField#multiSelect\n    * @default false\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'multiSelect', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 22));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 22);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 22);\n        }\n      }\n    });\n    /**\n    * (PDF 1.4) If set, text entered in the field shall not be spellchecked. This flag shall not be used unless the Combo and Edit flags are both set. \n    *\n    * @name AcroFormChoiceField#doNotSpellCheck\n    * @default false\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'doNotSpellCheck', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 23));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 23);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 23);\n        }\n      }\n    });\n    /**\n    * (PDF 1.5) If set, the new value shall be committed as soon as a selection is made (commonly with the pointing device). In this case, supplying a value for a field involves three actions: selecting the field for fill-in, selecting a choice for the fill-in value, and leaving that field, which finalizes or “commits” the data choice and triggers any actions associated with the entry or changing of this data. If this flag is on, then processing does not wait for leaving the field action to occur, but immediately proceeds to the third step.\n    * This option enables applications to perform an action once a selection is made, without requiring the user to exit the field. If clear, the new value is not committed until the user exits the field.\n    *\n    * @name AcroFormChoiceField#commitOnSelChange\n    * @default false\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'commitOnSelChange', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 27));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 27);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 27);\n        }\n      }\n    });\n    this.hasAppearanceStream = false;\n  };\n\n  inherit(AcroFormChoiceField, AcroFormField);\n  /**\n  * @class AcroFormListBox\n  * @extends AcroFormChoiceField\n  * @extends AcroFormField\n  */\n\n  var AcroFormListBox = function AcroFormListBox() {\n    AcroFormChoiceField.call(this);\n    this.fontName = 'helvetica'; //PDF 32000-1:2008, page 444\n\n    this.combo = false;\n  };\n\n  inherit(AcroFormListBox, AcroFormChoiceField);\n  /**\n  * @class AcroFormComboBox \n  * @extends AcroFormListBox\n  * @extends AcroFormChoiceField\n  * @extends AcroFormField\n  */\n\n  var AcroFormComboBox = function AcroFormComboBox() {\n    AcroFormListBox.call(this);\n    this.combo = true;\n  };\n\n  inherit(AcroFormComboBox, AcroFormListBox);\n  /**\n  * @class AcroFormEditBox \n  * @extends AcroFormComboBox\n  * @extends AcroFormListBox\n  * @extends AcroFormChoiceField\n  * @extends AcroFormField\n  */\n\n  var AcroFormEditBox = function AcroFormEditBox() {\n    AcroFormComboBox.call(this);\n    this.edit = true;\n  };\n\n  inherit(AcroFormEditBox, AcroFormComboBox);\n  /**\n  * @class AcroFormButton\n  * @extends AcroFormField\n  */\n\n  var AcroFormButton = function AcroFormButton() {\n    AcroFormField.call(this);\n    this.FT = \"/Btn\";\n    /**\n    * (Radio buttons only) If set, exactly one radio button shall be selected at all times; selecting the currently selected button has no effect. If clear, clicking the selected button deselects it, leaving no button selected.\n    * \n    * @name AcroFormButton#noToggleToOff\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'noToggleToOff', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 15));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 15);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 15);\n        }\n      }\n    });\n    /**\n    * If set, the field is a set of radio buttons; if clear, the field is a checkbox. This flag may be set only if the Pushbutton flag is clear. \n    * \n    * @name AcroFormButton#radio\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'radio', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 16));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 16);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 16);\n        }\n      }\n    });\n    /**\n    * If set, the field is a pushbutton that does not retain a permanent value. \n    *\n    * @name AcroFormButton#pushButton\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'pushButton', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 17));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 17);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 17);\n        }\n      }\n    });\n    /**\n    * (PDF 1.5) If set, a group of radio buttons within a radio button field that use the same value for the on state will turn on and off in unison; that is if one is checked, they are all checked. If clear, the buttons are mutually exclusive (the same behavior as HTML radio buttons).\n    *\n    * @name AcroFormButton#radioIsUnison\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'radioIsUnison', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 26));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 26);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 26);\n        }\n      }\n    });\n    var _MK = {};\n    Object.defineProperty(this, 'MK', {\n      enumerable: false,\n      configurable: false,\n      get: function get() {\n        if (Object.keys(_MK).length !== 0) {\n          var result = [];\n          result.push('<<');\n          var key;\n\n          for (key in _MK) {\n            result.push('/' + key + ' (' + _MK[key] + ')');\n          }\n\n          result.push('>>');\n          return result.join('\\n');\n        }\n\n        return;\n      },\n      set: function set(value) {\n        if (_typeof(value) === \"object\") {\n          _MK = value;\n        }\n      }\n    });\n    /**\n    * From the PDF reference:\n    * (Optional, button fields only) The widget annotation's normal caption which shall be displayed when it is not interacting with the user. \n    * Unlike the remaining entries listed in this Table which apply only to widget annotations associated with pushbutton fields (see Pushbuttons in 12.7.4.2, \"Button Fields\"), the CA entry may be used with any type of button field, including check boxes (see Check Boxes in 12.7.4.2, \"Button Fields\") and radio buttons (Radio Buttons in 12.7.4.2, \"Button Fields\").\n    *\n    * - '8' = Cross, \n    * - 'l' =  Circle,\n    * - '' = nothing\n    * @name AcroFormButton#caption\n    * @type {string}\n    */\n\n    Object.defineProperty(this, 'caption', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return _MK.CA || '';\n      },\n      set: function set(value) {\n        if (typeof value === \"string\") {\n          _MK.CA = value;\n        }\n      }\n    });\n\n    var _AS;\n\n    Object.defineProperty(this, 'AS', {\n      enumerable: false,\n      configurable: false,\n      get: function get() {\n        return _AS;\n      },\n      set: function set(value) {\n        _AS = value;\n      }\n    });\n    /**\n    * (Required if the appearance dictionary AP contains one or more subdictionaries; PDF 1.2) The annotation's appearance state, which selects the applicable appearance stream from an appearance subdictionary (see Section 12.5.5, \"Appearance Streams\")\n    *\n    * @name AcroFormButton#appearanceState\n    * @type {any}\n    */\n\n    Object.defineProperty(this, 'appearanceState', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return _AS.substr(1, _AS.length - 1);\n      },\n      set: function set(value) {\n        _AS = '/' + value;\n      }\n    });\n  };\n\n  inherit(AcroFormButton, AcroFormField);\n  /**\n  * @class AcroFormPushButton\n  * @extends AcroFormButton\n  * @extends AcroFormField\n  */\n\n  var AcroFormPushButton = function AcroFormPushButton() {\n    AcroFormButton.call(this);\n    this.pushButton = true;\n  };\n\n  inherit(AcroFormPushButton, AcroFormButton);\n  /**\n  * @class AcroFormRadioButton\n  * @extends AcroFormButton\n  * @extends AcroFormField\n  */\n\n  var AcroFormRadioButton = function AcroFormRadioButton() {\n    AcroFormButton.call(this);\n    this.radio = true;\n    this.pushButton = false;\n    var _Kids = [];\n    Object.defineProperty(this, 'Kids', {\n      enumerable: true,\n      configurable: false,\n      get: function get() {\n        return _Kids;\n      },\n      set: function set(value) {\n        if (typeof value !== \"undefined\") {\n          _Kids = value;\n        } else {\n          _Kids = [];\n        }\n      }\n    });\n  };\n\n  inherit(AcroFormRadioButton, AcroFormButton);\n  /**\n  * The Child class of a RadioButton (the radioGroup) -> The single Buttons\n  * \n  * @class AcroFormChildClass\n  * @extends AcroFormField\n  * @ignore\n  */\n\n  var AcroFormChildClass = function AcroFormChildClass() {\n    AcroFormField.call(this);\n\n    var _parent;\n\n    Object.defineProperty(this, 'Parent', {\n      enumerable: false,\n      configurable: false,\n      get: function get() {\n        return _parent;\n      },\n      set: function set(value) {\n        _parent = value;\n      }\n    });\n\n    var _optionName;\n\n    Object.defineProperty(this, 'optionName', {\n      enumerable: false,\n      configurable: true,\n      get: function get() {\n        return _optionName;\n      },\n      set: function set(value) {\n        _optionName = value;\n      }\n    });\n    var _MK = {};\n    Object.defineProperty(this, 'MK', {\n      enumerable: false,\n      configurable: false,\n      get: function get() {\n        var result = [];\n        result.push('<<');\n        var key;\n\n        for (key in _MK) {\n          result.push('/' + key + ' (' + _MK[key] + ')');\n        }\n\n        result.push('>>');\n        return result.join('\\n');\n      },\n      set: function set(value) {\n        if (_typeof(value) === \"object\") {\n          _MK = value;\n        }\n      }\n    });\n    /**\n    * From the PDF reference:\n    * (Optional, button fields only) The widget annotation's normal caption which shall be displayed when it is not interacting with the user. \n    * Unlike the remaining entries listed in this Table which apply only to widget annotations associated with pushbutton fields (see Pushbuttons in 12.7.4.2, \"Button Fields\"), the CA entry may be used with any type of button field, including check boxes (see Check Boxes in 12.7.4.2, \"Button Fields\") and radio buttons (Radio Buttons in 12.7.4.2, \"Button Fields\").\n    *\n    * - '8' = Cross, \n    * - 'l' =  Circle,\n    * - '' = nothing\n    * @name AcroFormButton#caption\n    * @type {string}\n    */\n\n    Object.defineProperty(this, 'caption', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return _MK.CA || '';\n      },\n      set: function set(value) {\n        if (typeof value === \"string\") {\n          _MK.CA = value;\n        }\n      }\n    });\n\n    var _AS;\n\n    Object.defineProperty(this, 'AS', {\n      enumerable: false,\n      configurable: false,\n      get: function get() {\n        return _AS;\n      },\n      set: function set(value) {\n        _AS = value;\n      }\n    });\n    /**\n    * (Required if the appearance dictionary AP contains one or more subdictionaries; PDF 1.2) The annotation's appearance state, which selects the applicable appearance stream from an appearance subdictionary (see Section 12.5.5, \"Appearance Streams\")\n    *\n    * @name AcroFormButton#appearanceState\n    * @type {any}\n    */\n\n    Object.defineProperty(this, 'appearanceState', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return _AS.substr(1, _AS.length - 1);\n      },\n      set: function set(value) {\n        _AS = '/' + value;\n      }\n    });\n    this.optionName = name;\n    this.caption = 'l';\n    this.appearanceState = 'Off'; // todo: set AppearanceType as variable that can be set from the\n    // outside...\n\n    this._AppearanceType = AcroFormAppearance.RadioButton.Circle; // The Default appearanceType is the Circle\n\n    this.appearanceStreamContent = this._AppearanceType.createAppearanceStream(name);\n  };\n\n  inherit(AcroFormChildClass, AcroFormField);\n\n  AcroFormRadioButton.prototype.setAppearance = function (appearance) {\n    if (!('createAppearanceStream' in appearance && 'getCA' in appearance)) {\n      throw new Error(\"Couldn't assign Appearance to RadioButton. Appearance was Invalid!\");\n      return;\n    }\n\n    for (var objId in this.Kids) {\n      if (this.Kids.hasOwnProperty(objId)) {\n        var child = this.Kids[objId];\n        child.appearanceStreamContent = appearance.createAppearanceStream(child.optionName);\n        child.caption = appearance.getCA();\n      }\n    }\n  };\n\n  AcroFormRadioButton.prototype.createOption = function (name) {\n    var kidCount = this.Kids.length; // Create new Child for RadioGroup\n\n    var child = new AcroFormChildClass();\n    child.Parent = this;\n    child.optionName = name; // Add to Parent\n\n    this.Kids.push(child);\n    addField.call(this, child);\n    return child;\n  };\n  /**\n  * @class AcroFormCheckBox\n  * @extends AcroFormButton\n  * @extends AcroFormField\n  */\n\n\n  var AcroFormCheckBox = function AcroFormCheckBox() {\n    AcroFormButton.call(this);\n    this.fontName = 'zapfdingbats';\n    this.caption = '3';\n    this.appearanceState = 'On';\n    this.value = \"On\";\n    this.textAlign = 'center';\n    this.appearanceStreamContent = AcroFormAppearance.CheckBox.createAppearanceStream();\n  };\n\n  inherit(AcroFormCheckBox, AcroFormButton);\n  /**\n  * @class AcroFormTextField\n  * @extends AcroFormField\n  */\n\n  var AcroFormTextField = function AcroFormTextField() {\n    AcroFormField.call(this);\n    this.FT = '/Tx';\n    /**\n    * If set, the field may contain multiple lines of text; if clear, the field’s text shall be restricted to a single line. \n    *\n    * @name AcroFormTextField#multiline\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'multiline', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 13));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 13);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 13);\n        }\n      }\n    });\n    /**\n    * (PDF 1.4) If set, the text entered in the field represents the pathname of a file whose contents shall be submitted as the value of the field. \n    * \n    * @name AcroFormTextField#fileSelect\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'fileSelect', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 21));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 21);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 21);\n        }\n      }\n    });\n    /**\n    * (PDF 1.4) If set, text entered in the field shall not be spell-checked. \n    *\n    * @name AcroFormTextField#doNotSpellCheck\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'doNotSpellCheck', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 23));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 23);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 23);\n        }\n      }\n    });\n    /**\n    * (PDF 1.4) If set, the field shall not scroll (horizontally for single-line fields, vertically for multiple-line fields) to accommodate more text than fits within its annotation rectangle. Once the field is full, no further text shall be accepted for interactive form filling; for noninteractive form filling, the filler should take care not to add more character than will visibly fit in the defined area. \n    * \n    * @name AcroFormTextField#doNotScroll\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'doNotScroll', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 24));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 24);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 24);\n        }\n      }\n    });\n    /**\n    * (PDF 1.5) May be set only if the MaxLen entry is present in the text field dictionary (see Table 229) and if the Multiline, Password, and FileSelect flags are clear. If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs.\n    * \n    * @name AcroFormTextField#comb\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'comb', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 25));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 25);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 25);\n        }\n      }\n    });\n    /**\n    * (PDF 1.5) If set, the value of this field shall be a rich text string (see 12.7.3.4, “Rich Text Strings”). If the field has a value, the RV entry of the field dictionary (Table 222) shall specify the rich text string.\n    * \n    * @name AcroFormTextField#richText\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'richText', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 26));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 26);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 26);\n        }\n      }\n    });\n    var _MaxLen = null;\n    Object.defineProperty(this, 'MaxLen', {\n      enumerable: true,\n      configurable: false,\n      get: function get() {\n        return _MaxLen;\n      },\n      set: function set(value) {\n        _MaxLen = value;\n      }\n    });\n    /**\n    * (Optional; inheritable) The maximum length of the field’s text, in characters. \n    *\n    * @name AcroFormTextField#maxLength\n    * @type {number}\n    */\n\n    Object.defineProperty(this, 'maxLength', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return _MaxLen;\n      },\n      set: function set(value) {\n        if (Number.isInteger(value)) {\n          _MaxLen = value;\n        }\n      }\n    });\n    Object.defineProperty(this, 'hasAppearanceStream', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return this.V || this.DV;\n      }\n    });\n  };\n\n  inherit(AcroFormTextField, AcroFormField);\n  /**\n  * @class AcroFormPasswordField\n  * @extends AcroFormTextField\n  * @extends AcroFormField\n  */\n\n  var AcroFormPasswordField = function AcroFormPasswordField() {\n    AcroFormTextField.call(this);\n    /**\n    * If set, the field is intended for entering a secure password that should not be echoed visibly to the screen. Characters typed from the keyboard shall instead be echoed in some unreadable form, such as asterisks or bullet characters.\n    * NOTE To protect password confidentiality, readers should never store the value of the text field in the PDF file if this flag is set. \n    *\n    * @name AcroFormTextField#password\n    * @type {boolean}\n    */\n\n    Object.defineProperty(this, 'password', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return Boolean(getBitForPdf(this.Ff, 14));\n      },\n      set: function set(value) {\n        if (Boolean(value) === true) {\n          this.Ff = setBitForPdf(this.Ff, 14);\n        } else {\n          this.Ff = clearBitForPdf(this.Ff, 14);\n        }\n      }\n    });\n    this.password = true;\n  };\n\n  inherit(AcroFormPasswordField, AcroFormTextField); // Contains Methods for creating standard appearances\n\n  var AcroFormAppearance = {\n    CheckBox: {\n      createAppearanceStream: function createAppearanceStream() {\n        var appearance = {\n          N: {\n            On: AcroFormAppearance.CheckBox.YesNormal\n          },\n          D: {\n            On: AcroFormAppearance.CheckBox.YesPushDown,\n            Off: AcroFormAppearance.CheckBox.OffPushDown\n          }\n        };\n        return appearance;\n      },\n\n      /**\n        * Returns the standard On Appearance for a CheckBox\n        * \n        * @returns {AcroFormXObject}\n        */\n      YesPushDown: function YesPushDown(formObject) {\n        var xobj = createFormXObject(formObject);\n        var stream = [];\n        var fontKey = scope.internal.getFont(formObject.fontName, formObject.fontStyle).id;\n\n        var encodedColor = scope.__private__.encodeColorString(formObject.color);\n\n        var calcRes = calculateX(formObject, formObject.caption);\n        stream.push(\"0.749023 g\");\n        stream.push(\"0 0 \" + f2(AcroFormAppearance.internal.getWidth(formObject)) + \" \" + f2(AcroFormAppearance.internal.getHeight(formObject)) + \" re\");\n        stream.push(\"f\");\n        stream.push(\"BMC\");\n        stream.push(\"q\");\n        stream.push(\"0 0 1 rg\");\n        stream.push(\"/\" + fontKey + \" \" + f2(calcRes.fontSize) + \" Tf \" + encodedColor);\n        stream.push(\"BT\");\n        stream.push(calcRes.text);\n        stream.push(\"ET\");\n        stream.push(\"Q\");\n        stream.push(\"EMC\");\n        xobj.stream = stream.join(\"\\n\");\n        return xobj;\n      },\n      YesNormal: function YesNormal(formObject) {\n        var xobj = createFormXObject(formObject);\n        var fontKey = scope.internal.getFont(formObject.fontName, formObject.fontStyle).id;\n\n        var encodedColor = scope.__private__.encodeColorString(formObject.color);\n\n        var stream = [];\n        var height = AcroFormAppearance.internal.getHeight(formObject);\n        var width = AcroFormAppearance.internal.getWidth(formObject);\n        var calcRes = calculateX(formObject, formObject.caption);\n        stream.push(\"1 g\");\n        stream.push(\"0 0 \" + f2(width) + \" \" + f2(height) + \" re\");\n        stream.push(\"f\");\n        stream.push(\"q\");\n        stream.push(\"0 0 1 rg\");\n        stream.push(\"0 0 \" + f2(width - 1) + \" \" + f2(height - 1) + \" re\");\n        stream.push(\"W\");\n        stream.push(\"n\");\n        stream.push(\"0 g\");\n        stream.push(\"BT\");\n        stream.push(\"/\" + fontKey + \" \" + f2(calcRes.fontSize) + \" Tf \" + encodedColor);\n        stream.push(calcRes.text);\n        stream.push(\"ET\");\n        stream.push(\"Q\");\n        xobj.stream = stream.join(\"\\n\");\n        return xobj;\n      },\n\n      /**\n        * Returns the standard Off Appearance for a CheckBox\n        * \n        * @returns {AcroFormXObject}\n        */\n      OffPushDown: function OffPushDown(formObject) {\n        var xobj = createFormXObject(formObject);\n        var stream = [];\n        stream.push(\"0.749023 g\");\n        stream.push(\"0 0 \" + f2(AcroFormAppearance.internal.getWidth(formObject)) + \" \" + f2(AcroFormAppearance.internal.getHeight(formObject)) + \" re\");\n        stream.push(\"f\");\n        xobj.stream = stream.join(\"\\n\");\n        return xobj;\n      }\n    },\n    RadioButton: {\n      Circle: {\n        createAppearanceStream: function createAppearanceStream(name) {\n          var appearanceStreamContent = {\n            D: {\n              'Off': AcroFormAppearance.RadioButton.Circle.OffPushDown\n            },\n            N: {}\n          };\n          appearanceStreamContent.N[name] = AcroFormAppearance.RadioButton.Circle.YesNormal;\n          appearanceStreamContent.D[name] = AcroFormAppearance.RadioButton.Circle.YesPushDown;\n          return appearanceStreamContent;\n        },\n        getCA: function getCA() {\n          return 'l';\n        },\n        YesNormal: function YesNormal(formObject) {\n          var xobj = createFormXObject(formObject);\n          var stream = []; // Make the Radius of the Circle relative to min(height, width) of formObject\n\n          var DotRadius = AcroFormAppearance.internal.getWidth(formObject) <= AcroFormAppearance.internal.getHeight(formObject) ? AcroFormAppearance.internal.getWidth(formObject) / 4 : AcroFormAppearance.internal.getHeight(formObject) / 4; // The Borderpadding...\n\n          DotRadius = Number((DotRadius * 0.9).toFixed(5));\n          var c = AcroFormAppearance.internal.Bezier_C;\n          var DotRadiusBezier = Number((DotRadius * c).toFixed(5));\n          /*\n            * The Following is a Circle created with Bezier-Curves.\n            */\n\n          stream.push(\"q\");\n          stream.push(\"1 0 0 1 \" + f5(AcroFormAppearance.internal.getWidth(formObject) / 2) + \" \" + f5(AcroFormAppearance.internal.getHeight(formObject) / 2) + \" cm\");\n          stream.push(DotRadius + \" 0 m\");\n          stream.push(DotRadius + \" \" + DotRadiusBezier + \" \" + DotRadiusBezier + \" \" + DotRadius + \" 0 \" + DotRadius + \" c\");\n          stream.push(\"-\" + DotRadiusBezier + \" \" + DotRadius + \" -\" + DotRadius + \" \" + DotRadiusBezier + \" -\" + DotRadius + \" 0 c\");\n          stream.push(\"-\" + DotRadius + \" -\" + DotRadiusBezier + \" -\" + DotRadiusBezier + \" -\" + DotRadius + \" 0 -\" + DotRadius + \" c\");\n          stream.push(DotRadiusBezier + \" -\" + DotRadius + \" \" + DotRadius + \" -\" + DotRadiusBezier + \" \" + DotRadius + \" 0 c\");\n          stream.push(\"f\");\n          stream.push(\"Q\");\n          xobj.stream = stream.join(\"\\n\");\n          return xobj;\n        },\n        YesPushDown: function YesPushDown(formObject) {\n          var xobj = createFormXObject(formObject);\n          var stream = [];\n          var DotRadius = AcroFormAppearance.internal.getWidth(formObject) <= AcroFormAppearance.internal.getHeight(formObject) ? AcroFormAppearance.internal.getWidth(formObject) / 4 : AcroFormAppearance.internal.getHeight(formObject) / 4; // The Borderpadding...\n\n          var DotRadius = Number((DotRadius * 0.9).toFixed(5)); // Save results for later use; no need to waste\n          // processor ticks on doing math\n\n          var k = Number((DotRadius * 2).toFixed(5));\n          var kc = Number((k * AcroFormAppearance.internal.Bezier_C).toFixed(5));\n          var dc = Number((DotRadius * AcroFormAppearance.internal.Bezier_C).toFixed(5));\n          stream.push(\"0.749023 g\");\n          stream.push(\"q\");\n          stream.push(\"1 0 0 1 \" + f5(AcroFormAppearance.internal.getWidth(formObject) / 2) + \" \" + f5(AcroFormAppearance.internal.getHeight(formObject) / 2) + \" cm\");\n          stream.push(k + \" 0 m\");\n          stream.push(k + \" \" + kc + \" \" + kc + \" \" + k + \" 0 \" + k + \" c\");\n          stream.push(\"-\" + kc + \" \" + k + \" -\" + k + \" \" + kc + \" -\" + k + \" 0 c\");\n          stream.push(\"-\" + k + \" -\" + kc + \" -\" + kc + \" -\" + k + \" 0 -\" + k + \" c\");\n          stream.push(kc + \" -\" + k + \" \" + k + \" -\" + kc + \" \" + k + \" 0 c\");\n          stream.push(\"f\");\n          stream.push(\"Q\");\n          stream.push(\"0 g\");\n          stream.push(\"q\");\n          stream.push(\"1 0 0 1 \" + f5(AcroFormAppearance.internal.getWidth(formObject) / 2) + \" \" + f5(AcroFormAppearance.internal.getHeight(formObject) / 2) + \" cm\");\n          stream.push(DotRadius + \" 0 m\");\n          stream.push(\"\" + DotRadius + \" \" + dc + \" \" + dc + \" \" + DotRadius + \" 0 \" + DotRadius + \" c\");\n          stream.push(\"-\" + dc + \" \" + DotRadius + \" -\" + DotRadius + \" \" + dc + \" -\" + DotRadius + \" 0 c\");\n          stream.push(\"-\" + DotRadius + \" -\" + dc + \" -\" + dc + \" -\" + DotRadius + \" 0 -\" + DotRadius + \" c\");\n          stream.push(dc + \" -\" + DotRadius + \" \" + DotRadius + \" -\" + dc + \" \" + DotRadius + \" 0 c\");\n          stream.push(\"f\");\n          stream.push(\"Q\");\n          xobj.stream = stream.join(\"\\n\");\n          return xobj;\n        },\n        OffPushDown: function OffPushDown(formObject) {\n          var xobj = createFormXObject(formObject);\n          var stream = [];\n          var DotRadius = AcroFormAppearance.internal.getWidth(formObject) <= AcroFormAppearance.internal.getHeight(formObject) ? AcroFormAppearance.internal.getWidth(formObject) / 4 : AcroFormAppearance.internal.getHeight(formObject) / 4; // The Borderpadding...\n\n          var DotRadius = Number((DotRadius * 0.9).toFixed(5)); // Save results for later use; no need to waste\n          // processor ticks on doing math\n\n          var k = Number((DotRadius * 2).toFixed(5));\n          var kc = Number((k * AcroFormAppearance.internal.Bezier_C).toFixed(5));\n          stream.push(\"0.749023 g\");\n          stream.push(\"q\");\n          stream.push(\"1 0 0 1 \" + f5(AcroFormAppearance.internal.getWidth(formObject) / 2) + \" \" + f5(AcroFormAppearance.internal.getHeight(formObject) / 2) + \" cm\");\n          stream.push(k + \" 0 m\");\n          stream.push(k + \" \" + kc + \" \" + kc + \" \" + k + \" 0 \" + k + \" c\");\n          stream.push(\"-\" + kc + \" \" + k + \" -\" + k + \" \" + kc + \" -\" + k + \" 0 c\");\n          stream.push(\"-\" + k + \" -\" + kc + \" -\" + kc + \" -\" + k + \" 0 -\" + k + \" c\");\n          stream.push(kc + \" -\" + k + \" \" + k + \" -\" + kc + \" \" + k + \" 0 c\");\n          stream.push(\"f\");\n          stream.push(\"Q\");\n          xobj.stream = stream.join(\"\\n\");\n          return xobj;\n        }\n      },\n      Cross: {\n        /**\n          * Creates the Actual AppearanceDictionary-References\n          * \n          * @param {string} name\n          * @returns {Object}\n          * @ignore\n          */\n        createAppearanceStream: function createAppearanceStream(name) {\n          var appearanceStreamContent = {\n            D: {\n              'Off': AcroFormAppearance.RadioButton.Cross.OffPushDown\n            },\n            N: {}\n          };\n          appearanceStreamContent.N[name] = AcroFormAppearance.RadioButton.Cross.YesNormal;\n          appearanceStreamContent.D[name] = AcroFormAppearance.RadioButton.Cross.YesPushDown;\n          return appearanceStreamContent;\n        },\n        getCA: function getCA() {\n          return '8';\n        },\n        YesNormal: function YesNormal(formObject) {\n          var xobj = createFormXObject(formObject);\n          var stream = [];\n          var cross = AcroFormAppearance.internal.calculateCross(formObject);\n          stream.push(\"q\");\n          stream.push(\"1 1 \" + f2(AcroFormAppearance.internal.getWidth(formObject) - 2) + \" \" + f2(AcroFormAppearance.internal.getHeight(formObject) - 2) + \" re\");\n          stream.push(\"W\");\n          stream.push(\"n\");\n          stream.push(f2(cross.x1.x) + \" \" + f2(cross.x1.y) + \" m\");\n          stream.push(f2(cross.x2.x) + \" \" + f2(cross.x2.y) + \" l\");\n          stream.push(f2(cross.x4.x) + \" \" + f2(cross.x4.y) + \" m\");\n          stream.push(f2(cross.x3.x) + \" \" + f2(cross.x3.y) + \" l\");\n          stream.push(\"s\");\n          stream.push(\"Q\");\n          xobj.stream = stream.join(\"\\n\");\n          return xobj;\n        },\n        YesPushDown: function YesPushDown(formObject) {\n          var xobj = createFormXObject(formObject);\n          var cross = AcroFormAppearance.internal.calculateCross(formObject);\n          var stream = [];\n          stream.push(\"0.749023 g\");\n          stream.push(\"0 0 \" + f2(AcroFormAppearance.internal.getWidth(formObject)) + \" \" + f2(AcroFormAppearance.internal.getHeight(formObject)) + \" re\");\n          stream.push(\"f\");\n          stream.push(\"q\");\n          stream.push(\"1 1 \" + f2(AcroFormAppearance.internal.getWidth(formObject) - 2) + \" \" + f2(AcroFormAppearance.internal.getHeight(formObject) - 2) + \" re\");\n          stream.push(\"W\");\n          stream.push(\"n\");\n          stream.push(f2(cross.x1.x) + \" \" + f2(cross.x1.y) + \" m\");\n          stream.push(f2(cross.x2.x) + \" \" + f2(cross.x2.y) + \" l\");\n          stream.push(f2(cross.x4.x) + \" \" + f2(cross.x4.y) + \" m\");\n          stream.push(f2(cross.x3.x) + \" \" + f2(cross.x3.y) + \" l\");\n          stream.push(\"s\");\n          stream.push(\"Q\");\n          xobj.stream = stream.join(\"\\n\");\n          return xobj;\n        },\n        OffPushDown: function OffPushDown(formObject) {\n          var xobj = createFormXObject(formObject);\n          var stream = [];\n          stream.push(\"0.749023 g\");\n          stream.push(\"0 0 \" + f2(AcroFormAppearance.internal.getWidth(formObject)) + \" \" + f2(AcroFormAppearance.internal.getHeight(formObject)) + \" re\");\n          stream.push(\"f\");\n          xobj.stream = stream.join(\"\\n\");\n          return xobj;\n        }\n      }\n    },\n\n    /**\n      * Returns the standard Appearance\n      * \n      * @returns {AcroFormXObject}\n      */\n    createDefaultAppearanceStream: function createDefaultAppearanceStream(formObject) {\n      // Set Helvetica to Standard Font (size: auto)\n      // Color: Black\n      var fontKey = scope.internal.getFont(formObject.fontName, formObject.fontStyle).id;\n\n      var encodedColor = scope.__private__.encodeColorString(formObject.color);\n\n      var fontSize = formObject.fontSize;\n      var result = '/' + fontKey + ' ' + fontSize + ' Tf ' + encodedColor;\n      return result;\n    }\n  };\n  AcroFormAppearance.internal = {\n    Bezier_C: 0.551915024494,\n    calculateCross: function calculateCross(formObject) {\n      var width = AcroFormAppearance.internal.getWidth(formObject);\n      var height = AcroFormAppearance.internal.getHeight(formObject);\n      var a = Math.min(width, height);\n\n      var cross = {\n        x1: {\n          // upperLeft\n          x: (width - a) / 2,\n          y: (height - a) / 2 + a // height - borderPadding\n\n        },\n        x2: {\n          // lowerRight\n          x: (width - a) / 2 + a,\n          y: (height - a) / 2 // borderPadding\n\n        },\n        x3: {\n          // lowerLeft\n          x: (width - a) / 2,\n          y: (height - a) / 2 // borderPadding\n\n        },\n        x4: {\n          // upperRight\n          x: (width - a) / 2 + a,\n          y: (height - a) / 2 + a // height - borderPadding\n\n        }\n      };\n      return cross;\n    }\n  };\n\n  AcroFormAppearance.internal.getWidth = function (formObject) {\n    var result = 0;\n\n    if (_typeof(formObject) === \"object\") {\n      result = scale(formObject.Rect[2]);\n    }\n\n    return result;\n  };\n\n  AcroFormAppearance.internal.getHeight = function (formObject) {\n    var result = 0;\n\n    if (_typeof(formObject) === \"object\") {\n      result = scale(formObject.Rect[3]);\n    }\n\n    return result;\n  }; // Public:\n\n  /**\n  * Add an AcroForm-Field to the jsPDF-instance\n  *\n  * @name addField\n  * @function \n  * @instance\n  * @param {Object} fieldObject\n  * @returns {jsPDF}\n  */\n\n\n  var addField = jsPDFAPI.addField = function (fieldObject) {\n    initializeAcroForm.call(this);\n\n    if (fieldObject instanceof AcroFormField) {\n      putForm.call(this, fieldObject);\n    } else {\n      throw new Error('Invalid argument passed to jsPDF.addField.');\n    }\n\n    fieldObject.page = scope.internal.getCurrentPageInfo().pageNumber;\n    return this;\n  };\n  /**\n  * @name addButton\n  * @function\n  * @instance\n  * @param {AcroFormButton} options\n  * @returns {jsPDF}\n  * @deprecated\n  */\n\n\n  var addButton = jsPDFAPI.addButton = function (button) {\n    if (button instanceof AcroFormButton === false) {\n      throw new Error('Invalid argument passed to jsPDF.addButton.');\n    }\n\n    return addField.call(this, button);\n  };\n  /**\n  * @name addTextField\n  * @function\n  * @instance\n  * @param {AcroFormTextField} textField\n  * @returns {jsPDF}\n  * @deprecated\n  */\n\n\n  var addTextField = jsPDFAPI.addTextField = function (textField) {\n    if (textField instanceof AcroFormTextField === false) {\n      throw new Error('Invalid argument passed to jsPDF.addTextField.');\n    }\n\n    return addField.call(this, textField);\n  };\n  /**\n  * @name addChoiceField\n  * @function\n  * @instance\n  * @param {AcroFormChoiceField} \n  * @returns {jsPDF}\n  * @deprecated\n  */\n\n\n  var addChoiceField = jsPDFAPI.addChoiceField = function (choiceField) {\n    if (choiceField instanceof AcroFormChoiceField === false) {\n      throw new Error('Invalid argument passed to jsPDF.addChoiceField.');\n    }\n\n    return addField.call(this, choiceField);\n  };\n\n  if (_typeof(globalObj) == \"object\" && typeof globalObj[\"ChoiceField\"] === \"undefined\" && typeof globalObj[\"ListBox\"] === \"undefined\" && typeof globalObj[\"ComboBox\"] === \"undefined\" && typeof globalObj[\"EditBox\"] === \"undefined\" && typeof globalObj[\"Button\"] === \"undefined\" && typeof globalObj[\"PushButton\"] === \"undefined\" && typeof globalObj[\"RadioButton\"] === \"undefined\" && typeof globalObj[\"CheckBox\"] === \"undefined\" && typeof globalObj[\"TextField\"] === \"undefined\" && typeof globalObj[\"PasswordField\"] === \"undefined\") {\n    globalObj[\"ChoiceField\"] = AcroFormChoiceField;\n    globalObj[\"ListBox\"] = AcroFormListBox;\n    globalObj[\"ComboBox\"] = AcroFormComboBox;\n    globalObj[\"EditBox\"] = AcroFormEditBox;\n    globalObj[\"Button\"] = AcroFormButton;\n    globalObj[\"PushButton\"] = AcroFormPushButton;\n    globalObj[\"RadioButton\"] = AcroFormRadioButton;\n    globalObj[\"CheckBox\"] = AcroFormCheckBox;\n    globalObj[\"TextField\"] = AcroFormTextField;\n    globalObj[\"PasswordField\"] = AcroFormPasswordField; // backwardsCompatibility\n\n    globalObj[\"AcroForm\"] = {\n      Appearance: AcroFormAppearance\n    };\n  } else {\n    console.warn(\"AcroForm-Classes are not populated into global-namespace, because the class-Names exist already.\");\n  }\n\n  jsPDFAPI.AcroFormChoiceField = AcroFormChoiceField;\n  jsPDFAPI.AcroFormListBox = AcroFormListBox;\n  jsPDFAPI.AcroFormComboBox = AcroFormComboBox;\n  jsPDFAPI.AcroFormEditBox = AcroFormEditBox;\n  jsPDFAPI.AcroFormButton = AcroFormButton;\n  jsPDFAPI.AcroFormPushButton = AcroFormPushButton;\n  jsPDFAPI.AcroFormRadioButton = AcroFormRadioButton;\n  jsPDFAPI.AcroFormCheckBox = AcroFormCheckBox;\n  jsPDFAPI.AcroFormTextField = AcroFormTextField;\n  jsPDFAPI.AcroFormPasswordField = AcroFormPasswordField;\n  jsPDFAPI.AcroFormAppearance = AcroFormAppearance;\n  jsPDFAPI.AcroForm = {\n    ChoiceField: AcroFormChoiceField,\n    ListBox: AcroFormListBox,\n    ComboBox: AcroFormComboBox,\n    EditBox: AcroFormEditBox,\n    Button: AcroFormButton,\n    PushButton: AcroFormPushButton,\n    RadioButton: AcroFormRadioButton,\n    CheckBox: AcroFormCheckBox,\n    TextField: AcroFormTextField,\n    PasswordField: AcroFormPasswordField,\n    Appearance: AcroFormAppearance\n  };\n})(jsPDF.API, typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global);\n\n/** @license\n * jsPDF addImage plugin\n * Copyright (c) 2012 Jason Siefken, https://github.com/siefkenj/\n *               2013 Chris Dowling, https://github.com/gingerchris\n *               2013 Trinh Ho, https://github.com/ineedfat\n *               2013 Edwin Alejandro Perez, https://github.com/eaparango\n *               2013 Norah Smith, https://github.com/burnburnrocket\n *               2014 Diego Casorran, https://github.com/diegocr\n *               2014 James Robb, https://github.com/jamesbrobb\n *\n * \n */\n\n/**\n* @name addImage\n* @module\n*/\n(function (jsPDFAPI) {\n\n  var namespace = 'addImage_';\n  var imageFileTypeHeaders = {\n    PNG: [[0x89, 0x50, 0x4e, 0x47]],\n    TIFF: [[0x4D, 0x4D, 0x00, 0x2A], //Motorola\n    [0x49, 0x49, 0x2A, 0x00] //Intel\n    ],\n    JPEG: [[0xFF, 0xD8, 0xFF, 0xE0, undefined, undefined, 0x4A, 0x46, 0x49, 0x46, 0x00], //JFIF\n    [0xFF, 0xD8, 0xFF, 0xE1, undefined, undefined, 0x45, 0x78, 0x69, 0x66, 0x00, 0x00] //Exif\n    ],\n    JPEG2000: [[0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20]],\n    GIF87a: [[0x47, 0x49, 0x46, 0x38, 0x37, 0x61]],\n    GIF89a: [[0x47, 0x49, 0x46, 0x38, 0x39, 0x61]],\n    BMP: [[0x42, 0x4D], //BM - Windows 3.1x, 95, NT, ... etc.\n    [0x42, 0x41], //BA - OS/2 struct bitmap array\n    [0x43, 0x49], //CI - OS/2 struct color icon\n    [0x43, 0x50], //CP - OS/2 const color pointer\n    [0x49, 0x43], //IC - OS/2 struct icon\n    [0x50, 0x54] //PT - OS/2 pointer\n    ]\n  };\n  /**\n  * Recognize filetype of Image by magic-bytes\n  * \n  * https://en.wikipedia.org/wiki/List_of_file_signatures\n  *\n  * @name getImageFileTypeByImageData\n  * @public\n  * @function\n  * @param {string|arraybuffer} imageData imageData as binary String or arraybuffer\n  * @param {string} format format of file if filetype-recognition fails, e.g. 'JPEG'\n  * \n  * @returns {string} filetype of Image\n  */\n\n  var getImageFileTypeByImageData = jsPDFAPI.getImageFileTypeByImageData = function (imageData, fallbackFormat) {\n    fallbackFormat = fallbackFormat || 'UNKNOWN';\n    var i;\n    var j;\n    var result = 'UNKNOWN';\n    var headerSchemata;\n    var compareResult;\n    var fileType;\n\n    if (jsPDFAPI.isArrayBufferView(imageData)) {\n      imageData = jsPDFAPI.arrayBufferToBinaryString(imageData);\n    }\n\n    for (fileType in imageFileTypeHeaders) {\n      headerSchemata = imageFileTypeHeaders[fileType];\n\n      for (i = 0; i < headerSchemata.length; i += 1) {\n        compareResult = true;\n\n        for (j = 0; j < headerSchemata[i].length; j += 1) {\n          if (headerSchemata[i][j] === undefined) {\n            continue;\n          }\n\n          if (headerSchemata[i][j] !== imageData.charCodeAt(j)) {\n            compareResult = false;\n            break;\n          }\n        }\n\n        if (compareResult === true) {\n          result = fileType;\n          break;\n        }\n      }\n    }\n\n    if (result === 'UNKNOWN' && fallbackFormat !== 'UNKNOWN') {\n      console.warn('FileType of Image not recognized. Processing image as \"' + fallbackFormat + '\".');\n      result = fallbackFormat;\n    }\n\n    return result;\n  }; // Image functionality ported from pdf.js\n\n\n  var putImage = function putImage(img) {\n    var objectNumber = this.internal.newObject(),\n        out = this.internal.write,\n        putStream = this.internal.putStream,\n        getFilters = this.internal.getFilters;\n    var filters = getFilters();\n\n    while (filters.indexOf('FlateEncode') !== -1) {\n      filters.splice(filters.indexOf('FlateEncode'), 1);\n    }\n\n    img['n'] = objectNumber;\n    var additionalKeyValues = [];\n    additionalKeyValues.push({\n      key: 'Type',\n      value: '/XObject'\n    });\n    additionalKeyValues.push({\n      key: 'Subtype',\n      value: '/Image'\n    });\n    additionalKeyValues.push({\n      key: 'Width',\n      value: img['w']\n    });\n    additionalKeyValues.push({\n      key: 'Height',\n      value: img['h']\n    });\n\n    if (img['cs'] === this.color_spaces.INDEXED) {\n      additionalKeyValues.push({\n        key: 'ColorSpace',\n        value: '[/Indexed /DeviceRGB ' // if an indexed png defines more than one colour with transparency, we've created a smask\n        + (img['pal'].length / 3 - 1) + ' ' + ('smask' in img ? objectNumber + 2 : objectNumber + 1) + ' 0 R]'\n      });\n    } else {\n      additionalKeyValues.push({\n        key: 'ColorSpace',\n        value: '/' + img['cs']\n      });\n\n      if (img['cs'] === this.color_spaces.DEVICE_CMYK) {\n        additionalKeyValues.push({\n          key: 'Decode',\n          value: '[1 0 1 0 1 0 1 0]'\n        });\n      }\n    }\n\n    additionalKeyValues.push({\n      key: 'BitsPerComponent',\n      value: img['bpc']\n    });\n\n    if ('dp' in img) {\n      additionalKeyValues.push({\n        key: 'DecodeParms',\n        value: '<<' + img['dp'] + '>>'\n      });\n    }\n\n    if ('trns' in img && img['trns'].constructor == Array) {\n      var trns = '',\n          i = 0,\n          len = img['trns'].length;\n\n      for (; i < len; i++) {\n        trns += img['trns'][i] + ' ' + img['trns'][i] + ' ';\n      }\n\n      additionalKeyValues.push({\n        key: 'Mask',\n        value: '[' + trns + ']'\n      });\n    }\n\n    if ('smask' in img) {\n      additionalKeyValues.push({\n        key: 'SMask',\n        value: objectNumber + 1 + ' 0 R'\n      });\n    }\n\n    var alreadyAppliedFilters = typeof img['f'] !== \"undefined\" ? ['/' + img['f']] : undefined;\n    putStream({\n      data: img['data'],\n      additionalKeyValues: additionalKeyValues,\n      alreadyAppliedFilters: alreadyAppliedFilters\n    });\n    out('endobj'); // Soft mask\n\n    if ('smask' in img) {\n      var dp = '/Predictor ' + img['p'] + ' /Colors 1 /BitsPerComponent ' + img['bpc'] + ' /Columns ' + img['w'];\n      var smask = {\n        'w': img['w'],\n        'h': img['h'],\n        'cs': 'DeviceGray',\n        'bpc': img['bpc'],\n        'dp': dp,\n        'data': img['smask']\n      };\n      if ('f' in img) smask.f = img['f'];\n      putImage.call(this, smask);\n    } //Palette\n\n\n    if (img['cs'] === this.color_spaces.INDEXED) {\n      this.internal.newObject(); //out('<< /Filter / ' + img['f'] +' /Length ' + img['pal'].length + '>>');\n      //putStream(zlib.compress(img['pal']));\n\n      putStream({\n        data: this.arrayBufferToBinaryString(new Uint8Array(img['pal']))\n      });\n      out('endobj');\n    }\n  },\n      putResourcesCallback = function putResourcesCallback() {\n    var images = this.internal.collections[namespace + 'images'];\n\n    for (var i in images) {\n      putImage.call(this, images[i]);\n    }\n  },\n      putXObjectsDictCallback = function putXObjectsDictCallback() {\n    var images = this.internal.collections[namespace + 'images'],\n        out = this.internal.write,\n        image;\n\n    for (var i in images) {\n      image = images[i];\n      out('/I' + image['i'], image['n'], '0', 'R');\n    }\n  },\n      checkCompressValue = function checkCompressValue(value) {\n    if (value && typeof value === 'string') value = value.toUpperCase();\n    return value in jsPDFAPI.image_compression ? value : jsPDFAPI.image_compression.NONE;\n  },\n      getImages = function getImages() {\n    var images = this.internal.collections[namespace + 'images']; //first run, so initialise stuff\n\n    if (!images) {\n      this.internal.collections[namespace + 'images'] = images = {};\n      this.internal.events.subscribe('putResources', putResourcesCallback);\n      this.internal.events.subscribe('putXobjectDict', putXObjectsDictCallback);\n    }\n\n    return images;\n  },\n      getImageIndex = function getImageIndex(images) {\n    var imageIndex = 0;\n\n    if (images) {\n      // this is NOT the first time this method is ran on this instance of jsPDF object.\n      imageIndex = Object.keys ? Object.keys(images).length : function (o) {\n        var i = 0;\n\n        for (var e in o) {\n          if (o.hasOwnProperty(e)) {\n            i++;\n          }\n        }\n\n        return i;\n      }(images);\n    }\n\n    return imageIndex;\n  },\n      notDefined = function notDefined(value) {\n    return typeof value === 'undefined' || value === null || value.length === 0;\n  },\n      generateAliasFromImageData = function generateAliasFromImageData(imageData) {\n    if (typeof imageData === 'string') {\n      return jsPDFAPI.sHashCode(imageData);\n    }\n\n    if (jsPDFAPI.isArrayBufferView(imageData)) {\n      return jsPDFAPI.sHashCode(jsPDFAPI.arrayBufferToBinaryString(imageData));\n    }\n\n    return null;\n  },\n      isImageTypeSupported = function isImageTypeSupported(type) {\n    return typeof jsPDFAPI[\"process\" + type.toUpperCase()] === \"function\";\n  },\n      isDOMElement = function isDOMElement(object) {\n    return _typeof(object) === 'object' && object.nodeType === 1;\n  },\n      createDataURIFromElement = function createDataURIFromElement(element, format) {\n    //if element is an image which uses data url definition, just return the dataurl\n    if (element.nodeName === 'IMG' && element.hasAttribute('src')) {\n      var src = '' + element.getAttribute('src'); //is base64 encoded dataUrl, directly process it\n\n      if (src.indexOf('data:image/') === 0) {\n        return unescape(src);\n      } //it is probably an url, try to load it\n\n\n      var tmpImageData = jsPDFAPI.loadFile(src);\n\n      if (tmpImageData !== undefined) {\n        return btoa(tmpImageData);\n      }\n    }\n\n    if (element.nodeName === 'CANVAS') {\n      var canvas = element;\n      return element.toDataURL('image/jpeg', 1.0);\n    } //absolute fallback method\n\n\n    var canvas = document.createElement('canvas');\n    canvas.width = element.clientWidth || element.width;\n    canvas.height = element.clientHeight || element.height;\n    var ctx = canvas.getContext('2d');\n\n    if (!ctx) {\n      throw 'addImage requires canvas to be supported by browser.';\n    }\n\n    ctx.drawImage(element, 0, 0, canvas.width, canvas.height);\n    return canvas.toDataURL(('' + format).toLowerCase() == 'png' ? 'image/png' : 'image/jpeg');\n  },\n      checkImagesForAlias = function checkImagesForAlias(alias, images) {\n    var cached_info;\n\n    if (images) {\n      for (var e in images) {\n        if (alias === images[e].alias) {\n          cached_info = images[e];\n          break;\n        }\n      }\n    }\n\n    return cached_info;\n  },\n      determineWidthAndHeight = function determineWidthAndHeight(w, h, info) {\n    if (!w && !h) {\n      w = -96;\n      h = -96;\n    }\n\n    if (w < 0) {\n      w = -1 * info['w'] * 72 / w / this.internal.scaleFactor;\n    }\n\n    if (h < 0) {\n      h = -1 * info['h'] * 72 / h / this.internal.scaleFactor;\n    }\n\n    if (w === 0) {\n      w = h * info['w'] / info['h'];\n    }\n\n    if (h === 0) {\n      h = w * info['h'] / info['w'];\n    }\n\n    return [w, h];\n  },\n      writeImageToPDF = function writeImageToPDF(x, y, w, h, info, index, images, rotation) {\n    var dims = determineWidthAndHeight.call(this, w, h, info),\n        coord = this.internal.getCoordinateString,\n        vcoord = this.internal.getVerticalCoordinateString;\n    w = dims[0];\n    h = dims[1];\n    images[index] = info;\n\n    if (rotation) {\n      rotation *= Math.PI / 180;\n      var c = Math.cos(rotation);\n      var s = Math.sin(rotation); //like in pdf Reference do it 4 digits instead of 2\n\n      var f4 = function f4(number) {\n        return number.toFixed(4);\n      };\n\n      var rotationTransformationMatrix = [f4(c), f4(s), f4(s * -1), f4(c), 0, 0, 'cm'];\n    }\n\n    this.internal.write('q'); //Save graphics state\n\n    if (rotation) {\n      this.internal.write([1, '0', '0', 1, coord(x), vcoord(y + h), 'cm'].join(' ')); //Translate\n\n      this.internal.write(rotationTransformationMatrix.join(' ')); //Rotate\n\n      this.internal.write([coord(w), '0', '0', coord(h), '0', '0', 'cm'].join(' ')); //Scale\n    } else {\n      this.internal.write([coord(w), '0', '0', coord(h), coord(x), vcoord(y + h), 'cm'].join(' ')); //Translate and Scale\n    }\n\n    this.internal.write('/I' + info['i'] + ' Do'); //Paint Image\n\n    this.internal.write('Q'); //Restore graphics state\n  };\n  /**\n   * COLOR SPACES\n   */\n\n\n  jsPDFAPI.color_spaces = {\n    DEVICE_RGB: 'DeviceRGB',\n    DEVICE_GRAY: 'DeviceGray',\n    DEVICE_CMYK: 'DeviceCMYK',\n    CAL_GREY: 'CalGray',\n    CAL_RGB: 'CalRGB',\n    LAB: 'Lab',\n    ICC_BASED: 'ICCBased',\n    INDEXED: 'Indexed',\n    PATTERN: 'Pattern',\n    SEPARATION: 'Separation',\n    DEVICE_N: 'DeviceN'\n  };\n  /**\n   * DECODE METHODS\n   */\n\n  jsPDFAPI.decode = {\n    DCT_DECODE: 'DCTDecode',\n    FLATE_DECODE: 'FlateDecode',\n    LZW_DECODE: 'LZWDecode',\n    JPX_DECODE: 'JPXDecode',\n    JBIG2_DECODE: 'JBIG2Decode',\n    ASCII85_DECODE: 'ASCII85Decode',\n    ASCII_HEX_DECODE: 'ASCIIHexDecode',\n    RUN_LENGTH_DECODE: 'RunLengthDecode',\n    CCITT_FAX_DECODE: 'CCITTFaxDecode'\n  };\n  /**\n   * IMAGE COMPRESSION TYPES\n   */\n\n  jsPDFAPI.image_compression = {\n    NONE: 'NONE',\n    FAST: 'FAST',\n    MEDIUM: 'MEDIUM',\n    SLOW: 'SLOW'\n  };\n  /**\n  * @name sHashCode\n  * @function \n  * @param {string} str\n  * @returns {string} \n  */\n\n  jsPDFAPI.sHashCode = function (str) {\n    str = str || \"\";\n    var hash = 0,\n        i,\n        chr;\n    if (str.length === 0) return hash;\n\n    for (i = 0; i < str.length; i++) {\n      chr = str.charCodeAt(i);\n      hash = (hash << 5) - hash + chr;\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return hash;\n  };\n  /**\n  * @name isString\n  * @function\n  * @param {any} object\n  * @returns {boolean} \n  */\n\n\n  jsPDFAPI.isString = function (object) {\n    return typeof object === 'string';\n  };\n  /**\n  * Validates if given String is a valid Base64-String\n  *\n  * @name validateStringAsBase64\n  * @public\n  * @function\n  * @param {String} possible Base64-String\n  * \n  * @returns {boolean}\n  */\n\n\n  jsPDFAPI.validateStringAsBase64 = function (possibleBase64String) {\n    possibleBase64String = possibleBase64String || '';\n    possibleBase64String.toString().trim();\n    var result = true;\n\n    if (possibleBase64String.length === 0) {\n      result = false;\n    }\n\n    if (possibleBase64String.length % 4 !== 0) {\n      result = false;\n    }\n\n    if (/^[A-Za-z0-9+\\/]+$/.test(possibleBase64String.substr(0, possibleBase64String.length - 2)) === false) {\n      result = false;\n    }\n\n    if (/^[A-Za-z0-9\\/][A-Za-z0-9+\\/]|[A-Za-z0-9+\\/]=|==$/.test(possibleBase64String.substr(-2)) === false) {\n      result = false;\n    }\n\n    return result;\n  };\n  /**\n   * Strips out and returns info from a valid base64 data URI\n   *\n   * @name extractInfoFromBase64DataURI\n   * @function \n   * @param {string} dataUrl a valid data URI of format 'data:[<MIME-type>][;base64],<data>'\n   * @returns {Array}an Array containing the following\n   * [0] the complete data URI\n   * [1] <MIME-type>\n   * [2] format - the second part of the mime-type i.e 'png' in 'image/png'\n   * [4] <data>\n   */\n\n\n  jsPDFAPI.extractInfoFromBase64DataURI = function (dataURI) {\n    return /^data:([\\w]+?\\/([\\w]+?));\\S*;*base64,(.+)$/g.exec(dataURI);\n  };\n  /**\n   * Strips out and returns info from a valid base64 data URI\n   *\n   * @name extractImageFromDataUrl\n   * @function \n   * @param {string} dataUrl a valid data URI of format 'data:[<MIME-type>][;base64],<data>'\n   * @returns {Array}an Array containing the following\n   * [0] the complete data URI\n   * [1] <MIME-type>\n   * [2] format - the second part of the mime-type i.e 'png' in 'image/png'\n   * [4] <data>\n   */\n\n\n  jsPDFAPI.extractImageFromDataUrl = function (dataUrl) {\n    dataUrl = dataUrl || '';\n    var dataUrlParts = dataUrl.split('base64,');\n    var result = null;\n\n    if (dataUrlParts.length === 2) {\n      var extractedInfo = /^data:(\\w*\\/\\w*);*(charset=[\\w=-]*)*;*$/.exec(dataUrlParts[0]);\n\n      if (Array.isArray(extractedInfo)) {\n        result = {\n          mimeType: extractedInfo[1],\n          charset: extractedInfo[2],\n          data: dataUrlParts[1]\n        };\n      }\n    }\n\n    return result;\n  };\n  /**\n   * Check to see if ArrayBuffer is supported\n   * \n   * @name supportsArrayBuffer\n   * @function\n   * @returns {boolean}\n   */\n\n\n  jsPDFAPI.supportsArrayBuffer = function () {\n    return typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined';\n  };\n  /**\n   * Tests supplied object to determine if ArrayBuffer\n   *\n   * @name isArrayBuffer\n   * @function \n   * @param {Object} object an Object\n   * \n   * @returns {boolean}\n   */\n\n\n  jsPDFAPI.isArrayBuffer = function (object) {\n    if (!this.supportsArrayBuffer()) return false;\n    return object instanceof ArrayBuffer;\n  };\n  /**\n   * Tests supplied object to determine if it implements the ArrayBufferView (TypedArray) interface\n   *\n   * @name isArrayBufferView\n   * @function \n   * @param {Object} object an Object\n   * @returns {boolean}\n   */\n\n\n  jsPDFAPI.isArrayBufferView = function (object) {\n    if (!this.supportsArrayBuffer()) return false;\n    if (typeof Uint32Array === 'undefined') return false;\n    return object instanceof Int8Array || object instanceof Uint8Array || typeof Uint8ClampedArray !== 'undefined' && object instanceof Uint8ClampedArray || object instanceof Int16Array || object instanceof Uint16Array || object instanceof Int32Array || object instanceof Uint32Array || object instanceof Float32Array || object instanceof Float64Array;\n  };\n  /**\n  * Convert the Buffer to a Binary String\n  *\n  * @name binaryStringToUint8Array\n  * @public\n  * @function\n  * @param {ArrayBuffer} BinaryString with ImageData\n  * \n  * @returns {Uint8Array}\n  */\n\n\n  jsPDFAPI.binaryStringToUint8Array = function (binary_string) {\n    /*\n     * not sure how efficient this will be will bigger files. Is there a native method?\n     */\n    var len = binary_string.length;\n    var bytes = new Uint8Array(len);\n\n    for (var i = 0; i < len; i++) {\n      bytes[i] = binary_string.charCodeAt(i);\n    }\n\n    return bytes;\n  };\n  /**\n  * Convert the Buffer to a Binary String\n  *\n  * @name arrayBufferToBinaryString\n  * @public\n  * @function\n  * @param {ArrayBuffer} ArrayBuffer with ImageData\n  * \n  * @returns {String}\n  */\n\n\n  jsPDFAPI.arrayBufferToBinaryString = function (buffer) {\n    // if (typeof Uint8Array !== 'undefined' && typeof Uint8Array.prototype.reduce !== 'undefined') {\n    // return new Uint8Array(buffer).reduce(function (data, byte) {\n    // return data.push(String.fromCharCode(byte)), data;\n    // }, []).join('');\n    // }\n    if (typeof atob === \"function\") {\n      return atob(this.arrayBufferToBase64(buffer));\n    }\n  };\n  /**\n  * Converts an ArrayBuffer directly to base64\n  *\n  * Taken from  http://jsperf.com/encoding-xhr-image-data/31\n  *\n  * Need to test if this is a better solution for larger files\n  *\n  * @name arrayBufferToBase64\n  * @param {arraybuffer} arrayBuffer\n  * @public\n  * @function\n  * \n  * @returns {string}\n  */\n\n\n  jsPDFAPI.arrayBufferToBase64 = function (arrayBuffer) {\n    var base64 = '';\n    var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var bytes = new Uint8Array(arrayBuffer);\n    var byteLength = bytes.byteLength;\n    var byteRemainder = byteLength % 3;\n    var mainLength = byteLength - byteRemainder;\n    var a, b, c, d;\n    var chunk; // Main loop deals with bytes in chunks of 3\n\n    for (var i = 0; i < mainLength; i = i + 3) {\n      // Combine the three bytes into a single integer\n      chunk = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2]; // Use bitmasks to extract 6-bit segments from the triplet\n\n      a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n\n      b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\n\n      c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\n\n      d = chunk & 63; // 63       = 2^6 - 1\n      // Convert the raw binary segments to the appropriate ASCII encoding\n\n      base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n    } // Deal with the remaining bytes and padding\n\n\n    if (byteRemainder == 1) {\n      chunk = bytes[mainLength];\n      a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n      // Set the 4 least significant bits to zero\n\n      b = (chunk & 3) << 4; // 3   = 2^2 - 1\n\n      base64 += encodings[a] + encodings[b] + '==';\n    } else if (byteRemainder == 2) {\n      chunk = bytes[mainLength] << 8 | bytes[mainLength + 1];\n      a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n\n      b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\n      // Set the 2 least significant bits to zero\n\n      c = (chunk & 15) << 2; // 15    = 2^4 - 1\n\n      base64 += encodings[a] + encodings[b] + encodings[c] + '=';\n    }\n\n    return base64;\n  };\n  /**\n  * \n  * @name createImageInfo\n  * @param {Object} data \n  * @param {number} wd width\n  * @param {number} ht height\n  * @param {Object} cs colorSpace\n  * @param {number} bpc bits per channel\n  * @param {any} f \n  * @param {number} imageIndex\n  * @param {string} alias\n  * @param {any} dp\n  * @param {any} trns\n  * @param {any} pal\n  * @param {any} smask\n  * @param {any} p\n  * @public\n  * @function\n  * \n  * @returns {Object}\n  */\n\n\n  jsPDFAPI.createImageInfo = function (data, wd, ht, cs, bpc, f, imageIndex, alias, dp, trns, pal, smask, p) {\n    var info = {\n      alias: alias,\n      w: wd,\n      h: ht,\n      cs: cs,\n      bpc: bpc,\n      i: imageIndex,\n      data: data // n: objectNumber will be added by putImage code\n\n    };\n    if (f) info.f = f;\n    if (dp) info.dp = dp;\n    if (trns) info.trns = trns;\n    if (pal) info.pal = pal;\n    if (smask) info.smask = smask;\n    if (p) info.p = p; // predictor parameter for PNG compression\n\n    return info;\n  };\n  /**\n  * Adds an Image to the PDF.\n  *\n  * @name addImage\n  * @public\n  * @function\n  * @param {string/Image-Element/Canvas-Element/Uint8Array} imageData imageData as base64 encoded DataUrl or Image-HTMLElement or Canvas-HTMLElement\n  * @param {string} format format of file if filetype-recognition fails, e.g. 'JPEG'\n  * @param {number} x x Coordinate (in units declared at inception of PDF document) against left edge of the page\n  * @param {number} y y Coordinate (in units declared at inception of PDF document) against upper edge of the page\n  * @param {number} width width of the image (in units declared at inception of PDF document)\n  * @param {number} height height of the Image (in units declared at inception of PDF document)\n  * @param {string} alias alias of the image (if used multiple times)\n  * @param {string} compression compression of the generated JPEG, can have the values 'NONE', 'FAST', 'MEDIUM' and 'SLOW'\n  * @param {number} rotation rotation of the image in degrees (0-359)\n  * \n  * @returns jsPDF\n  */\n\n\n  jsPDFAPI.addImage = function (imageData, format, x, y, w, h, alias, compression, rotation) {\n\n    var tmpImageData = '';\n\n    if (typeof format !== 'string') {\n      var tmp = h;\n      h = w;\n      w = y;\n      y = x;\n      x = format;\n      format = tmp;\n    }\n\n    if (_typeof(imageData) === 'object' && !isDOMElement(imageData) && \"imageData\" in imageData) {\n      var options = imageData;\n      imageData = options.imageData;\n      format = options.format || format || 'UNKNOWN';\n      x = options.x || x || 0;\n      y = options.y || y || 0;\n      w = options.w || w;\n      h = options.h || h;\n      alias = options.alias || alias;\n      compression = options.compression || compression;\n      rotation = options.rotation || options.angle || rotation;\n    } //If compression is not explicitly set, determine if we should use compression\n\n\n    var filters = this.internal.getFilters();\n\n    if (compression === undefined && filters.indexOf('FlateEncode') !== -1) {\n      compression = 'SLOW';\n    }\n\n    if (typeof imageData === \"string\") {\n      imageData = unescape(imageData);\n    }\n\n    if (isNaN(x) || isNaN(y)) {\n      console.error('jsPDF.addImage: Invalid coordinates', arguments);\n      throw new Error('Invalid coordinates passed to jsPDF.addImage');\n    }\n\n    var images = getImages.call(this),\n        info,\n        dataAsBinaryString;\n\n    if (!(info = checkImagesForAlias(imageData, images))) {\n      if (isDOMElement(imageData)) imageData = createDataURIFromElement(imageData, format);\n      if (notDefined(alias)) alias = generateAliasFromImageData(imageData);\n\n      if (!(info = checkImagesForAlias(alias, images))) {\n        if (this.isString(imageData)) {\n          tmpImageData = this.convertStringToImageData(imageData);\n\n          if (tmpImageData !== '') {\n            imageData = tmpImageData;\n          } else {\n            tmpImageData = jsPDFAPI.loadFile(imageData);\n\n            if (tmpImageData !== undefined) {\n              imageData = tmpImageData;\n            }\n          }\n        }\n\n        format = this.getImageFileTypeByImageData(imageData, format);\n        if (!isImageTypeSupported(format)) throw new Error('addImage does not support files of type \\'' + format + '\\', please ensure that a plugin for \\'' + format + '\\' support is added.');\n        /**\n         * need to test if it's more efficient to convert all binary strings\n         * to TypedArray - or should we just leave and process as string?\n         */\n\n        if (this.supportsArrayBuffer()) {\n          // no need to convert if imageData is already uint8array\n          if (!(imageData instanceof Uint8Array)) {\n            dataAsBinaryString = imageData;\n            imageData = this.binaryStringToUint8Array(imageData);\n          }\n        }\n\n        info = this['process' + format.toUpperCase()](imageData, getImageIndex(images), alias, checkCompressValue(compression), dataAsBinaryString);\n\n        if (!info) {\n          throw new Error('An unknown error occurred whilst processing the image');\n        }\n      }\n    }\n\n    writeImageToPDF.call(this, x, y, w, h, info, info.i, images, rotation);\n    return this;\n  };\n  /**\n  * @name convertStringToImageData\n  * @function\n  * @param {string} stringData\n  * @returns {string} binary data\n  */\n\n\n  jsPDFAPI.convertStringToImageData = function (stringData) {\n    var base64Info;\n    var imageData = '';\n    var rawData;\n\n    if (this.isString(stringData)) {\n      var base64Info = this.extractImageFromDataUrl(stringData);\n      rawData = base64Info !== null ? base64Info.data : stringData;\n\n      try {\n        imageData = atob(rawData);\n      } catch (e) {\n        if (!jsPDFAPI.validateStringAsBase64(rawData)) {\n          throw new Error('Supplied Data is not a valid base64-String jsPDF.convertStringToImageData ');\n        } else {\n          throw new Error('atob-Error in jsPDF.convertStringToImageData ' + e.message);\n        }\n      }\n    }\n\n    return imageData;\n  };\n  /**\n   * JPEG SUPPORT\n   **/\n  //takes a string imgData containing the raw bytes of\n  //a jpeg image and returns [width, height]\n  //Algorithm from: http://www.64lines.com/jpeg-width-height\n\n\n  var getJpegSize = function getJpegSize(imgData) {\n\n    var width, height, numcomponents; // Verify we have a valid jpeg header 0xff,0xd8,0xff,0xe0,?,?,'J','F','I','F',0x00\n\n    if (getImageFileTypeByImageData(imgData) !== 'JPEG') {\n      throw new Error('getJpegSize requires a binary string jpeg file');\n    }\n\n    var blockLength = imgData.charCodeAt(4) * 256 + imgData.charCodeAt(5);\n    var i = 4,\n        len = imgData.length;\n\n    while (i < len) {\n      i += blockLength;\n\n      if (imgData.charCodeAt(i) !== 0xff) {\n        throw new Error('getJpegSize could not find the size of the image');\n      }\n\n      if (imgData.charCodeAt(i + 1) === 0xc0 || //(SOF) Huffman  - Baseline DCT\n      imgData.charCodeAt(i + 1) === 0xc1 || //(SOF) Huffman  - Extended sequential DCT\n      imgData.charCodeAt(i + 1) === 0xc2 || // Progressive DCT (SOF2)\n      imgData.charCodeAt(i + 1) === 0xc3 || // Spatial (sequential) lossless (SOF3)\n      imgData.charCodeAt(i + 1) === 0xc4 || // Differential sequential DCT (SOF5)\n      imgData.charCodeAt(i + 1) === 0xc5 || // Differential progressive DCT (SOF6)\n      imgData.charCodeAt(i + 1) === 0xc6 || // Differential spatial (SOF7)\n      imgData.charCodeAt(i + 1) === 0xc7) {\n        height = imgData.charCodeAt(i + 5) * 256 + imgData.charCodeAt(i + 6);\n        width = imgData.charCodeAt(i + 7) * 256 + imgData.charCodeAt(i + 8);\n        numcomponents = imgData.charCodeAt(i + 9);\n        return [width, height, numcomponents];\n      } else {\n        i += 2;\n        blockLength = imgData.charCodeAt(i) * 256 + imgData.charCodeAt(i + 1);\n      }\n    }\n  },\n      getJpegSizeFromBytes = function getJpegSizeFromBytes(data) {\n    var hdr = data[0] << 8 | data[1];\n    if (hdr !== 0xFFD8) throw new Error('Supplied data is not a JPEG');\n    var len = data.length,\n        block = (data[4] << 8) + data[5],\n        pos = 4,\n        bytes,\n        width,\n        height,\n        numcomponents;\n\n    while (pos < len) {\n      pos += block;\n      bytes = readBytes(data, pos);\n      block = (bytes[2] << 8) + bytes[3];\n\n      if ((bytes[1] === 0xC0 || bytes[1] === 0xC2) && bytes[0] === 0xFF && block > 7) {\n        bytes = readBytes(data, pos + 5);\n        width = (bytes[2] << 8) + bytes[3];\n        height = (bytes[0] << 8) + bytes[1];\n        numcomponents = bytes[4];\n        return {\n          width: width,\n          height: height,\n          numcomponents: numcomponents\n        };\n      }\n\n      pos += 2;\n    }\n\n    throw new Error('getJpegSizeFromBytes could not find the size of the image');\n  },\n      readBytes = function readBytes(data, offset) {\n    return data.subarray(offset, offset + 5);\n  };\n  /**\n  * @ignore\n  */\n\n\n  jsPDFAPI.processJPEG = function (data, index, alias, compression, dataAsBinaryString, colorSpace) {\n\n    var filter = this.decode.DCT_DECODE,\n        bpc = 8,\n        dims;\n\n    if (!this.isString(data) && !this.isArrayBuffer(data) && !this.isArrayBufferView(data)) {\n      return null;\n    }\n\n    if (this.isString(data)) {\n      dims = getJpegSize(data);\n    }\n\n    if (this.isArrayBuffer(data)) {\n      data = new Uint8Array(data);\n    }\n\n    if (this.isArrayBufferView(data)) {\n      dims = getJpegSizeFromBytes(data); // if we already have a stored binary string rep use that\n\n      data = dataAsBinaryString || this.arrayBufferToBinaryString(data);\n    }\n\n    if (colorSpace === undefined) {\n      switch (dims.numcomponents) {\n        case 1:\n          colorSpace = this.color_spaces.DEVICE_GRAY;\n          break;\n\n        case 4:\n          colorSpace = this.color_spaces.DEVICE_CMYK;\n          break;\n\n        default:\n        case 3:\n          colorSpace = this.color_spaces.DEVICE_RGB;\n          break;\n      }\n    }\n\n    return this.createImageInfo(data, dims.width, dims.height, colorSpace, bpc, filter, index, alias);\n  };\n  /**\n  * @ignore\n  */\n\n\n  jsPDFAPI.processJPG = function ()\n  /*data, index, alias, compression, dataAsBinaryString*/\n  {\n    return this.processJPEG.apply(this, arguments);\n  };\n  /**\n  * @name getImageProperties\n  * @function\n  * @param {Object} imageData\n  * @returns {Object}\n  */\n\n\n  jsPDFAPI.getImageProperties = function (imageData) {\n    var info;\n    var tmpImageData = '';\n    var format;\n\n    if (isDOMElement(imageData)) {\n      imageData = createDataURIFromElement(imageData);\n    }\n\n    if (this.isString(imageData)) {\n      tmpImageData = this.convertStringToImageData(imageData);\n\n      if (tmpImageData !== '') {\n        imageData = tmpImageData;\n      } else {\n        tmpImageData = jsPDFAPI.loadFile(imageData);\n\n        if (tmpImageData !== undefined) {\n          imageData = tmpImageData;\n        }\n      }\n    }\n\n    format = this.getImageFileTypeByImageData(imageData);\n\n    if (!isImageTypeSupported(format)) {\n      throw new Error('addImage does not support files of type \\'' + format + '\\', please ensure that a plugin for \\'' + format + '\\' support is added.');\n    }\n    /**\n     * need to test if it's more efficient to convert all binary strings\n     * to TypedArray - or should we just leave and process as string?\n     */\n\n\n    if (this.supportsArrayBuffer()) {\n      // no need to convert if imageData is already uint8array\n      if (!(imageData instanceof Uint8Array)) {\n        imageData = this.binaryStringToUint8Array(imageData);\n      }\n    }\n\n    info = this['process' + format.toUpperCase()](imageData);\n\n    if (!info) {\n      throw new Error('An unknown error occurred whilst processing the image');\n    }\n\n    return {\n      fileType: format,\n      width: info.w,\n      height: info.h,\n      colorSpace: info.cs,\n      compressionMode: info.f,\n      bitsPerComponent: info.bpc\n    };\n  };\n})(jsPDF.API);\n\n/**\n * @license\n * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n\n/**\n * jsPDF Annotations PlugIn\n *\n * There are many types of annotations in a PDF document. Annotations are placed\n * on a page at a particular location. They are not 'attached' to an object.\n * <br />\n * This plugin current supports <br />\n * <li> Goto Page (set pageNumber and top in options)\n * <li> Goto Name (set name and top in options)\n * <li> Goto URL (set url in options)\n * <p>\n * \tThe destination magnification factor can also be specified when goto is a page number or a named destination. (see documentation below)\n *  (set magFactor in options).  XYZ is the default.\n * </p>\n * <p>\n *  Links, Text, Popup, and FreeText are supported.\n * </p>\n * <p>\n * Options In PDF spec Not Implemented Yet\n * <li> link border\n * <li> named target\n * <li> page coordinates\n * <li> destination page scaling and layout\n * <li> actions other than URL and GotoPage\n * <li> background / hover actions\n * </p>\n * @name annotations\n * @module\n */\n\n/*\n    Destination Magnification Factors\n    See PDF 1.3 Page 386 for meanings and options\n\n    [supported]\n\tXYZ (options; left top zoom)\n\tFit (no options)\n\tFitH (options: top)\n\tFitV (options: left)\n\n\t[not supported]\n\tFitR\n\tFitB\n\tFitBH\n\tFitBV\n */\n(function (jsPDFAPI) {\n\n  jsPDF.API.events.push(['addPage', function (addPageData) {\n    var pageInfo = this.internal.getPageInfo(addPageData.pageNumber);\n    pageInfo.pageContext.annotations = [];\n  }]);\n  jsPDFAPI.events.push(['putPage', function (putPageData) {\n    var pageInfo = this.internal.getPageInfoByObjId(putPageData.objId);\n    var pageAnnos = putPageData.pageContext.annotations;\n\n    var notEmpty = function notEmpty(obj) {\n      if (typeof obj != 'undefined') {\n        if (obj != '') {\n          return true;\n        }\n      }\n    };\n\n    var found = false;\n\n    for (var a = 0; a < pageAnnos.length && !found; a++) {\n      var anno = pageAnnos[a];\n\n      switch (anno.type) {\n        case 'link':\n          if (notEmpty(anno.options.url) || notEmpty(anno.options.pageNumber)) {\n            found = true;\n            break;\n          }\n\n        case 'reference':\n        case 'text':\n        case 'freetext':\n          found = true;\n          break;\n      }\n    }\n\n    if (found == false) {\n      return;\n    }\n\n    this.internal.write(\"/Annots [\");\n    var pageHeight = this.internal.pageSize.height;\n    var getHorizontalCoordinateString = this.internal.getCoordinateString;\n    var getVerticalCoordinateString = this.internal.getVerticalCoordinateString;\n\n    for (var a = 0; a < pageAnnos.length; a++) {\n      var anno = pageAnnos[a];\n\n      switch (anno.type) {\n        case 'reference':\n          // References to Widget Annotations (for AcroForm Fields)\n          this.internal.write(' ' + anno.object.objId + ' 0 R ');\n          break;\n\n        case 'text':\n          // Create a an object for both the text and the popup\n          var objText = this.internal.newAdditionalObject();\n          var objPopup = this.internal.newAdditionalObject();\n          var title = anno.title || 'Note';\n          var rect = \"/Rect [\" + getHorizontalCoordinateString(anno.bounds.x) + \" \" + getVerticalCoordinateString(anno.bounds.y + anno.bounds.h) + \" \" + getHorizontalCoordinateString(anno.bounds.x + anno.bounds.w) + \" \" + getVerticalCoordinateString(anno.bounds.y) + \"] \";\n          line = '<</Type /Annot /Subtype /' + 'Text' + ' ' + rect + '/Contents (' + anno.contents + ')';\n          line += ' /Popup ' + objPopup.objId + \" 0 R\";\n          line += ' /P ' + pageInfo.objId + \" 0 R\";\n          line += ' /T (' + title + ') >>';\n          objText.content = line;\n          var parent = objText.objId + ' 0 R';\n          var popoff = 30;\n          var rect = \"/Rect [\" + getHorizontalCoordinateString(anno.bounds.x + popoff) + \" \" + getVerticalCoordinateString(anno.bounds.y + anno.bounds.h) + \" \" + getHorizontalCoordinateString(anno.bounds.x + anno.bounds.w + popoff) + \" \" + getVerticalCoordinateString(anno.bounds.y) + \"] \";\n          line = '<</Type /Annot /Subtype /' + 'Popup' + ' ' + rect + ' /Parent ' + parent;\n\n          if (anno.open) {\n            line += ' /Open true';\n          }\n\n          line += ' >>';\n          objPopup.content = line;\n          this.internal.write(objText.objId, '0 R', objPopup.objId, '0 R');\n          break;\n\n        case 'freetext':\n          var rect = \"/Rect [\" + getHorizontalCoordinateString(anno.bounds.x) + \" \" + getVerticalCoordinateString(anno.bounds.y) + \" \" + getHorizontalCoordinateString(anno.bounds.x + anno.bounds.w) + \" \" + getVerticalCoordinateString(anno.bounds.y + anno.bounds.h) + \"] \";\n          var color = anno.color || '#000000';\n          line = '<</Type /Annot /Subtype /' + 'FreeText' + ' ' + rect + '/Contents (' + anno.contents + ')';\n          line += ' /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#' + color + ')';\n          line += ' /Border [0 0 0]';\n          line += ' >>';\n          this.internal.write(line);\n          break;\n\n        case 'link':\n          if (anno.options.name) {\n            var loc = this.annotations._nameMap[anno.options.name];\n            anno.options.pageNumber = loc.page;\n            anno.options.top = loc.y;\n          } else {\n            if (!anno.options.top) {\n              anno.options.top = 0;\n            }\n          }\n\n          var rect = \"/Rect [\" + getHorizontalCoordinateString(anno.x) + \" \" + getVerticalCoordinateString(anno.y) + \" \" + getHorizontalCoordinateString(anno.x + anno.w) + \" \" + getVerticalCoordinateString(anno.y + anno.h) + \"] \";\n          var line = '';\n\n          if (anno.options.url) {\n            line = '<</Type /Annot /Subtype /Link ' + rect + '/Border [0 0 0] /A <</S /URI /URI (' + anno.options.url + ') >>';\n          } else if (anno.options.pageNumber) {\n            // first page is 0\n            var info = this.internal.getPageInfo(anno.options.pageNumber);\n            line = '<</Type /Annot /Subtype /Link ' + rect + '/Border [0 0 0] /Dest [' + info.objId + \" 0 R\";\n            anno.options.magFactor = anno.options.magFactor || \"XYZ\";\n\n            switch (anno.options.magFactor) {\n              case 'Fit':\n                line += ' /Fit]';\n                break;\n\n              case 'FitH':\n                line += ' /FitH ' + anno.options.top + ']';\n                break;\n\n              case 'FitV':\n                anno.options.left = anno.options.left || 0;\n                line += ' /FitV ' + anno.options.left + ']';\n                break;\n\n              case 'XYZ':\n              default:\n                var top = getVerticalCoordinateString(anno.options.top);\n                anno.options.left = anno.options.left || 0; // 0 or null zoom will not change zoom factor\n\n                if (typeof anno.options.zoom === 'undefined') {\n                  anno.options.zoom = 0;\n                }\n\n                line += ' /XYZ ' + anno.options.left + ' ' + top + ' ' + anno.options.zoom + ']';\n                break;\n            }\n          }\n\n          if (line != '') {\n            line += \" >>\";\n            this.internal.write(line);\n          }\n\n          break;\n      }\n    }\n\n    this.internal.write(\"]\");\n  }]);\n  /**\n  * @name createAnnotation\n  * @function\n  * @param {Object} options \n  */\n\n  jsPDFAPI.createAnnotation = function (options) {\n    var pageInfo = this.internal.getCurrentPageInfo();\n\n    switch (options.type) {\n      case 'link':\n        this.link(options.bounds.x, options.bounds.y, options.bounds.w, options.bounds.h, options);\n        break;\n\n      case 'text':\n      case 'freetext':\n        pageInfo.pageContext.annotations.push(options);\n        break;\n    }\n  };\n  /**\n   * Create a link\n   *\n   * valid options\n   * <li> pageNumber or url [required]\n   * <p>If pageNumber is specified, top and zoom may also be specified</p>\n   * @name link\n   * @function\n   * @param {number} x\n   * @param {number} y\n   * @param {number} w\n   * @param {number} h\n   * @param {Object} options\n   */\n\n\n  jsPDFAPI.link = function (x, y, w, h, options) {\n    var pageInfo = this.internal.getCurrentPageInfo();\n    pageInfo.pageContext.annotations.push({\n      x: x,\n      y: y,\n      w: w,\n      h: h,\n      options: options,\n      type: 'link'\n    });\n  };\n  /**\n   * Currently only supports single line text.\n   * Returns the width of the text/link\n   *\n   * @name textWithLink\n   * @function\n   * @param {string} text\n   * @param {number} x\n   * @param {number} y\n   * @param {Object} options\n   * @returns {number} width the width of the text/link\n   */\n\n\n  jsPDFAPI.textWithLink = function (text, x, y, options) {\n    var width = this.getTextWidth(text);\n    var height = this.internal.getLineHeight() / this.internal.scaleFactor;\n    this.text(text, x, y); //TODO We really need the text baseline height to do this correctly.\n    // Or ability to draw text on top, bottom, center, or baseline.\n\n    y += height * .2;\n    this.link(x, y - height, width, height, options);\n    return width;\n  }; //TODO move into external library\n\n  /**\n  * @name getTextWidth\n  * @function\n  * @param {string} text\n  * @returns {number} txtWidth\n  */\n\n\n  jsPDFAPI.getTextWidth = function (text) {\n    var fontSize = this.internal.getFontSize();\n    var txtWidth = this.getStringUnitWidth(text) * fontSize / this.internal.scaleFactor;\n    return txtWidth;\n  };\n\n  return this;\n})(jsPDF.API);\n\n/**\n * @license\n * Copyright (c) 2017 Aras Abbasi \n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n\n/**\n* jsPDF arabic parser PlugIn\n*\n* @name arabic\n* @module\n*/\n(function (jsPDFAPI) {\n  /**\n   * Arabic shape substitutions: char code => (isolated, final, initial, medial).\n   * Arabic Substition A\n   */\n\n  var arabicSubstitionA = {\n    0x0621: [0xFE80],\n    // ARABIC LETTER HAMZA \n    0x0622: [0xFE81, 0xFE82],\n    // ARABIC LETTER ALEF WITH MADDA ABOVE\n    0x0623: [0xFE83, 0xFE84],\n    // ARABIC LETTER ALEF WITH HAMZA ABOVE\n    0x0624: [0xFE85, 0xFE86],\n    // ARABIC LETTER WAW WITH HAMZA ABOVE\n    0x0625: [0xFE87, 0xFE88],\n    // ARABIC LETTER ALEF WITH HAMZA BELOW\n    0x0626: [0xFE89, 0xFE8A, 0xFE8B, 0xFE8C],\n    // ARABIC LETTER YEH WITH HAMZA ABOVE \n    0x0627: [0xFE8D, 0xFE8E],\n    // ARABIC LETTER ALEF\n    0x0628: [0xFE8F, 0xFE90, 0xFE91, 0xFE92],\n    // ARABIC LETTER BEH\n    0x0629: [0xFE93, 0xFE94],\n    // ARABIC LETTER TEH MARBUTA \n    0x062A: [0xFE95, 0xFE96, 0xFE97, 0xFE98],\n    // ARABIC LETTER TEH\n    0x062B: [0xFE99, 0xFE9A, 0xFE9B, 0xFE9C],\n    // ARABIC LETTER THEH\n    0x062C: [0xFE9D, 0xFE9E, 0xFE9F, 0xFEA0],\n    // ARABIC LETTER JEEM\n    0x062D: [0xFEA1, 0xFEA2, 0xFEA3, 0xFEA4],\n    // ARABIC LETTER HAH\n    0x062E: [0xFEA5, 0xFEA6, 0xFEA7, 0xFEA8],\n    // ARABIC LETTER KHAH\n    0x062F: [0xFEA9, 0xFEAA],\n    // ARABIC LETTER DAL\n    0x0630: [0xFEAB, 0xFEAC],\n    // ARABIC LETTER THAL\n    0x0631: [0xFEAD, 0xFEAE],\n    // ARABIC LETTER REH\n    0x0632: [0xFEAF, 0xFEB0],\n    // ARABIC LETTER ZAIN\n    0x0633: [0xFEB1, 0xFEB2, 0xFEB3, 0xFEB4],\n    // ARABIC LETTER SEEN\n    0x0634: [0xFEB5, 0xFEB6, 0xFEB7, 0xFEB8],\n    // ARABIC LETTER SHEEN \n    0x0635: [0xFEB9, 0xFEBA, 0xFEBB, 0xFEBC],\n    // ARABIC LETTER SAD\n    0x0636: [0xFEBD, 0xFEBE, 0xFEBF, 0xFEC0],\n    // ARABIC LETTER DAD\n    0x0637: [0xFEC1, 0xFEC2, 0xFEC3, 0xFEC4],\n    // ARABIC LETTER TAH\n    0x0638: [0xFEC5, 0xFEC6, 0xFEC7, 0xFEC8],\n    // ARABIC LETTER ZAH\n    0x0639: [0xFEC9, 0xFECA, 0xFECB, 0xFECC],\n    // ARABIC LETTER AIN\n    0x063A: [0xFECD, 0xFECE, 0xFECF, 0xFED0],\n    // ARABIC LETTER GHAIN \n    0x0641: [0xFED1, 0xFED2, 0xFED3, 0xFED4],\n    // ARABIC LETTER FEH\n    0x0642: [0xFED5, 0xFED6, 0xFED7, 0xFED8],\n    // ARABIC LETTER QAF\n    0x0643: [0xFED9, 0xFEDA, 0xFEDB, 0xFEDC],\n    // ARABIC LETTER KAF\n    0x0644: [0xFEDD, 0xFEDE, 0xFEDF, 0xFEE0],\n    // ARABIC LETTER LAM\n    0x0645: [0xFEE1, 0xFEE2, 0xFEE3, 0xFEE4],\n    // ARABIC LETTER MEEM\n    0x0646: [0xFEE5, 0xFEE6, 0xFEE7, 0xFEE8],\n    // ARABIC LETTER NOON \n    0x0647: [0xFEE9, 0xFEEA, 0xFEEB, 0xFEEC],\n    // ARABIC LETTER HEH\n    0x0648: [0xFEED, 0xFEEE],\n    // ARABIC LETTER WAW\n    0x0649: [0xFEEF, 0xFEF0, 64488, 64489],\n    // ARABIC LETTER ALEF MAKSURA \n    0x064A: [0xFEF1, 0xFEF2, 0xFEF3, 0xFEF4],\n    // ARABIC LETTER YEH\n    0x0671: [0xFB50, 0xFB51],\n    // ARABIC LETTER ALEF WASLA\n    0x0677: [0xFBDD],\n    // ARABIC LETTER U WITH HAMZA ABOVE\n    0x0679: [0xFB66, 0xFB67, 0xFB68, 0xFB69],\n    // ARABIC LETTER TTEH\n    0x067A: [0xFB5E, 0xFB5F, 0xFB60, 0xFB61],\n    // ARABIC LETTER TTEHEH\n    0x067B: [0xFB52, 0xFB53, 0xFB54, 0xFB55],\n    // ARABIC LETTER BEEH\n    0x067E: [0xFB56, 0xFB57, 0xFB58, 0xFB59],\n    // ARABIC LETTER PEH \n    0x067F: [0xFB62, 0xFB63, 0xFB64, 0xFB65],\n    // ARABIC LETTER TEHEH\n    0x0680: [0xFB5A, 0xFB5B, 0xFB5C, 0xFB5D],\n    // ARABIC LETTER BEHEH\n    0x0683: [0xFB76, 0xFB77, 0xFB78, 0xFB79],\n    // ARABIC LETTER NYEH\n    0x0684: [0xFB72, 0xFB73, 0xFB74, 0xFB75],\n    // ARABIC LETTER DYEH\n    0x0686: [0xFB7A, 0xFB7B, 0xFB7C, 0xFB7D],\n    // ARABIC LETTER TCHEH\n    0x0687: [0xFB7E, 0xFB7F, 0xFB80, 0xFB81],\n    // ARABIC LETTER TCHEHEH\n    0x0688: [0xFB88, 0xFB89],\n    // ARABIC LETTER DDAL\n    0x068C: [0xFB84, 0xFB85],\n    // ARABIC LETTER DAHAL\n    0x068D: [0xFB82, 0xFB83],\n    // ARABIC LETTER DDAHAL\n    0x068E: [0xFB86, 0xFB87],\n    // ARABIC LETTER DUL \n    0x0691: [0xFB8C, 0xFB8D],\n    // ARABIC LETTER RREH\n    0x0698: [0xFB8A, 0xFB8B],\n    // ARABIC LETTER JEH\n    0x06A4: [0xFB6A, 0xFB6B, 0xFB6C, 0xFB6D],\n    // ARABIC LETTER VEH\n    0x06A6: [0xFB6E, 0xFB6F, 0xFB70, 0xFB71],\n    // ARABIC LETTER PEHEH\n    0x06A9: [0xFB8E, 0xFB8F, 0xFB90, 0xFB91],\n    // ARABIC LETTER KEHEH\n    0x06AD: [0xFBD3, 0xFBD4, 0xFBD5, 0xFBD6],\n    // ARABIC LETTER NG\n    0x06AF: [0xFB92, 0xFB93, 0xFB94, 0xFB95],\n    // ARABIC LETTER GAF\n    0x06B1: [0xFB9A, 0xFB9B, 0xFB9C, 0xFB9D],\n    // ARABIC LETTER NGOEH\n    0x06B3: [0xFB96, 0xFB97, 0xFB98, 0xFB99],\n    // ARABIC LETTER GUEH\n    0x06BA: [0xFB9E, 0xFB9F],\n    // ARABIC LETTER NOON GHUNNA\n    0x06BB: [0xFBA0, 0xFBA1, 0xFBA2, 0xFBA3],\n    // ARABIC LETTER RNOON\n    0x06BE: [0xFBAA, 0xFBAB, 0xFBAC, 0xFBAD],\n    // ARABIC LETTER HEH DOACHASHMEE\n    0x06C0: [0xFBA4, 0xFBA5],\n    // ARABIC LETTER HEH WITH YEH ABOVE\n    0x06C1: [0xFBA6, 0xFBA7, 0xFBA8, 0xFBA9],\n    // ARABIC LETTER HEH GOAL\n    0x06C5: [0xFBE0, 0xFBE1],\n    // ARABIC LETTER KIRGHIZ OE\n    0x06C6: [0xFBD9, 0xFBDA],\n    // ARABIC LETTER OE\n    0x06C7: [0xFBD7, 0xFBD8],\n    // ARABIC LETTER U\n    0x06C8: [0xFBDB, 0xFBDC],\n    // ARABIC LETTER YU\n    0x06C9: [0xFBE2, 0xFBE3],\n    // ARABIC LETTER KIRGHIZ YU\n    0x06CB: [0xFBDE, 0xFBDF],\n    // ARABIC LETTER VE\n    0x06CC: [0xFBFC, 0xFBFD, 0xFBFE, 0xFBFF],\n    // ARABIC LETTER FARSI YEH\n    0x06D0: [0xFBE4, 0xFBE5, 0xFBE6, 0xFBE7],\n    //ARABIC LETTER E\n    0x06D2: [0xFBAE, 0xFBAF],\n    // ARABIC LETTER YEH BARREE\n    0x06D3: [0xFBB0, 0xFBB1] // ARABIC LETTER YEH BARREE WITH HAMZA ABOVE\n\n  };\n  var ligatures = {\n    0xFEDF: {\n      0xFE82: 0xFEF5,\n      // ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE ISOLATED FORM\n      0xFE84: 0xFEF7,\n      // ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE ISOLATED FORM\n      0xFE88: 0xFEF9,\n      // ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW ISOLATED FORM\n      0xFE8E: 0xFEFB // ARABIC LIGATURE LAM WITH ALEF ISOLATED FORM\n\n    },\n    0xFEE0: {\n      0xFE82: 0xFEF6,\n      // ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE FINAL FORM\n      0xFE84: 0xFEF8,\n      // ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE FINAL FORM\n      0xFE88: 0xFEFA,\n      // ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW FINAL FORM\n      0xFE8E: 0xFEFC // ARABIC LIGATURE LAM WITH ALEF FINAL FORM\n\n    },\n    0xFE8D: {\n      0xFEDF: {\n        0xFEE0: {\n          0xFEEA: 0xFDF2\n        }\n      }\n    },\n    // ALLAH\n    0x0651: {\n      0x064C: 0xFC5E,\n      // Shadda + Dammatan\n      0x064D: 0xFC5F,\n      // Shadda + Kasratan\n      0x064E: 0xFC60,\n      // Shadda + Fatha\n      0x064F: 0xFC61,\n      // Shadda + Damma\n      0x0650: 0xFC62 // Shadda + Kasra\n\n    }\n  };\n  var arabic_diacritics = {\n    1612: 64606,\n    // Shadda + Dammatan\n    1613: 64607,\n    // Shadda + Kasratan\n    1614: 64608,\n    // Shadda + Fatha\n    1615: 64609,\n    // Shadda + Damma\n    1616: 64610 // Shadda + Kasra\n\n  };\n  var alfletter = [1570, 1571, 1573, 1575];\n  var noChangeInForm = -1;\n  var isolatedForm = 0;\n  var finalForm = 1;\n  var initialForm = 2;\n  var medialForm = 3;\n  jsPDFAPI.__arabicParser__ = {}; //private\n\n  var isInArabicSubstitutionA = jsPDFAPI.__arabicParser__.isInArabicSubstitutionA = function (letter) {\n    return typeof arabicSubstitionA[letter.charCodeAt(0)] !== \"undefined\";\n  };\n\n  var isArabicLetter = jsPDFAPI.__arabicParser__.isArabicLetter = function (letter) {\n    return typeof letter === \"string\" && /^[\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFF]+$/.test(letter);\n  };\n\n  var isArabicEndLetter = jsPDFAPI.__arabicParser__.isArabicEndLetter = function (letter) {\n    return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length <= 2;\n  };\n\n  var isArabicAlfLetter = jsPDFAPI.__arabicParser__.isArabicAlfLetter = function (letter) {\n    return isArabicLetter(letter) && alfletter.indexOf(letter.charCodeAt(0)) >= 0;\n  };\n\n  var arabicLetterHasIsolatedForm = jsPDFAPI.__arabicParser__.arabicLetterHasIsolatedForm = function (letter) {\n    return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length >= 1;\n  };\n\n  var arabicLetterHasFinalForm = jsPDFAPI.__arabicParser__.arabicLetterHasFinalForm = function (letter) {\n    return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length >= 2;\n  };\n\n  var arabicLetterHasInitialForm = jsPDFAPI.__arabicParser__.arabicLetterHasInitialForm = function (letter) {\n    return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length >= 3;\n  };\n\n  var arabicLetterHasMedialForm = jsPDFAPI.__arabicParser__.arabicLetterHasMedialForm = function (letter) {\n    return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length == 4;\n  };\n\n  var resolveLigatures = jsPDFAPI.__arabicParser__.resolveLigatures = function (letters) {\n    var i = 0;\n    var tmpLigatures = ligatures;\n    var position = isolatedForm;\n    var result = '';\n    var effectedLetters = 0;\n\n    for (i = 0; i < letters.length; i += 1) {\n      if (typeof tmpLigatures[letters.charCodeAt(i)] !== \"undefined\") {\n        effectedLetters++;\n        tmpLigatures = tmpLigatures[letters.charCodeAt(i)];\n\n        if (typeof tmpLigatures === \"number\") {\n          position = getCorrectForm(letters.charAt(i), letters.charAt(i - effectedLetters), letters.charAt(i + 1));\n          position = position !== -1 ? position : 0;\n          result += String.fromCharCode(tmpLigatures);\n          tmpLigatures = ligatures;\n          effectedLetters = 0;\n        }\n\n        if (i === letters.length - 1) {\n          tmpLigatures = ligatures;\n          result += letters.charAt(i - (effectedLetters - 1));\n          i = i - (effectedLetters - 1);\n          effectedLetters = 0;\n        }\n      } else {\n        tmpLigatures = ligatures;\n        result += letters.charAt(i - effectedLetters);\n        i = i - effectedLetters;\n        effectedLetters = 0;\n      }\n    }\n\n    return result;\n  };\n\n  var isArabicDiacritic = jsPDFAPI.__arabicParser__.isArabicDiacritic = function (letter) {\n    return letter !== undefined && arabic_diacritics[letter.charCodeAt(0)] !== undefined;\n  };\n\n  var getCorrectForm = jsPDFAPI.__arabicParser__.getCorrectForm = function (currentChar, beforeChar, nextChar) {\n\n    if (!isArabicLetter(currentChar)) {\n      return -1;\n    }\n\n    if (isInArabicSubstitutionA(currentChar) === false) {\n      return noChangeInForm;\n    }\n\n    if (!arabicLetterHasFinalForm(currentChar) || !isArabicLetter(beforeChar) && !isArabicLetter(nextChar) || !isArabicLetter(nextChar) && isArabicEndLetter(beforeChar) || isArabicEndLetter(currentChar) && !isArabicLetter(beforeChar) || isArabicEndLetter(currentChar) && isArabicAlfLetter(beforeChar) || isArabicEndLetter(currentChar) && isArabicEndLetter(beforeChar)) {\n      return isolatedForm;\n    }\n\n    if (arabicLetterHasMedialForm(currentChar) && isArabicLetter(beforeChar) && !isArabicEndLetter(beforeChar) && isArabicLetter(nextChar) && arabicLetterHasFinalForm(nextChar)) {\n      return medialForm;\n    }\n\n    if (isArabicEndLetter(currentChar) || !isArabicLetter(nextChar)) {\n      return finalForm;\n    }\n\n    return initialForm;\n  };\n  /**\n  * @name processArabic\n  * @function\n  * @param {string} text\n  * @param {boolean} reverse\n  * @returns {string}\n  */\n\n\n  var processArabic = jsPDFAPI.__arabicParser__.processArabic = jsPDFAPI.processArabic = function (text) {\n    text = text || \"\";\n    var result = \"\";\n    var i = 0;\n    var j = 0;\n    var position = 0;\n    var currentLetter = \"\";\n    var prevLetter = \"\";\n    var nextLetter = \"\";\n    var words = text.split(\"\\\\s+\");\n    var newWords = [];\n\n    for (i = 0; i < words.length; i += 1) {\n      newWords.push('');\n\n      for (j = 0; j < words[i].length; j += 1) {\n        currentLetter = words[i][j];\n        prevLetter = words[i][j - 1];\n        nextLetter = words[i][j + 1];\n\n        if (isArabicLetter(currentLetter)) {\n          position = getCorrectForm(currentLetter, prevLetter, nextLetter);\n\n          if (position !== -1) {\n            newWords[i] += String.fromCharCode(arabicSubstitionA[currentLetter.charCodeAt(0)][position]);\n          } else {\n            newWords[i] += currentLetter;\n          }\n        } else {\n          newWords[i] += currentLetter;\n        }\n      }\n\n      newWords[i] = resolveLigatures(newWords[i]);\n    }\n\n    result = newWords.join(' ');\n    return result;\n  };\n\n  var arabicParserFunction = function arabicParserFunction(args) {\n    var text = args.text;\n    var x = args.x;\n    var y = args.y;\n    var options = args.options || {};\n    var mutex = args.mutex || {};\n    var lang = options.lang;\n    var tmpText = [];\n\n    if (Object.prototype.toString.call(text) === '[object Array]') {\n      var i = 0;\n      tmpText = [];\n\n      for (i = 0; i < text.length; i += 1) {\n        if (Object.prototype.toString.call(text[i]) === '[object Array]') {\n          tmpText.push([processArabic(text[i][0]), text[i][1], text[i][2]]);\n        } else {\n          tmpText.push([processArabic(text[i])]);\n        }\n      }\n\n      args.text = tmpText;\n    } else {\n      args.text = processArabic(text);\n    }\n  };\n\n  jsPDFAPI.events.push(['preProcessText', arabicParserFunction]);\n})(jsPDF.API);\n\n/** @license\n * jsPDF Autoprint Plugin\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n\n/**\n* @name autoprint\n* @module\n*/\n(function (jsPDFAPI) {\n  /**\n  * Makes the PDF automatically print. This works in Chrome, Firefox, Acrobat\n  * Reader.\n  *\n  * @name autoPrint\n  * @function\n  * @param {Object} options (optional) Set the attribute variant to 'non-conform' (default) or 'javascript' to activate different methods of automatic printing when opening in a PDF-viewer .\n  * @returns {jsPDF}\n  * @example\n  * var doc = new jsPDF();\n  * doc.text(10, 10, 'This is a test');\n  * doc.autoPrint({variant: 'non-conform'});\n  * doc.save('autoprint.pdf');\n  */\n\n  jsPDFAPI.autoPrint = function (options) {\n\n    var refAutoPrintTag;\n    options = options || {};\n    options.variant = options.variant || 'non-conform';\n\n    switch (options.variant) {\n      case 'javascript':\n        //https://github.com/Rob--W/pdf.js/commit/c676ecb5a0f54677b9f3340c3ef2cf42225453bb\n        this.addJS('print({});');\n        break;\n\n      case 'non-conform':\n      default:\n        this.internal.events.subscribe('postPutResources', function () {\n          refAutoPrintTag = this.internal.newObject();\n          this.internal.out(\"<<\");\n          this.internal.out(\"/S /Named\");\n          this.internal.out(\"/Type /Action\");\n          this.internal.out(\"/N /Print\");\n          this.internal.out(\">>\");\n          this.internal.out(\"endobj\");\n        });\n        this.internal.events.subscribe(\"putCatalog\", function () {\n          this.internal.out(\"/OpenAction \" + refAutoPrintTag + \" 0 R\");\n        });\n        break;\n    }\n\n    return this;\n  };\n})(jsPDF.API);\n\n/**\n * @license\n * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n\n/**\n * jsPDF Canvas PlugIn\n * This plugin mimics the HTML5 Canvas\n * \n * The goal is to provide a way for current canvas users to print directly to a PDF.\n * @name canvas\n * @module\n */\n(function (jsPDFAPI) {\n  /**\n  * @class Canvas\n  * @classdesc A Canvas Wrapper for jsPDF\n  */\n\n  var Canvas = function Canvas() {\n    var jsPdfInstance = undefined;\n    Object.defineProperty(this, 'pdf', {\n      get: function get() {\n        return jsPdfInstance;\n      },\n      set: function set(value) {\n        jsPdfInstance = value;\n      }\n    });\n    var _width = 150;\n    /**\n    * The height property is a positive integer reflecting the height HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used.\n    * This is one of the two properties, the other being width, that controls the size of the canvas.\n    *\n    * @name width\n    */\n\n    Object.defineProperty(this, 'width', {\n      get: function get() {\n        return _width;\n      },\n      set: function set(value) {\n        if (isNaN(value) || Number.isInteger(value) === false || value < 0) {\n          _width = 150;\n        } else {\n          _width = value;\n        }\n\n        if (this.getContext('2d').pageWrapXEnabled) {\n          this.getContext('2d').pageWrapX = _width + 1;\n        }\n      }\n    });\n    var _height = 300;\n    /**\n    * The width property is a positive integer reflecting the width HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used.\n    * This is one of the two properties, the other being height, that controls the size of the canvas.\n    *\n    * @name height\n    */\n\n    Object.defineProperty(this, 'height', {\n      get: function get() {\n        return _height;\n      },\n      set: function set(value) {\n        if (isNaN(value) || Number.isInteger(value) === false || value < 0) {\n          _height = 300;\n        } else {\n          _height = value;\n        }\n\n        if (this.getContext('2d').pageWrapYEnabled) {\n          this.getContext('2d').pageWrapY = _height + 1;\n        }\n      }\n    });\n    var _childNodes = [];\n    Object.defineProperty(this, 'childNodes', {\n      get: function get() {\n        return _childNodes;\n      },\n      set: function set(value) {\n        _childNodes = value;\n      }\n    });\n    var _style = {};\n    Object.defineProperty(this, 'style', {\n      get: function get() {\n        return _style;\n      },\n      set: function set(value) {\n        _style = value;\n      }\n    });\n    Object.defineProperty(this, 'parentNode', {\n      get: function get() {\n        return false;\n      }\n    });\n  };\n  /**\n  * The getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported.\n  * \n  * @name getContext\n  * @function\n  * @param {string} contextType Is a String containing the context identifier defining the drawing context associated to the canvas. Possible value is \"2d\", leading to the creation of a Context2D object representing a two-dimensional rendering context.\n  * @param {object} contextAttributes\n  */\n\n\n  Canvas.prototype.getContext = function (contextType, contextAttributes) {\n    contextType = contextType || '2d';\n    var key;\n\n    if (contextType !== '2d') {\n      return null;\n    }\n\n    for (key in contextAttributes) {\n      if (this.pdf.context2d.hasOwnProperty(key)) {\n        this.pdf.context2d[key] = contextAttributes[key];\n      }\n    }\n\n    this.pdf.context2d._canvas = this;\n    return this.pdf.context2d;\n  };\n  /**\n  * The toDataURL() method is just a stub to throw an error if accidently called.\n  * \n  * @name toDataURL\n  * @function\n  */\n\n\n  Canvas.prototype.toDataURL = function () {\n    throw new Error('toDataURL is not implemented.');\n  };\n\n  jsPDFAPI.events.push(['initialized', function () {\n    this.canvas = new Canvas();\n    this.canvas.pdf = this;\n  }]);\n  return this;\n})(jsPDF.API);\n\n/** \n * @license\n * ====================================================================\n * Copyright (c) 2013 Youssef Beddad, youssef.beddad@gmail.com\n *               2013 Eduardo Menezes de Morais, eduardo.morais@usp.br\n *               2013 Lee Driscoll, https://github.com/lsdriscoll\n *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria\n *               2014 James Hall, james@parall.ax\n *               2014 Diego Casorran, https://github.com/diegocr\n *\n * \n * ====================================================================\n */\n\n/**\n* @name cell\n* @module\n*/\n(function (jsPDFAPI) {\n  /*jslint browser:true */\n\n  /*global document: false, jsPDF */\n\n  var padding = 3,\n      margin = 13,\n      headerFunction,\n      lastCellPos = {\n    x: undefined,\n    y: undefined,\n    w: undefined,\n    h: undefined,\n    ln: undefined\n  },\n      pages = 1,\n      setLastCellPosition = function setLastCellPosition(x, y, w, h, ln) {\n    lastCellPos = {\n      'x': x,\n      'y': y,\n      'w': w,\n      'h': h,\n      'ln': ln\n    };\n  },\n      getLastCellPosition = function getLastCellPosition() {\n    return lastCellPos;\n  },\n      NO_MARGINS = {\n    left: 0,\n    top: 0,\n    bottom: 0\n  };\n  /**\n  * @name setHeaderFunction\n  * @function\n  * @param {function} func\n  */\n\n\n  jsPDFAPI.setHeaderFunction = function (func) {\n    headerFunction = func;\n  };\n  /**\n  * @name getTextDimensions\n  * @function\n  * @param {string} txt\n  * @returns {Object} dimensions\n  */\n\n\n  jsPDFAPI.getTextDimensions = function (text, options) {\n    var fontSize = this.table_font_size || this.internal.getFontSize();\n    var fontStyle = this.internal.getFont().fontStyle;\n    options = options || {};\n    var scaleFactor = options.scaleFactor || this.internal.scaleFactor;\n    var width = 0;\n    var amountOfLines = 0;\n    var height = 0;\n    var tempWidth = 0;\n\n    if (typeof text === 'string') {\n      width = this.getStringUnitWidth(text) * fontSize;\n\n      if (width !== 0) {\n        amountOfLines = 1;\n      }\n    } else if (Object.prototype.toString.call(text) === '[object Array]') {\n      for (var i = 0; i < text.length; i++) {\n        tempWidth = this.getStringUnitWidth(text[i]) * fontSize;\n\n        if (width < tempWidth) {\n          width = tempWidth;\n        }\n      }\n\n      if (width !== 0) {\n        amountOfLines = text.length;\n      }\n    } else {\n      throw new Error('getTextDimensions expects text-parameter to be of type String or an Array of Strings.');\n    }\n\n    width = width / scaleFactor;\n    height = Math.max((amountOfLines * fontSize * this.getLineHeightFactor() - fontSize * (this.getLineHeightFactor() - 1)) / scaleFactor, 0);\n    return {\n      w: width,\n      h: height\n    };\n  };\n  /**\n  * @name cellAddPage\n  * @function\n  */\n\n\n  jsPDFAPI.cellAddPage = function () {\n    var margins = this.margins || NO_MARGINS;\n    this.addPage();\n    setLastCellPosition(margins.left, margins.top, undefined, undefined); //setLastCellPosition(undefined, undefined, undefined, undefined, undefined);\n\n    pages += 1;\n  };\n  /**\n  * @name cellInitialize\n  * @function\n  */\n\n\n  jsPDFAPI.cellInitialize = function () {\n    lastCellPos = {\n      x: undefined,\n      y: undefined,\n      w: undefined,\n      h: undefined,\n      ln: undefined\n    };\n    pages = 1;\n  };\n  /**\n  * @name cell\n  * @function\n  * @param {number} x\n  * @param {number} y\n  * @param {number} w\n  * @param {number} h\n  * @param {string} txt\n  * @param {number} ln lineNumber\n  * @param {string} align\n  * @return {jsPDF} jsPDF-instance\n  */\n\n\n  jsPDFAPI.cell = function (x, y, w, h, txt, ln, align) {\n    var curCell = getLastCellPosition();\n    var pgAdded = false; // If this is not the first cell, we must change its position\n\n    if (curCell.ln !== undefined) {\n      if (curCell.ln === ln) {\n        //Same line\n        x = curCell.x + curCell.w;\n        y = curCell.y;\n      } else {\n        //New line\n        var margins = this.margins || NO_MARGINS;\n\n        if (curCell.y + curCell.h + h + margin >= this.internal.pageSize.getHeight() - margins.bottom) {\n          this.cellAddPage();\n          pgAdded = true;\n\n          if (this.printHeaders && this.tableHeaderRow) {\n            this.printHeaderRow(ln, true);\n          }\n        } //We ignore the passed y: the lines may have different heights\n\n\n        y = getLastCellPosition().y + getLastCellPosition().h;\n        if (pgAdded) y = margin + 10;\n      }\n    }\n\n    if (txt[0] !== undefined) {\n      if (this.printingHeaderRow) {\n        this.rect(x, y, w, h, 'FD');\n      } else {\n        this.rect(x, y, w, h);\n      }\n\n      if (align === 'right') {\n        if (!(txt instanceof Array)) {\n          txt = [txt];\n        }\n\n        for (var i = 0; i < txt.length; i++) {\n          var currentLine = txt[i];\n          var textSize = this.getStringUnitWidth(currentLine) * this.internal.getFontSize() / this.internal.scaleFactor;\n          this.text(currentLine, x + w - textSize - padding, y + this.internal.getLineHeight() * (i + 1));\n        }\n      } else {\n        this.text(txt, x + padding, y + this.internal.getLineHeight());\n      }\n    }\n\n    setLastCellPosition(x, y, w, h, ln);\n    return this;\n  };\n  /**\n   * Return the maximum value from an array\n   * \n   * @name arrayMax\n   * @function \n   * @param {Array} array\n   * @param comparisonFn\n   * @returns {number}\n   */\n\n\n  jsPDFAPI.arrayMax = function (array, comparisonFn) {\n    var max = array[0],\n        i,\n        ln,\n        item;\n\n    for (i = 0, ln = array.length; i < ln; i += 1) {\n      item = array[i];\n\n      if (comparisonFn) {\n        if (comparisonFn(max, item) === -1) {\n          max = item;\n        }\n      } else {\n        if (item > max) {\n          max = item;\n        }\n      }\n    }\n\n    return max;\n  };\n  /**\n   * Create a table from a set of data.\n   * @name table\n   * @function\n   * @param {Integer} [x] : left-position for top-left corner of table\n   * @param {Integer} [y] top-position for top-left corner of table\n   * @param {Object[]} [data] As array of objects containing key-value pairs corresponding to a row of data.\n   * @param {String[]} [headers] Omit or null to auto-generate headers at a performance cost\n    * @param {Object} [config.printHeaders] True to print column headers at the top of every page\n   * @param {Object} [config.autoSize] True to dynamically set the column widths to match the widest cell value\n   * @param {Object} [config.margins] margin values for left, top, bottom, and width\n   * @param {Object} [config.fontSize] Integer fontSize to use (optional)\n   * @returns {jsPDF} jsPDF-instance\n   */\n\n\n  jsPDFAPI.table = function (x, y, data, headers, config) {\n    if (!data) {\n      throw 'No data for PDF table';\n    }\n\n    var headerNames = [],\n        headerPrompts = [],\n        header,\n        i,\n        ln,\n        cln,\n        columnMatrix = {},\n        columnWidths = {},\n        columnData,\n        column,\n        columnMinWidths = [],\n        j,\n        tableHeaderConfigs = [],\n        model,\n        jln,\n        func,\n        //set up defaults. If a value is provided in config, defaults will be overwritten:\n    autoSize = false,\n        printHeaders = true,\n        fontSize = 12,\n        margins = NO_MARGINS;\n    margins.width = this.internal.pageSize.getWidth();\n\n    if (config) {\n      //override config defaults if the user has specified non-default behavior:\n      if (config.autoSize === true) {\n        autoSize = true;\n      }\n\n      if (config.printHeaders === false) {\n        printHeaders = false;\n      }\n\n      if (config.fontSize) {\n        fontSize = config.fontSize;\n      }\n\n      if (config.css && typeof config.css['font-size'] !== \"undefined\") {\n        fontSize = config.css['font-size'] * 16;\n      }\n\n      if (config.margins) {\n        margins = config.margins;\n      }\n    }\n    /**\n     * @property {Number} lnMod\n     * Keep track of the current line number modifier used when creating cells\n     */\n\n\n    this.lnMod = 0;\n    lastCellPos = {\n      x: undefined,\n      y: undefined,\n      w: undefined,\n      h: undefined,\n      ln: undefined\n    }, pages = 1;\n    this.printHeaders = printHeaders;\n    this.margins = margins;\n    this.setFontSize(fontSize);\n    this.table_font_size = fontSize; // Set header values\n\n    if (headers === undefined || headers === null) {\n      // No headers defined so we derive from data\n      headerNames = Object.keys(data[0]);\n    } else if (headers[0] && typeof headers[0] !== 'string') {\n      var px2pt = 0.264583 * 72 / 25.4; // Split header configs into names and prompts\n\n      for (i = 0, ln = headers.length; i < ln; i += 1) {\n        header = headers[i];\n        headerNames.push(header.name);\n        headerPrompts.push(header.prompt);\n        columnWidths[header.name] = header.width * px2pt;\n      }\n    } else {\n      headerNames = headers;\n    }\n\n    if (autoSize) {\n      // Create a matrix of columns e.g., {column_title: [row1_Record, row2_Record]}\n      func = function func(rec) {\n        return rec[header];\n      };\n\n      for (i = 0, ln = headerNames.length; i < ln; i += 1) {\n        header = headerNames[i];\n        columnMatrix[header] = data.map(func); // get header width\n\n        columnMinWidths.push(this.getTextDimensions(headerPrompts[i] || header, {\n          scaleFactor: 1\n        }).w);\n        column = columnMatrix[header]; // get cell widths\n\n        for (j = 0, cln = column.length; j < cln; j += 1) {\n          columnData = column[j];\n          columnMinWidths.push(this.getTextDimensions(columnData, {\n            scaleFactor: 1\n          }).w);\n        } // get final column width\n\n\n        columnWidths[header] = jsPDFAPI.arrayMax(columnMinWidths); //have to reset\n\n        columnMinWidths = [];\n      }\n    } // -- Construct the table\n\n\n    if (printHeaders) {\n      var lineHeight = this.calculateLineHeight(headerNames, columnWidths, headerPrompts.length ? headerPrompts : headerNames); // Construct the header row\n\n      for (i = 0, ln = headerNames.length; i < ln; i += 1) {\n        header = headerNames[i];\n        tableHeaderConfigs.push([x, y, columnWidths[header], lineHeight, String(headerPrompts.length ? headerPrompts[i] : header)]);\n      } // Store the table header config\n\n\n      this.setTableHeaderRow(tableHeaderConfigs); // Print the header for the start of the table\n\n      this.printHeaderRow(1, false);\n    } // Construct the data rows\n\n\n    for (i = 0, ln = data.length; i < ln; i += 1) {\n      var lineHeight;\n      model = data[i];\n      lineHeight = this.calculateLineHeight(headerNames, columnWidths, model);\n\n      for (j = 0, jln = headerNames.length; j < jln; j += 1) {\n        header = headerNames[j];\n        this.cell(x, y, columnWidths[header], lineHeight, model[header], i + 2, header.align);\n      }\n    }\n\n    this.lastCellPos = lastCellPos;\n    this.table_x = x;\n    this.table_y = y;\n    return this;\n  };\n  /**\n   * Calculate the height for containing the highest column\n   *\n   * @name calculateLineHeight\n   * @function\n   * @param {String[]} headerNames is the header, used as keys to the data\n   * @param {Integer[]} columnWidths is size of each column\n   * @param {Object[]} model is the line of data we want to calculate the height of\n   * @returns {number} lineHeight\n   */\n\n\n  jsPDFAPI.calculateLineHeight = function (headerNames, columnWidths, model) {\n    var header,\n        lineHeight = 0;\n\n    for (var j = 0; j < headerNames.length; j++) {\n      header = headerNames[j];\n      model[header] = this.splitTextToSize(String(model[header]), columnWidths[header] - padding);\n      var h = this.internal.getLineHeight() * model[header].length + padding;\n      if (h > lineHeight) lineHeight = h;\n    }\n\n    return lineHeight;\n  };\n  /**\n   * Store the config for outputting a table header\n   *\n   * @name setTableHeaderRow\n   * @function\n   * @param {Object[]} config\n   * An array of cell configs that would define a header row: Each config matches the config used by jsPDFAPI.cell\n   * except the ln parameter is excluded\n   */\n\n\n  jsPDFAPI.setTableHeaderRow = function (config) {\n    this.tableHeaderRow = config;\n  };\n  /**\n   * Output the store header row\n   * \n   * @name printHeaderRow\n   * @function\n   * @param {number} lineNumber The line number to output the header at\n   * @param {boolean} new_page \n   */\n\n\n  jsPDFAPI.printHeaderRow = function (lineNumber, new_page) {\n    if (!this.tableHeaderRow) {\n      throw 'Property tableHeaderRow does not exist.';\n    }\n\n    var tableHeaderCell, tmpArray, i, ln;\n    this.printingHeaderRow = true;\n\n    if (headerFunction !== undefined) {\n      var position = headerFunction(this, pages);\n      setLastCellPosition(position[0], position[1], position[2], position[3], -1);\n    }\n\n    this.setFontStyle('bold');\n    var tempHeaderConf = [];\n\n    for (i = 0, ln = this.tableHeaderRow.length; i < ln; i += 1) {\n      this.setFillColor(200, 200, 200);\n      tableHeaderCell = this.tableHeaderRow[i];\n\n      if (new_page) {\n        this.margins.top = margin;\n        tableHeaderCell[1] = this.margins && this.margins.top || 0;\n        tempHeaderConf.push(tableHeaderCell);\n      }\n\n      tmpArray = [].concat(tableHeaderCell);\n      this.cell.apply(this, tmpArray.concat(lineNumber));\n    }\n\n    if (tempHeaderConf.length > 0) {\n      this.setTableHeaderRow(tempHeaderConf);\n    }\n\n    this.setFontStyle('normal');\n    this.printingHeaderRow = false;\n  };\n})(jsPDF.API);\n\n/**\n * jsPDF Context2D PlugIn Copyright (c) 2014 Steven Spungin (TwelveTone LLC) steven@twelvetone.tv\n *\n * Licensed under the MIT License. http://opensource.org/licenses/mit-license\n */\n\n/**\n* This plugin mimics the HTML5 CanvasRenderingContext2D.\n*\n* The goal is to provide a way for current canvas implementations to print directly to a PDF.\n*\n* @name context2d\n* @module\n*/\n(function (jsPDFAPI, globalObj) {\n\n  var ContextLayer = function ContextLayer(ctx) {\n    ctx = ctx || {};\n    this.isStrokeTransparent = ctx.isStrokeTransparent || false;\n    this.strokeOpacity = ctx.strokeOpacity || 1;\n    this.strokeStyle = ctx.strokeStyle || '#000000';\n    this.fillStyle = ctx.fillStyle || '#000000';\n    this.isFillTransparent = ctx.isFillTransparent || false;\n    this.fillOpacity = ctx.fillOpacity || 1;\n    this.font = ctx.font || '10px sans-serif';\n    this.textBaseline = ctx.textBaseline || 'alphabetic';\n    this.textAlign = ctx.textAlign || 'left';\n    this.lineWidth = ctx.lineWidth || 1;\n    this.lineJoin = ctx.lineJoin || 'miter';\n    this.lineCap = ctx.lineCap || 'butt';\n    this.path = ctx.path || [];\n    this.transform = typeof ctx.transform !== 'undefined' ? ctx.transform.clone() : new Matrix();\n    this.globalCompositeOperation = ctx.globalCompositeOperation || 'normal';\n    this.globalAlpha = ctx.globalAlpha || 1.0;\n    this.clip_path = ctx.clip_path || [];\n    this.currentPoint = ctx.currentPoint || new Point();\n    this.miterLimit = ctx.miterLimit || 10.0;\n    this.lastPoint = ctx.lastPoint || new Point();\n    this.ignoreClearRect = typeof ctx.ignoreClearRect === \"boolean\" ? ctx.ignoreClearRect : true;\n    return this;\n  }; //stub\n\n\n  var f2, f3, getHorizontalCoordinateString, getVerticalCoordinateString, getHorizontalCoordinate, getVerticalCoordinate;\n  jsPDFAPI.events.push(['initialized', function () {\n    this.context2d = new Context2D(this);\n    f2 = this.internal.f2;\n    f3 = this.internal.f3;\n    getHorizontalCoordinateString = this.internal.getCoordinateString;\n    getVerticalCoordinateString = this.internal.getVerticalCoordinateString;\n    getHorizontalCoordinate = this.internal.getHorizontalCoordinate;\n    getVerticalCoordinate = this.internal.getVerticalCoordinate;\n  }]);\n\n  var Context2D = function Context2D(pdf) {\n    Object.defineProperty(this, 'canvas', {\n      get: function get() {\n        return {\n          parentNode: false,\n          style: false\n        };\n      }\n    });\n    Object.defineProperty(this, 'pdf', {\n      get: function get() {\n        return pdf;\n      }\n    });\n    var _pageWrapXEnabled = false;\n    /**\n    * @name pageWrapXEnabled\n    * @type {boolean}\n    * @default false\n    */\n\n    Object.defineProperty(this, 'pageWrapXEnabled', {\n      get: function get() {\n        return _pageWrapXEnabled;\n      },\n      set: function set(value) {\n        _pageWrapXEnabled = Boolean(value);\n      }\n    });\n    var _pageWrapYEnabled = false;\n    /**\n    * @name pageWrapYEnabled\n    * @type {boolean}\n    * @default true\n    */\n\n    Object.defineProperty(this, 'pageWrapYEnabled', {\n      get: function get() {\n        return _pageWrapYEnabled;\n      },\n      set: function set(value) {\n        _pageWrapYEnabled = Boolean(value);\n      }\n    });\n    var _posX = 0;\n    /**\n    * @name posX\n    * @type {number}\n    * @default 0\n    */\n\n    Object.defineProperty(this, 'posX', {\n      get: function get() {\n        return _posX;\n      },\n      set: function set(value) {\n        if (!isNaN(value)) {\n          _posX = value;\n        }\n      }\n    });\n    var _posY = 0;\n    /**\n    * @name posY\n    * @type {number}\n    * @default 0\n    */\n\n    Object.defineProperty(this, 'posY', {\n      get: function get() {\n        return _posY;\n      },\n      set: function set(value) {\n        if (!isNaN(value)) {\n          _posY = value;\n        }\n      }\n    });\n    var _autoPaging = false;\n    /**\n    * @name autoPaging\n    * @type {boolean}\n    * @default true\n    */\n\n    Object.defineProperty(this, 'autoPaging', {\n      get: function get() {\n        return _autoPaging;\n      },\n      set: function set(value) {\n        _autoPaging = Boolean(value);\n      }\n    });\n    var lastBreak = 0;\n    /**\n    * @name lastBreak\n    * @type {number}\n    * @default 0\n    */\n\n    Object.defineProperty(this, 'lastBreak', {\n      get: function get() {\n        return lastBreak;\n      },\n      set: function set(value) {\n        lastBreak = value;\n      }\n    });\n    var pageBreaks = [];\n    /**\n    * Y Position of page breaks.\n    * @name pageBreaks\n    * @type {number}\n    * @default 0\n    */\n\n    Object.defineProperty(this, 'pageBreaks', {\n      get: function get() {\n        return pageBreaks;\n      },\n      set: function set(value) {\n        pageBreaks = value;\n      }\n    });\n\n    var _ctx = new ContextLayer();\n    /**\n    * @name ctx\n    * @type {object}\n    * @default {}\n    */\n\n\n    Object.defineProperty(this, 'ctx', {\n      get: function get() {\n        return _ctx;\n      },\n      set: function set(value) {\n        if (value instanceof ContextLayer) {\n          _ctx = value;\n        }\n      }\n    });\n    /**\n    * @name path\n    * @type {array}\n    * @default []\n    */\n\n    Object.defineProperty(this, 'path', {\n      get: function get() {\n        return _ctx.path;\n      },\n      set: function set(value) {\n        _ctx.path = value;\n      }\n    });\n    /**\n    * @name ctxStack\n    * @type {array}\n    * @default []\n    */\n\n    var _ctxStack = [];\n    Object.defineProperty(this, 'ctxStack', {\n      get: function get() {\n        return _ctxStack;\n      },\n      set: function set(value) {\n        _ctxStack = value;\n      }\n    });\n    /**\n    * Sets or returns the color, gradient, or pattern used to fill the drawing\n    *\n    * @name fillStyle\n    * @default #000000\n    * @property {(color|gradient|pattern)} value The color of the drawing. Default value is #000000<br />\n    * A gradient object (linear or radial) used to fill the drawing (not supported by context2d)<br />\n    * A pattern object to use to fill the drawing (not supported by context2d)\n    */\n\n    Object.defineProperty(this, 'fillStyle', {\n      get: function get() {\n        return this.ctx.fillStyle;\n      },\n      set: function set(value) {\n        var rgba;\n        rgba = getRGBA(value);\n        this.ctx.fillStyle = rgba.style;\n        this.ctx.isFillTransparent = rgba.a === 0;\n        this.ctx.fillOpacity = rgba.a;\n        this.pdf.setFillColor(rgba.r, rgba.g, rgba.b, {\n          a: rgba.a\n        });\n        this.pdf.setTextColor(rgba.r, rgba.g, rgba.b, {\n          a: rgba.a\n        });\n      }\n    });\n    /**\n    * Sets or returns the color, gradient, or pattern used for strokes\n    *\n    * @name strokeStyle\n    * @default #000000\n    * @property {color} color A CSS color value that indicates the stroke color of the drawing. Default value is #000000 (not supported by context2d)\n    * @property {gradient} gradient A gradient object (linear or radial) used to create a gradient stroke (not supported by context2d)\n    * @property {pattern} pattern A pattern object used to create a pattern stroke (not supported by context2d)\n    */\n\n    Object.defineProperty(this, 'strokeStyle', {\n      get: function get() {\n        return this.ctx.strokeStyle;\n      },\n      set: function set(value) {\n        var rgba = getRGBA(value);\n        this.ctx.strokeStyle = rgba.style;\n        this.ctx.isStrokeTransparent = rgba.a === 0;\n        this.ctx.strokeOpacity = rgba.a;\n\n        if (rgba.a === 0) {\n          this.pdf.setDrawColor(255, 255, 255);\n        } else if (rgba.a === 1) {\n          this.pdf.setDrawColor(rgba.r, rgba.g, rgba.b);\n        } else {\n          this.pdf.setDrawColor(rgba.r, rgba.g, rgba.b);\n        }\n      }\n    });\n    /**\n    * Sets or returns the style of the end caps for a line\n    *\n    * @name lineCap\n    * @default butt\n    * @property {(butt|round|square)} lineCap butt A flat edge is added to each end of the line <br/>\n    * round A rounded end cap is added to each end of the line<br/>\n    * square A square end cap is added to each end of the line<br/>\n    */\n\n    Object.defineProperty(this, 'lineCap', {\n      get: function get() {\n        return this.ctx.lineCap;\n      },\n      set: function set(value) {\n        if (['butt', 'round', 'square'].indexOf(value) !== -1) {\n          this.ctx.lineCap = value;\n          this.pdf.setLineCap(value);\n        }\n      }\n    });\n    /**\n    * Sets or returns the current line width\n    *\n    * @name lineWidth\n    * @default 1\n    * @property {number} lineWidth The current line width, in pixels\n    */\n\n    Object.defineProperty(this, 'lineWidth', {\n      get: function get() {\n        return this.ctx.lineWidth;\n      },\n      set: function set(value) {\n        if (!isNaN(value)) {\n          this.ctx.lineWidth = value;\n          this.pdf.setLineWidth(value);\n        }\n      }\n    });\n    /**\n    * Sets or returns the type of corner created, when two lines meet\n    */\n\n    Object.defineProperty(this, 'lineJoin', {\n      get: function get() {\n        return this.ctx.lineJoin;\n      },\n      set: function set(value) {\n        if (['bevel', 'round', 'miter'].indexOf(value) !== -1) {\n          this.ctx.lineJoin = value;\n          this.pdf.setLineJoin(value);\n        }\n      }\n    });\n    /**\n    * A number specifying the miter limit ratio in coordinate space units. Zero, negative, Infinity, and NaN values are ignored. The default value is 10.0.\n    *\n    * @name miterLimit\n    * @default 10\n    */\n\n    Object.defineProperty(this, 'miterLimit', {\n      get: function get() {\n        return this.ctx.miterLimit;\n      },\n      set: function set(value) {\n        if (!isNaN(value)) {\n          this.ctx.miterLimit = value;\n          this.pdf.setMiterLimit(value);\n        }\n      }\n    });\n    Object.defineProperty(this, 'textBaseline', {\n      get: function get() {\n        return this.ctx.textBaseline;\n      },\n      set: function set(value) {\n        this.ctx.textBaseline = value;\n      }\n    });\n    Object.defineProperty(this, 'textAlign', {\n      get: function get() {\n        return this.ctx.textAlign;\n      },\n      set: function set(value) {\n        if (['right', 'end', 'center', 'left', 'start'].indexOf(value) !== -1) {\n          this.ctx.textAlign = value;\n        }\n      }\n    });\n    Object.defineProperty(this, 'font', {\n      get: function get() {\n        return this.ctx.font;\n      },\n      set: function set(value) {\n        this.ctx.font = value;\n        var rx, matches; //source: https://stackoverflow.com/a/10136041\n\n        rx = /^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))(?:\\s*\\/\\s*(normal|[.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])))?\\s*([-_,\\\"\\'\\sa-z]+?)\\s*$/i;\n        matches = rx.exec(value);\n\n        if (matches !== null) {\n          var fontStyle = matches[1];\n          var fontVariant = matches[2];\n          var fontWeight = matches[3];\n          var fontSize = matches[4];\n          var fontSizeUnit = matches[5];\n          var fontFamily = matches[6];\n        } else {\n          return;\n        }\n\n        if ('px' === fontSizeUnit) {\n          fontSize = Math.floor(parseFloat(fontSize));\n        } else if ('em' === fontSizeUnit) {\n          fontSize = Math.floor(parseFloat(fontSize) * this.pdf.getFontSize());\n        } else {\n          fontSize = Math.floor(parseFloat(fontSize));\n        }\n\n        this.pdf.setFontSize(fontSize);\n        var style = '';\n\n        if (fontWeight === 'bold' || parseInt(fontWeight, 10) >= 700 || fontStyle === 'bold') {\n          style = 'bold';\n        }\n\n        if (fontStyle === 'italic') {\n          style += 'italic';\n        }\n\n        if (style.length === 0) {\n          style = 'normal';\n        }\n\n        var jsPdfFontName = '';\n        var parts = fontFamily.toLowerCase().replace(/\"|'/g, '').split(/\\s*,\\s*/);\n        var fallbackFonts = {\n          arial: 'Helvetica',\n          verdana: 'Helvetica',\n          helvetica: 'Helvetica',\n          'sans-serif': 'Helvetica',\n          fixed: 'Courier',\n          monospace: 'Courier',\n          terminal: 'Courier',\n          courier: 'Courier',\n          times: 'Times',\n          cursive: 'Times',\n          fantasy: 'Times',\n          serif: 'Times'\n        };\n\n        for (var i = 0; i < parts.length; i++) {\n          if (this.pdf.internal.getFont(parts[i], style, {\n            noFallback: true,\n            disableWarning: true\n          }) !== undefined) {\n            jsPdfFontName = parts[i];\n            break;\n          } else if (style === 'bolditalic' && this.pdf.internal.getFont(parts[i], 'bold', {\n            noFallback: true,\n            disableWarning: true\n          }) !== undefined) {\n            jsPdfFontName = parts[i];\n            style = 'bold';\n          } else if (this.pdf.internal.getFont(parts[i], 'normal', {\n            noFallback: true,\n            disableWarning: true\n          }) !== undefined) {\n            jsPdfFontName = parts[i];\n            style = 'normal';\n            break;\n          }\n        }\n\n        if (jsPdfFontName === '') {\n          for (var i = 0; i < parts.length; i++) {\n            if (fallbackFonts[parts[i]]) {\n              jsPdfFontName = fallbackFonts[parts[i]];\n              break;\n            }\n          }\n        }\n\n        jsPdfFontName = jsPdfFontName === '' ? 'Times' : jsPdfFontName;\n        this.pdf.setFont(jsPdfFontName, style);\n      }\n    });\n    Object.defineProperty(this, 'globalCompositeOperation', {\n      get: function get() {\n        return this.ctx.globalCompositeOperation;\n      },\n      set: function set(value) {\n        this.ctx.globalCompositeOperation = value;\n      }\n    });\n    Object.defineProperty(this, 'globalAlpha', {\n      get: function get() {\n        return this.ctx.globalAlpha;\n      },\n      set: function set(value) {\n        this.ctx.globalAlpha = value;\n      }\n    }); // Not HTML API\n\n    Object.defineProperty(this, 'ignoreClearRect', {\n      get: function get() {\n        return this.ctx.ignoreClearRect;\n      },\n      set: function set(value) {\n        this.ctx.ignoreClearRect = Boolean(value);\n      }\n    });\n  };\n\n  Context2D.prototype.fill = function () {\n    pathPreProcess.call(this, 'fill', false);\n  };\n  /**\n  * Actually draws the path you have defined\n  *\n  * @name stroke\n  * @function\n  * @description The stroke() method actually draws the path you have defined with all those moveTo() and lineTo() methods. The default color is black.\n  */\n\n\n  Context2D.prototype.stroke = function () {\n    pathPreProcess.call(this, 'stroke', false);\n  };\n  /**\n  * Begins a path, or resets the current \n  *\n  * @name beginPath\n  * @function \n  * @description The beginPath() method begins a path, or resets the current path.\n  */\n\n\n  Context2D.prototype.beginPath = function () {\n    this.path = [{\n      type: 'begin'\n    }];\n  };\n  /**\n  * Moves the path to the specified point in the canvas, without creating a line\n  * \n  * @name moveTo\n  * @function\n  * @param x {Number} The x-coordinate of where to move the path to\n  * @param y {Number} The y-coordinate of where to move the path to\n  */\n\n\n  Context2D.prototype.moveTo = function (x, y) {\n    if (isNaN(x) || isNaN(y)) {\n      console.error('jsPDF.context2d.moveTo: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.moveTo');\n    }\n\n    var pt = this.ctx.transform.applyToPoint(new Point(x, y));\n    this.path.push({\n      type: 'mt',\n      x: pt.x,\n      y: pt.y\n    });\n    this.ctx.lastPoint = new Point(x, y);\n  };\n  /**\n  * Creates a path from the current point back to the starting point\n  * \n  * @name closePath\n  * @function\n  * @description The closePath() method creates a path from the current point back to the starting point.\n  */\n\n\n  Context2D.prototype.closePath = function () {\n    var pathBegin = new Point(0, 0);\n    var i = 0;\n\n    for (i = this.path.length - 1; i !== -1; i--) {\n      if (this.path[i].type === 'begin') {\n        if (_typeof(this.path[i + 1]) === 'object' && typeof this.path[i + 1].x === 'number') {\n          pathBegin = new Point(this.path[i + 1].x, this.path[i + 1].y);\n          this.path.push({\n            type: 'lt',\n            x: pathBegin.x,\n            y: pathBegin.y\n          });\n          break;\n        }\n      }\n    }\n\n    if (_typeof(this.path[i + 2]) === 'object' && typeof this.path[i + 2].x === 'number') {\n      this.path.push(JSON.parse(JSON.stringify(this.path[i + 2])));\n    }\n\n    this.path.push({\n      type: 'close'\n    });\n    this.ctx.lastPoint = new Point(pathBegin.x, pathBegin.y);\n  };\n  /**\n  * Adds a new point and creates a line to that point from the last specified point in the canvas\n  * \n  * @name lineTo\n  * @function\n  * @param x The x-coordinate of where to create the line to\n  * @param y The y-coordinate of where to create the line to\n  * @description The lineTo() method adds a new point and creates a line TO that point FROM the last specified point in the canvas (this method does not draw the line).\n  */\n\n\n  Context2D.prototype.lineTo = function (x, y) {\n    if (isNaN(x) || isNaN(y)) {\n      console.error('jsPDF.context2d.lineTo: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.lineTo');\n    }\n\n    var pt = this.ctx.transform.applyToPoint(new Point(x, y));\n    this.path.push({\n      type: 'lt',\n      x: pt.x,\n      y: pt.y\n    });\n    this.ctx.lastPoint = new Point(pt.x, pt.y);\n  };\n  /**\n  * Clips a region of any shape and size from the original canvas\n  * \n  * @name clip\n  * @function\n  * @description The clip() method clips a region of any shape and size from the original canvas.\n  */\n\n\n  Context2D.prototype.clip = function () {\n    this.ctx.clip_path = JSON.parse(JSON.stringify(this.path));\n    pathPreProcess.call(this, null, true);\n  };\n  /**\n  * Creates a cubic Bézier curve\n  *\n  * @name quadraticCurveTo\n  * @function\n  * @param cpx {Number} The x-coordinate of the Bézier control point\n  * @param cpy {Number} The y-coordinate of the Bézier control point\n  * @param x {Number} The x-coordinate of the ending point\n  * @param y {Number} The y-coordinate of the ending point\n  * @description The quadraticCurveTo() method adds a point to the current path by using the specified control points that represent a quadratic Bézier curve.<br /><br /> A quadratic Bézier curve requires two points. The first point is a control point that is used in the quadratic Bézier calculation and the second point is the ending point for the curve. The starting point for the curve is the last point in the current path. If a path does not exist, use the beginPath() and moveTo() methods to define a starting point.\n  */\n\n\n  Context2D.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {\n    if (isNaN(x) || isNaN(y) || isNaN(cpx) || isNaN(cpy)) {\n      console.error('jsPDF.context2d.quadraticCurveTo: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.quadraticCurveTo');\n    }\n\n    var pt0 = this.ctx.transform.applyToPoint(new Point(x, y));\n    var pt1 = this.ctx.transform.applyToPoint(new Point(cpx, cpy));\n    this.path.push({\n      type: 'qct',\n      x1: pt1.x,\n      y1: pt1.y,\n      x: pt0.x,\n      y: pt0.y\n    });\n    this.ctx.lastPoint = new Point(pt0.x, pt0.y);\n  };\n  /**\n  * Creates a cubic Bézier curve\n  *\n  * @name bezierCurveTo\n  * @function\n  * @param cp1x {Number} The x-coordinate of the first Bézier control point\n  * @param cp1y {Number} The y-coordinate of the first Bézier control point\n  * @param cp2x {Number} The x-coordinate of the second Bézier control point\n  * @param cp2y {Number} The y-coordinate of the second Bézier control point\n  * @param x {Number} The x-coordinate of the ending point\n  * @param y {Number} The y-coordinate of the ending point\n  * @description The bezierCurveTo() method adds a point to the current path by using the specified control points that represent a cubic Bézier curve. <br /><br />A cubic bezier curve requires three points. The first two points are control points that are used in the cubic Bézier calculation and the last point is the ending point for the curve.  The starting point for the curve is the last point in the current path. If a path does not exist, use the beginPath() and moveTo() methods to define a starting point.\n  */\n\n\n  Context2D.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n    if (isNaN(x) || isNaN(y) || isNaN(cp1x) || isNaN(cp1y) || isNaN(cp2x) || isNaN(cp2y)) {\n      console.error('jsPDF.context2d.bezierCurveTo: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.bezierCurveTo');\n    }\n\n    var pt0 = this.ctx.transform.applyToPoint(new Point(x, y));\n    var pt1 = this.ctx.transform.applyToPoint(new Point(cp1x, cp1y));\n    var pt2 = this.ctx.transform.applyToPoint(new Point(cp2x, cp2y));\n    this.path.push({\n      type: 'bct',\n      x1: pt1.x,\n      y1: pt1.y,\n      x2: pt2.x,\n      y2: pt2.y,\n      x: pt0.x,\n      y: pt0.y\n    });\n    this.ctx.lastPoint = new Point(pt0.x, pt0.y);\n  };\n  /**\n  * Creates an arc/curve (used to create circles, or parts of circles)\n  *\n  * @name arc\n  * @function\n  * @param x {Number} The x-coordinate of the center of the circle\n  * @param y {Number} The y-coordinate of the center of the circle\n  * @param radius {Number} The radius of the circle\n  * @param startAngle {Number} The starting angle, in radians (0 is at the 3 o'clock position of the arc's circle)\n  * @param endAngle {Number} The ending angle, in radians\n  * @param counterclockwise {Boolean} Optional. Specifies whether the drawing should be counterclockwise or clockwise. False is default, and indicates clockwise, while true indicates counter-clockwise.\n  * @description The arc() method creates an arc/curve (used to create circles, or parts of circles).\n  */\n\n\n  Context2D.prototype.arc = function (x, y, radius, startAngle, endAngle, counterclockwise) {\n    if (isNaN(x) || isNaN(y) || isNaN(radius) || isNaN(startAngle) || isNaN(endAngle)) {\n      console.error('jsPDF.context2d.arc: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.arc');\n    }\n\n    counterclockwise = Boolean(counterclockwise);\n\n    if (!this.ctx.transform.isIdentity) {\n      var xpt = this.ctx.transform.applyToPoint(new Point(x, y));\n      x = xpt.x;\n      y = xpt.y;\n      var x_radPt = this.ctx.transform.applyToPoint(new Point(0, radius));\n      var x_radPt0 = this.ctx.transform.applyToPoint(new Point(0, 0));\n      radius = Math.sqrt(Math.pow(x_radPt.x - x_radPt0.x, 2) + Math.pow(x_radPt.y - x_radPt0.y, 2));\n    }\n\n    if (Math.abs(endAngle - startAngle) >= 2 * Math.PI) {\n      startAngle = 0;\n      endAngle = 2 * Math.PI;\n    }\n\n    this.path.push({\n      type: 'arc',\n      x: x,\n      y: y,\n      radius: radius,\n      startAngle: startAngle,\n      endAngle: endAngle,\n      counterclockwise: counterclockwise\n    }); // this.ctx.lastPoint(new Point(pt.x,pt.y));\n  };\n  /**\n  * Creates an arc/curve between two tangents\n  * \n  * @name arcTo\n  * @function\n  * @param x1 {Number} The x-coordinate of the first tangent\n  * @param y1 {Number} The y-coordinate of the first tangent\n  * @param x2 {Number} The x-coordinate of the second tangent\n  * @param y2 {Number} The y-coordinate of the second tangent\n  * @param radius The radius of the arc\n  * @description The arcTo() method creates an arc/curve between two tangents on the canvas.\n  */\n\n\n  Context2D.prototype.arcTo = function (x1, y1, x2, y2, radius) {\n    throw new Error('arcTo not implemented.');\n  };\n  /**\n  * Creates a rectangle\n  *\n  * @name rect\n  * @function\n  * @param x {Number} The x-coordinate of the upper-left corner of the rectangle\n  * @param y {Number} The y-coordinate of the upper-left corner of the rectangle\n  * @param w {Number} The width of the rectangle, in pixels\n  * @param h {Number} The height of the rectangle, in pixels\n  * @description The rect() method creates a rectangle.\n  */\n\n\n  Context2D.prototype.rect = function (x, y, w, h) {\n    if (isNaN(x) || isNaN(y) || isNaN(w) || isNaN(h)) {\n      console.error('jsPDF.context2d.rect: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.rect');\n    }\n\n    this.moveTo(x, y);\n    this.lineTo(x + w, y);\n    this.lineTo(x + w, y + h);\n    this.lineTo(x, y + h);\n    this.lineTo(x, y);\n    this.lineTo(x + w, y);\n    this.lineTo(x, y);\n  };\n  /**\n  * Draws a \"filled\" rectangle\n  *\n  * @name fillRect\n  * @function\n  * @param x {Number} The x-coordinate of the upper-left corner of the rectangle\n  * @param y {Number} The y-coordinate of the upper-left corner of the rectangle\n  * @param w {Number} The width of the rectangle, in pixels\n  * @param h {Number} The height of the rectangle, in pixels\n  * @description The fillRect() method draws a \"filled\" rectangle. The default color of the fill is black.\n  */\n\n\n  Context2D.prototype.fillRect = function (x, y, w, h) {\n    if (isNaN(x) || isNaN(y) || isNaN(w) || isNaN(h)) {\n      console.error('jsPDF.context2d.fillRect: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.fillRect');\n    }\n\n    if (isFillTransparent.call(this)) {\n      return;\n    }\n\n    var tmp = {};\n\n    if (this.lineCap !== 'butt') {\n      tmp.lineCap = this.lineCap;\n      this.lineCap = 'butt';\n    }\n\n    if (this.lineJoin !== 'miter') {\n      tmp.lineJoin = this.lineJoin;\n      this.lineJoin = 'miter';\n    }\n\n    this.beginPath();\n    this.rect(x, y, w, h);\n    this.fill();\n\n    if (tmp.hasOwnProperty('lineCap')) {\n      this.lineCap = tmp.lineCap;\n    }\n\n    if (tmp.hasOwnProperty('lineJoin')) {\n      this.lineJoin = tmp.lineJoin;\n    }\n  };\n  /**\n  *     Draws a rectangle (no fill)\n  *\n  * @name strokeRect\n  * @function\n  * @param x {Number} The x-coordinate of the upper-left corner of the rectangle\n  * @param y {Number} The y-coordinate of the upper-left corner of the rectangle\n  * @param w {Number} The width of the rectangle, in pixels\n  * @param h {Number} The height of the rectangle, in pixels\n  * @description The strokeRect() method draws a rectangle (no fill). The default color of the stroke is black.\n  */\n\n\n  Context2D.prototype.strokeRect = function strokeRect(x, y, w, h) {\n    if (isNaN(x) || isNaN(y) || isNaN(w) || isNaN(h)) {\n      console.error('jsPDF.context2d.strokeRect: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.strokeRect');\n    }\n\n    if (isStrokeTransparent.call(this)) {\n      return;\n    }\n\n    this.beginPath();\n    this.rect(x, y, w, h);\n    this.stroke();\n  };\n  /**\n  * Clears the specified pixels within a given rectangle\n  *\n  * @name clearRect\n  * @function\n  * @param x {Number} The x-coordinate of the upper-left corner of the rectangle\n  * @param y {Number} The y-coordinate of the upper-left corner of the rectangle\n  * @param w {Number} The width of the rectangle to clear, in pixels\n  * @param h {Number} The height of the rectangle to clear, in pixels\n  * @description We cannot clear PDF commands that were already written to PDF, so we use white instead. <br />\n  * As a special case, read a special flag (ignoreClearRect) and do nothing if it is set.\n  * This results in all calls to clearRect() to do nothing, and keep the canvas transparent.\n  * This flag is stored in the save/restore context and is managed the same way as other drawing states.\n  *\n  */\n\n\n  Context2D.prototype.clearRect = function (x, y, w, h) {\n    if (isNaN(x) || isNaN(y) || isNaN(w) || isNaN(h)) {\n      console.error('jsPDF.context2d.clearRect: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.clearRect');\n    }\n\n    if (this.ignoreClearRect) {\n      return;\n    }\n\n    this.fillStyle = '#ffffff';\n    this.fillRect(x, y, w, h);\n  };\n  /**\n  * Saves the state of the current context\n  * \n  * @name save\n  * @function\n  */\n\n\n  Context2D.prototype.save = function (doStackPush) {\n    doStackPush = typeof doStackPush === 'boolean' ? doStackPush : true;\n    var tmpPageNumber = this.pdf.internal.getCurrentPageInfo().pageNumber;\n\n    for (var i = 0; i < this.pdf.internal.getNumberOfPages(); i++) {\n      this.pdf.setPage(i + 1);\n      this.pdf.internal.out('q');\n    }\n\n    this.pdf.setPage(tmpPageNumber);\n\n    if (doStackPush) {\n      this.ctx.fontSize = this.pdf.internal.getFontSize();\n      var ctx = new ContextLayer(this.ctx);\n      this.ctxStack.push(this.ctx);\n      this.ctx = ctx;\n    }\n  };\n  /**\n  * Returns previously saved path state and attributes\n  * \n  * @name restore\n  * @function\n  */\n\n\n  Context2D.prototype.restore = function (doStackPop) {\n    doStackPop = typeof doStackPop === 'boolean' ? doStackPop : true;\n    var tmpPageNumber = this.pdf.internal.getCurrentPageInfo().pageNumber;\n\n    for (var i = 0; i < this.pdf.internal.getNumberOfPages(); i++) {\n      this.pdf.setPage(i + 1);\n      this.pdf.internal.out('Q');\n    }\n\n    this.pdf.setPage(tmpPageNumber);\n\n    if (doStackPop && this.ctxStack.length !== 0) {\n      this.ctx = this.ctxStack.pop();\n      this.fillStyle = this.ctx.fillStyle;\n      this.strokeStyle = this.ctx.strokeStyle;\n      this.font = this.ctx.font;\n      this.lineCap = this.ctx.lineCap;\n      this.lineWidth = this.ctx.lineWidth;\n      this.lineJoin = this.ctx.lineJoin;\n    }\n  };\n  /** \n  * @name toDataURL\n  * @function\n  */\n\n\n  Context2D.prototype.toDataURL = function () {\n    throw new Error('toDataUrl not implemented.');\n  }; //helper functions\n\n  /**\n  * Get the decimal values of r, g, b and a\n  *\n  * @name getRGBA\n  * @function\n  * @private\n  * @ignore\n  */\n\n\n  var getRGBA = function getRGBA(style) {\n    var rxRgb = /rgb\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)/;\n    var rxRgba = /rgba\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*([\\d\\.]+)\\s*\\)/;\n    var rxTransparent = /transparent|rgba\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*0+\\s*\\)/;\n    var r, g, b, a;\n\n    if (style.isCanvasGradient === true) {\n      style = style.getColor();\n    }\n\n    if (!style) {\n      return {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 0,\n        style: style\n      };\n    }\n\n    if (rxTransparent.test(style)) {\n      r = 0;\n      g = 0;\n      b = 0;\n      a = 0;\n    } else {\n      var matches = rxRgb.exec(style);\n\n      if (matches !== null) {\n        r = parseInt(matches[1]);\n        g = parseInt(matches[2]);\n        b = parseInt(matches[3]);\n        a = 1;\n      } else {\n        matches = rxRgba.exec(style);\n\n        if (matches !== null) {\n          r = parseInt(matches[1]);\n          g = parseInt(matches[2]);\n          b = parseInt(matches[3]);\n          a = parseFloat(matches[4]);\n        } else {\n          a = 1;\n\n          if (typeof style === \"string\" && style.charAt(0) !== '#') {\n            var rgbColor = new RGBColor(style);\n\n            if (rgbColor.ok) {\n              style = rgbColor.toHex();\n            } else {\n              style = '#000000';\n            }\n          }\n\n          if (style.length === 4) {\n            r = style.substring(1, 2);\n            r += r;\n            g = style.substring(2, 3);\n            g += g;\n            b = style.substring(3, 4);\n            b += b;\n          } else {\n            r = style.substring(1, 3);\n            g = style.substring(3, 5);\n            b = style.substring(5, 7);\n          }\n\n          r = parseInt(r, 16);\n          g = parseInt(g, 16);\n          b = parseInt(b, 16);\n        }\n      }\n    }\n\n    return {\n      r: r,\n      g: g,\n      b: b,\n      a: a,\n      style: style\n    };\n  };\n  /**\n  * @name isFillTransparent\n  * @function \n  * @private\n  * @ignore\n  * @returns {Boolean}\n  */\n\n\n  var isFillTransparent = function isFillTransparent() {\n    return this.ctx.isFillTransparent || this.globalAlpha == 0;\n  };\n  /**\n  * @name isStrokeTransparent\n  * @function \n  * @private\n  * @ignore\n  * @returns {Boolean}\n  */\n\n\n  var isStrokeTransparent = function isStrokeTransparent() {\n    return Boolean(this.ctx.isStrokeTransparent || this.globalAlpha == 0);\n  };\n  /**\n  * Draws \"filled\" text on the canvas\n  * \n  * @name fillText\n  * @function\n  * @param text {String} Specifies the text that will be written on the canvas\n  * @param x {Number} The x coordinate where to start painting the text (relative to the canvas)\n  * @param y {Number} The y coordinate where to start painting the text (relative to the canvas)\n  * @param maxWidth {Number} Optional. The maximum allowed width of the text, in pixels\n  * @description The fillText() method draws filled text on the canvas. The default color of the text is black.\n  */\n\n\n  Context2D.prototype.fillText = function (text, x, y, maxWidth) {\n    if (isNaN(x) || isNaN(y) || typeof text !== 'string') {\n      console.error('jsPDF.context2d.fillText: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.fillText');\n    }\n\n    maxWidth = isNaN(maxWidth) ? undefined : maxWidth;\n\n    if (isFillTransparent.call(this)) {\n      return;\n    }\n\n    y = getBaseline.call(this, y);\n    var degs = rad2deg(this.ctx.transform.rotation); // We only use X axis as scale hint \n\n    var scale = this.ctx.transform.scaleX;\n    putText.call(this, {\n      text: text,\n      x: x,\n      y: y,\n      scale: scale,\n      angle: degs,\n      align: this.textAlign,\n      maxWidth: maxWidth\n    });\n  };\n  /**\n  * Draws text on the canvas (no fill)\n  * \n  * @name strokeText\n  * @function\n  * @param text {String} Specifies the text that will be written on the canvas\n  * @param x {Number} The x coordinate where to start painting the text (relative to the canvas)\n  * @param y {Number} The y coordinate where to start painting the text (relative to the canvas)\n  * @param maxWidth {Number} Optional. The maximum allowed width of the text, in pixels\n  * @description The strokeText() method draws text (with no fill) on the canvas. The default color of the text is black.\n  */\n\n\n  Context2D.prototype.strokeText = function (text, x, y, maxWidth) {\n    if (isNaN(x) || isNaN(y) || typeof text !== 'string') {\n      console.error('jsPDF.context2d.strokeText: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.strokeText');\n    }\n\n    if (isStrokeTransparent.call(this)) {\n      return;\n    }\n\n    maxWidth = isNaN(maxWidth) ? undefined : maxWidth;\n    y = getBaseline.call(this, y);\n    var degs = rad2deg(this.ctx.transform.rotation);\n    var scale = this.ctx.transform.scaleX;\n    putText.call(this, {\n      text: text,\n      x: x,\n      y: y,\n      scale: scale,\n      renderingMode: 'stroke',\n      angle: degs,\n      align: this.textAlign,\n      maxWidth: maxWidth\n    });\n  };\n  /**\n  * Returns an object that contains the width of the specified text\n  *\n  * @name measureText\n  * @function \n  * @param text {String} The text to be measured\n  * @description The measureText() method returns an object that contains the width of the specified text, in pixels.\n  * @returns {Number}\n  */\n\n\n  Context2D.prototype.measureText = function (text) {\n    if (typeof text !== 'string') {\n      console.error('jsPDF.context2d.measureText: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.measureText');\n    }\n\n    var pdf = this.pdf;\n    var k = this.pdf.internal.scaleFactor;\n    var fontSize = pdf.internal.getFontSize();\n    var txtWidth = pdf.getStringUnitWidth(text) * fontSize / pdf.internal.scaleFactor;\n    txtWidth *= Math.round(k * 96 / 72 * 10000) / 10000;\n\n    var TextMetrics = function TextMetrics(options) {\n      options = options || {};\n\n      var _width = options.width || 0;\n\n      Object.defineProperty(this, 'width', {\n        get: function get() {\n          return _width;\n        }\n      });\n      return this;\n    };\n\n    return new TextMetrics({\n      width: txtWidth\n    });\n  }; //Transformations\n\n  /**\n  * Scales the current drawing bigger or smaller\n  * \n  * @name scale \n  * @function\n  * @param scalewidth {Number} Scales the width of the current drawing (1=100%, 0.5=50%, 2=200%, etc.)\n  * @param scaleheight {Number} Scales the height of the current drawing (1=100%, 0.5=50%, 2=200%, etc.)\n  * @description The scale() method scales the current drawing, bigger or smaller.\n  */\n\n\n  Context2D.prototype.scale = function (scalewidth, scaleheight) {\n    if (isNaN(scalewidth) || isNaN(scaleheight)) {\n      console.error('jsPDF.context2d.scale: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.scale');\n    }\n\n    var matrix = new Matrix(scalewidth, 0.0, 0.0, scaleheight, 0.0, 0.0);\n    this.ctx.transform = this.ctx.transform.multiply(matrix);\n  };\n  /**\n  * Rotates the current drawing\n  * \n  * @name rotate\n  * @function\n  * @param angle {Number} The rotation angle, in radians.\n  * @description To calculate from degrees to radians: degrees*Math.PI/180. <br />\n  * Example: to rotate 5 degrees, specify the following: 5*Math.PI/180\n  */\n\n\n  Context2D.prototype.rotate = function (angle) {\n    if (isNaN(angle)) {\n      console.error('jsPDF.context2d.rotate: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.rotate');\n    }\n\n    var matrix = new Matrix(Math.cos(angle), Math.sin(angle), -Math.sin(angle), Math.cos(angle), 0.0, 0.0);\n    this.ctx.transform = this.ctx.transform.multiply(matrix);\n  };\n  /**\n  * Remaps the (0,0) position on the canvas\n  * \n  * @name translate\n  * @function\n  * @param x {Number} The value to add to horizontal (x) coordinates\n  * @param y {Number} The value to add to vertical (y) coordinates\n  * @description The translate() method remaps the (0,0) position on the canvas.\n  */\n\n\n  Context2D.prototype.translate = function (x, y) {\n    if (isNaN(x) || isNaN(y)) {\n      console.error('jsPDF.context2d.translate: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.translate');\n    }\n\n    var matrix = new Matrix(1.0, 0.0, 0.0, 1.0, x, y);\n    this.ctx.transform = this.ctx.transform.multiply(matrix);\n  };\n  /**\n  * Replaces the current transformation matrix for the drawing\n  * \n  * @name transform\n  * @function\n  * @param a {Number} Horizontal scaling\n  * @param b {Number} Horizontal skewing\n  * @param c {Number} Vertical skewing\n  * @param d {Number} Vertical scaling\n  * @param e {Number} Horizontal moving\n  * @param f {Number} Vertical moving\n  * @description Each object on the canvas has a current transformation matrix.<br /><br />The transform() method replaces the current transformation matrix. It multiplies the current transformation matrix with the matrix described by:<br /><br /><br /><br />a    c    e<br /><br />b    d    f<br /><br />0    0    1<br /><br />In other words, the transform() method lets you scale, rotate, move, and skew the current context.\n  */\n\n\n  Context2D.prototype.transform = function (a, b, c, d, e, f) {\n    if (isNaN(a) || isNaN(b) || isNaN(c) || isNaN(d) || isNaN(e) || isNaN(f)) {\n      console.error('jsPDF.context2d.transform: Invalid arguments', arguments);\n      throw new Error('Invalid arguments passed to jsPDF.context2d.transform');\n    }\n\n    var matrix = new Matrix(a, b, c, d, e, f);\n    this.ctx.transform = this.ctx.transform.multiply(matrix);\n  };\n  /**\n  * Resets the current transform to the identity matrix. Then runs transform()\n  * \n  * @name setTransform\n  * @function\n  * @param a {Number} Horizontal scaling\n  * @param b {Number} Horizontal skewing\n  * @param c {Number} Vertical skewing\n  * @param d {Number} Vertical scaling\n  * @param e {Number} Horizontal moving\n  * @param f {Number} Vertical moving\n  * @description Each object on the canvas has a current transformation matrix. <br /><br />The setTransform() method resets the current transform to the identity matrix, and then runs transform() with the same arguments.<br /><br />In other words, the setTransform() method lets you scale, rotate, move, and skew the current context.\n  */\n\n\n  Context2D.prototype.setTransform = function (a, b, c, d, e, f) {\n    a = isNaN(a) ? 1 : a;\n    b = isNaN(b) ? 0 : b;\n    c = isNaN(c) ? 0 : c;\n    d = isNaN(d) ? 1 : d;\n    e = isNaN(e) ? 0 : e;\n    f = isNaN(f) ? 0 : f;\n    this.ctx.transform = new Matrix(a, b, c, d, e, f);\n  };\n  /**\n  * Draws an image, canvas, or video onto the canvas\n  * \n  * @function \n  * @param img {} Specifies the image, canvas, or video element to use\n  * @param sx {Number} Optional. The x coordinate where to start clipping\n  * @param sy {Number} Optional. The y coordinate where to start clipping\n  * @param swidth {Number} Optional. The width of the clipped image\n  * @param sheight {Number} Optional. The height of the clipped image\n  * @param x {Number} The x coordinate where to place the image on the canvas\n  * @param y {Number} The y coordinate where to place the image on the canvas\n  * @param width {Number} Optional. The width of the image to use (stretch or reduce the image)\n  * @param height {Number} Optional. The height of the image to use (stretch or reduce the image)\n  */\n\n\n  Context2D.prototype.drawImage = function (img, sx, sy, swidth, sheight, x, y, width, height) {\n    var imageProperties = this.pdf.getImageProperties(img);\n    var factorX = 1;\n    var factorY = 1;\n    var clipFactorX = 1;\n    var clipFactorY = 1;\n    var scaleFactorX = 1;\n\n    if (typeof swidth !== 'undefined' && typeof width !== 'undefined') {\n      clipFactorX = width / swidth;\n      clipFactorY = height / sheight;\n      factorX = imageProperties.width / swidth * width / swidth;\n      factorY = imageProperties.height / sheight * height / sheight;\n    } //is sx and sy are set and x and y not, set x and y with values of sx and sy\n\n\n    if (typeof x === 'undefined') {\n      x = sx;\n      y = sy;\n      sx = 0;\n      sy = 0;\n    }\n\n    if (typeof swidth !== 'undefined' && typeof width === 'undefined') {\n      width = swidth;\n      height = sheight;\n    }\n\n    if (typeof swidth === 'undefined' && typeof width === 'undefined') {\n      width = imageProperties.width;\n      height = imageProperties.height;\n    }\n\n    var decomposedTransformationMatrix = this.ctx.transform.decompose();\n    var angle = rad2deg(decomposedTransformationMatrix.rotate.shx);\n    scaleFactorX = decomposedTransformationMatrix.scale.sx;\n    scaleFactorX = decomposedTransformationMatrix.scale.sy;\n    var matrix = new Matrix();\n    matrix = matrix.multiply(decomposedTransformationMatrix.translate);\n    matrix = matrix.multiply(decomposedTransformationMatrix.skew);\n    matrix = matrix.multiply(decomposedTransformationMatrix.scale);\n    var mP = matrix.applyToPoint(new Point(width, height));\n    var xRect = matrix.applyToRectangle(new Rectangle(x - sx * clipFactorX, y - sy * clipFactorY, swidth * factorX, sheight * factorY));\n    var pageArray = getPagesByPath.call(this, xRect);\n    var pages = [];\n\n    for (var ii = 0; ii < pageArray.length; ii += 1) {\n      if (pages.indexOf(pageArray[ii]) === -1) {\n        pages.push(pageArray[ii]);\n      }\n    }\n\n    pages.sort();\n    var clipPath;\n\n    if (this.autoPaging) {\n      var min = pages[0];\n      var max = pages[pages.length - 1];\n\n      for (var i = min; i < max + 1; i++) {\n        this.pdf.setPage(i);\n\n        if (this.ctx.clip_path.length !== 0) {\n          var tmpPaths = this.path;\n          clipPath = JSON.parse(JSON.stringify(this.ctx.clip_path));\n          this.path = pathPositionRedo(clipPath, this.posX, -1 * this.pdf.internal.pageSize.height * (i - 1) + this.posY);\n          drawPaths.call(this, 'fill', true);\n          this.path = tmpPaths;\n        }\n\n        var tmpRect = JSON.parse(JSON.stringify(xRect));\n        tmpRect = pathPositionRedo([tmpRect], this.posX, -1 * this.pdf.internal.pageSize.height * (i - 1) + this.posY)[0];\n        this.pdf.addImage(img, 'jpg', tmpRect.x, tmpRect.y, tmpRect.w, tmpRect.h, null, null, angle);\n      }\n    } else {\n      this.pdf.addImage(img, 'jpg', xRect.x, xRect.y, xRect.w, xRect.h, null, null, angle);\n    }\n  };\n\n  var getPagesByPath = function getPagesByPath(path, pageWrapX, pageWrapY) {\n    var result = [];\n    pageWrapX = pageWrapX || this.pdf.internal.pageSize.width;\n    pageWrapY = pageWrapY || this.pdf.internal.pageSize.height;\n\n    switch (path.type) {\n      default:\n      case 'mt':\n      case 'lt':\n        result.push(Math.floor((path.y + this.posY) / pageWrapY) + 1);\n        break;\n\n      case 'arc':\n        result.push(Math.floor((path.y + this.posY - path.radius) / pageWrapY) + 1);\n        result.push(Math.floor((path.y + this.posY + path.radius) / pageWrapY) + 1);\n        break;\n\n      case 'qct':\n        var rectOfQuadraticCurve = getQuadraticCurveBoundary(this.ctx.lastPoint.x, this.ctx.lastPoint.y, path.x1, path.y1, path.x, path.y);\n        result.push(Math.floor(rectOfQuadraticCurve.y / pageWrapY) + 1);\n        result.push(Math.floor((rectOfQuadraticCurve.y + rectOfQuadraticCurve.h) / pageWrapY) + 1);\n        break;\n\n      case 'bct':\n        var rectOfBezierCurve = getBezierCurveBoundary(this.ctx.lastPoint.x, this.ctx.lastPoint.y, path.x1, path.y1, path.x2, path.y2, path.x, path.y);\n        result.push(Math.floor(rectOfBezierCurve.y / pageWrapY) + 1);\n        result.push(Math.floor((rectOfBezierCurve.y + rectOfBezierCurve.h) / pageWrapY) + 1);\n        break;\n\n      case 'rect':\n        result.push(Math.floor((path.y + this.posY) / pageWrapY) + 1);\n        result.push(Math.floor((path.y + path.h + this.posY) / pageWrapY) + 1);\n    }\n\n    for (var i = 0; i < result.length; i += 1) {\n      while (this.pdf.internal.getNumberOfPages() < result[i]) {\n        addPage.call(this);\n      }\n    }\n\n    return result;\n  };\n\n  var addPage = function addPage() {\n    var fillStyle = this.fillStyle;\n    var strokeStyle = this.strokeStyle;\n    var font = this.font;\n    var lineCap = this.lineCap;\n    var lineWidth = this.lineWidth;\n    var lineJoin = this.lineJoin;\n    this.pdf.addPage();\n    this.fillStyle = fillStyle;\n    this.strokeStyle = strokeStyle;\n    this.font = font;\n    this.lineCap = lineCap;\n    this.lineWidth = lineWidth;\n    this.lineJoin = lineJoin;\n  };\n\n  var pathPositionRedo = function pathPositionRedo(paths, x, y) {\n    for (var i = 0; i < paths.length; i++) {\n      switch (paths[i].type) {\n        case 'bct':\n          paths[i].x2 += x;\n          paths[i].y2 += y;\n\n        case 'qct':\n          paths[i].x1 += x;\n          paths[i].y1 += y;\n\n        case 'mt':\n        case 'lt':\n        case 'arc':\n        default:\n          paths[i].x += x;\n          paths[i].y += y;\n      }\n    }\n\n    return paths;\n  };\n\n  var pathPreProcess = function pathPreProcess(rule, isClip) {\n    var fillStyle = this.fillStyle;\n    var strokeStyle = this.strokeStyle;\n    var font = this.font;\n    var lineCap = this.lineCap;\n    var lineWidth = this.lineWidth;\n    var lineJoin = this.lineJoin;\n    var origPath = JSON.parse(JSON.stringify(this.path));\n    var xPath = JSON.parse(JSON.stringify(this.path));\n    var clipPath;\n    var tmpPath;\n    var pages = [];\n\n    for (var i = 0; i < xPath.length; i++) {\n      if (typeof xPath[i].x !== \"undefined\") {\n        var page = getPagesByPath.call(this, xPath[i]);\n\n        for (var ii = 0; ii < page.length; ii += 1) {\n          if (pages.indexOf(page[ii]) === -1) {\n            pages.push(page[ii]);\n          }\n        }\n      }\n    }\n\n    for (var i = 0; i < pages.length; i++) {\n      while (this.pdf.internal.getNumberOfPages() < pages[i]) {\n        addPage.call(this);\n      }\n    }\n\n    pages.sort();\n\n    if (this.autoPaging) {\n      var min = pages[0];\n      var max = pages[pages.length - 1];\n\n      for (var i = min; i < max + 1; i++) {\n        this.pdf.setPage(i);\n        this.fillStyle = fillStyle;\n        this.strokeStyle = strokeStyle;\n        this.lineCap = lineCap;\n        this.lineWidth = lineWidth;\n        this.lineJoin = lineJoin;\n\n        if (this.ctx.clip_path.length !== 0) {\n          var tmpPaths = this.path;\n          clipPath = JSON.parse(JSON.stringify(this.ctx.clip_path));\n          this.path = pathPositionRedo(clipPath, this.posX, -1 * this.pdf.internal.pageSize.height * (i - 1) + this.posY);\n          drawPaths.call(this, rule, true);\n          this.path = tmpPaths;\n        }\n\n        tmpPath = JSON.parse(JSON.stringify(origPath));\n        this.path = pathPositionRedo(tmpPath, this.posX, -1 * this.pdf.internal.pageSize.height * (i - 1) + this.posY);\n\n        if (isClip === false || i === 0) {\n          drawPaths.call(this, rule, isClip);\n        }\n      }\n    } else {\n      drawPaths.call(this, rule, isClip);\n    }\n\n    this.path = origPath;\n  };\n  /**\n  * Processes the paths\n  *\n  * @function \n  * @param rule {String}\n  * @param isClip {Boolean}\n  * @private\n  * @ignore\n  */\n\n\n  var drawPaths = function drawPaths(rule, isClip) {\n    if (rule === 'stroke' && !isClip && isStrokeTransparent.call(this)) {\n      return;\n    }\n\n    if (rule !== 'stroke' && !isClip && isFillTransparent.call(this)) {\n      return;\n    }\n\n    var moves = [];\n    var alpha = this.ctx.globalAlpha;\n\n    if (this.ctx.fillOpacity < 1) {\n      alpha = this.ctx.fillOpacity;\n    }\n\n    var xPath = this.path;\n\n    for (var i = 0; i < xPath.length; i++) {\n      var pt = xPath[i];\n\n      switch (pt.type) {\n        case 'begin':\n          moves.push({\n            begin: true\n          });\n          break;\n\n        case 'close':\n          moves.push({\n            close: true\n          });\n          break;\n\n        case 'mt':\n          moves.push({\n            start: pt,\n            deltas: [],\n            abs: []\n          });\n          break;\n\n        case 'lt':\n          var iii = moves.length;\n\n          if (!isNaN(xPath[i - 1].x)) {\n            var delta = [pt.x - xPath[i - 1].x, pt.y - xPath[i - 1].y];\n\n            if (iii > 0) {\n              for (iii; iii >= 0; iii--) {\n                if (moves[iii - 1].close !== true && moves[iii - 1].begin !== true) {\n                  moves[iii - 1].deltas.push(delta);\n                  moves[iii - 1].abs.push(pt);\n                  break;\n                }\n              }\n            }\n          }\n\n          break;\n\n        case 'bct':\n          var delta = [pt.x1 - xPath[i - 1].x, pt.y1 - xPath[i - 1].y, pt.x2 - xPath[i - 1].x, pt.y2 - xPath[i - 1].y, pt.x - xPath[i - 1].x, pt.y - xPath[i - 1].y];\n          moves[moves.length - 1].deltas.push(delta);\n          break;\n\n        case 'qct':\n          var x1 = xPath[i - 1].x + 2.0 / 3.0 * (pt.x1 - xPath[i - 1].x);\n          var y1 = xPath[i - 1].y + 2.0 / 3.0 * (pt.y1 - xPath[i - 1].y);\n          var x2 = pt.x + 2.0 / 3.0 * (pt.x1 - pt.x);\n          var y2 = pt.y + 2.0 / 3.0 * (pt.y1 - pt.y);\n          var x3 = pt.x;\n          var y3 = pt.y;\n          var delta = [x1 - xPath[i - 1].x, y1 - xPath[i - 1].y, x2 - xPath[i - 1].x, y2 - xPath[i - 1].y, x3 - xPath[i - 1].x, y3 - xPath[i - 1].y];\n          moves[moves.length - 1].deltas.push(delta);\n          break;\n\n        case 'arc':\n          moves.push({\n            deltas: [],\n            abs: [],\n            arc: true\n          });\n\n          if (Array.isArray(moves[moves.length - 1].abs)) {\n            moves[moves.length - 1].abs.push(pt);\n          }\n\n          break;\n      }\n    }\n\n    var style;\n\n    if (!isClip) {\n      if (rule === 'stroke') {\n        style = 'stroke';\n      } else {\n        style = 'fill';\n      }\n    } else {\n      style = null;\n    }\n\n    for (var i = 0; i < moves.length; i++) {\n      if (moves[i].arc) {\n        var arcs = moves[i].abs;\n\n        for (var ii = 0; ii < arcs.length; ii++) {\n          var arc = arcs[ii];\n\n          if (typeof arc.startAngle !== 'undefined') {\n            var start = rad2deg(arc.startAngle);\n            var end = rad2deg(arc.endAngle);\n            var x = arc.x;\n            var y = arc.y;\n            drawArc.call(this, x, y, arc.radius, start, end, arc.counterclockwise, style, isClip);\n          } else {\n            drawLine.call(this, arc.x, arc.y);\n          }\n        }\n      }\n\n      if (!moves[i].arc) {\n        if (moves[i].close !== true && moves[i].begin !== true) {\n          var x = moves[i].start.x;\n          var y = moves[i].start.y;\n          drawLines.call(this, moves[i].deltas, x, y, null, null);\n        }\n      }\n    }\n\n    if (style) {\n      putStyle.call(this, style);\n    }\n\n    if (isClip) {\n      doClip.call(this);\n    }\n  };\n\n  var getBaseline = function getBaseline(y) {\n    var height = this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor;\n    var descent = height * (this.pdf.internal.getLineHeightFactor() - 1);\n\n    switch (this.ctx.textBaseline) {\n      case 'bottom':\n        return y - descent;\n\n      case 'top':\n        return y + height - descent;\n\n      case 'hanging':\n        return y + height - 2 * descent;\n\n      case 'middle':\n        return y + height / 2 - descent;\n\n      case 'ideographic':\n        // TODO not implemented\n        return y;\n\n      case 'alphabetic':\n      default:\n        return y;\n    }\n  };\n\n  Context2D.prototype.createLinearGradient = function createLinearGradient() {\n    var canvasGradient = function canvasGradient() {};\n\n    canvasGradient.colorStops = [];\n\n    canvasGradient.addColorStop = function (offset, color) {\n      this.colorStops.push([offset, color]);\n    };\n\n    canvasGradient.getColor = function () {\n      if (this.colorStops.length === 0) {\n        return '#000000';\n      }\n\n      return this.colorStops[0][1];\n    };\n\n    canvasGradient.isCanvasGradient = true;\n    return canvasGradient;\n  };\n\n  Context2D.prototype.createPattern = function createPattern() {\n    return this.createLinearGradient();\n  };\n\n  Context2D.prototype.createRadialGradient = function createRadialGradient() {\n    return this.createLinearGradient();\n  };\n  /**\n  *\n  * @param x Edge point X\n  * @param y Edge point Y\n  * @param r Radius\n  * @param a1 start angle\n  * @param a2 end angle\n  * @param counterclockwise\n  * @param style\n  * @param isClip\n  */\n\n\n  var drawArc = function drawArc(x, y, r, a1, a2, counterclockwise, style, isClip) {\n    var k = this.pdf.internal.scaleFactor;\n    var a1r = deg2rad(a1);\n    var a2r = deg2rad(a2);\n    var curves = createArc.call(this, r, a1r, a2r, counterclockwise);\n\n    for (var i = 0; i < curves.length; i++) {\n      var curve = curves[i];\n\n      if (i === 0) {\n        doMove.call(this, curve.x1 + x, curve.y1 + y);\n      }\n      drawCurve.call(this, x, y, curve.x2, curve.y2, curve.x3, curve.y3, curve.x4, curve.y4);\n    }\n\n    if (!isClip) {\n      putStyle.call(this, style);\n    } else {\n      doClip.call(this);\n    }\n  };\n\n  var putStyle = function putStyle(style) {\n    switch (style) {\n      case 'stroke':\n        this.pdf.internal.out('S');\n        break;\n\n      case 'fill':\n        this.pdf.internal.out('f');\n        break;\n    }\n  };\n\n  var doClip = function doClip() {\n    this.pdf.clip();\n  };\n\n  var doMove = function doMove(x, y) {\n    this.pdf.internal.out(getHorizontalCoordinateString(x) + ' ' + getVerticalCoordinateString(y) + ' m');\n  };\n\n  var putText = function putText(options) {\n    var textAlign;\n\n    switch (options.align) {\n      case 'right':\n      case 'end':\n        textAlign = 'right';\n        break;\n\n      case 'center':\n        textAlign = 'center';\n        break;\n\n      case 'left':\n      case 'start':\n      default:\n        textAlign = 'left';\n        break;\n    }\n\n    var pt = this.ctx.transform.applyToPoint(new Point(options.x, options.y));\n    var decomposedTransformationMatrix = this.ctx.transform.decompose();\n    var matrix = new Matrix();\n    matrix = matrix.multiply(decomposedTransformationMatrix.translate);\n    matrix = matrix.multiply(decomposedTransformationMatrix.skew);\n    matrix = matrix.multiply(decomposedTransformationMatrix.scale);\n    var textDimensions = this.pdf.getTextDimensions(options.text);\n    var textRect = this.ctx.transform.applyToRectangle(new Rectangle(options.x, options.y, textDimensions.w, textDimensions.h));\n    var textXRect = matrix.applyToRectangle(new Rectangle(options.x, options.y - textDimensions.h, textDimensions.w, textDimensions.h));\n    var pageArray = getPagesByPath.call(this, textXRect);\n    var pages = [];\n\n    for (var ii = 0; ii < pageArray.length; ii += 1) {\n      if (pages.indexOf(pageArray[ii]) === -1) {\n        pages.push(pageArray[ii]);\n      }\n    }\n\n    pages.sort();\n    var clipPath;\n\n    if (this.autoPaging === true) {\n      var min = pages[0];\n      var max = pages[pages.length - 1];\n\n      for (var i = min; i < max + 1; i++) {\n        this.pdf.setPage(i);\n\n        if (this.ctx.clip_path.length !== 0) {\n          var tmpPaths = this.path;\n          clipPath = JSON.parse(JSON.stringify(this.ctx.clip_path));\n          this.path = pathPositionRedo(clipPath, this.posX, -1 * this.pdf.internal.pageSize.height * (i - 1) + this.posY);\n          drawPaths.call(this, 'fill', true);\n          this.path = tmpPaths;\n        }\n\n        var tmpRect = JSON.parse(JSON.stringify(textRect));\n        tmpRect = pathPositionRedo([tmpRect], this.posX, -1 * this.pdf.internal.pageSize.height * (i - 1) + this.posY)[0];\n\n        if (options.scale >= 0.01) {\n          var oldSize = this.pdf.internal.getFontSize();\n          this.pdf.setFontSize(oldSize * options.scale);\n        }\n\n        this.pdf.text(options.text, tmpRect.x, tmpRect.y, {\n          angle: options.angle,\n          align: textAlign,\n          renderingMode: options.renderingMode,\n          maxWidth: options.maxWidth\n        });\n\n        if (options.scale >= 0.01) {\n          this.pdf.setFontSize(oldSize);\n        }\n      }\n    } else {\n      if (options.scale >= 0.01) {\n        var oldSize = this.pdf.internal.getFontSize();\n        this.pdf.setFontSize(oldSize * options.scale);\n      }\n\n      this.pdf.text(options.text, pt.x + this.posX, pt.y + this.posY, {\n        angle: options.angle,\n        align: textAlign,\n        renderingMode: options.renderingMode,\n        maxWidth: options.maxWidth\n      });\n\n      if (options.scale >= 0.01) {\n        this.pdf.setFontSize(oldSize);\n      }\n    }\n  };\n\n  var drawLine = function drawLine(x, y, prevX, prevY) {\n    prevX = prevX || 0;\n    prevY = prevY || 0;\n    this.pdf.internal.out(getHorizontalCoordinateString(x + prevX) + ' ' + getVerticalCoordinateString(y + prevY) + ' l');\n  };\n\n  var drawLines = function drawLines(lines, x, y) {\n    return this.pdf.lines(lines, x, y, null, null);\n  };\n\n  var drawCurve = function drawCurve(x, y, x1, y1, x2, y2, x3, y3) {\n    this.pdf.internal.out([f2(getHorizontalCoordinate(x1 + x)), f2(getVerticalCoordinate(y1 + y)), f2(getHorizontalCoordinate(x2 + x)), f2(getVerticalCoordinate(y2 + y)), f2(getHorizontalCoordinate(x3 + x)), f2(getVerticalCoordinate(y3 + y)), 'c'].join(' '));\n  };\n  /**\n  * Return a array of objects that represent bezier curves which approximate the circular arc centered at the origin, from startAngle to endAngle (radians) with the specified radius.\n  *\n  * Each bezier curve is an object with four points, where x1,y1 and x4,y4 are the arc's end points and x2,y2 and x3,y3 are the cubic bezier's control points.\n  * @function createArc\n  */\n\n\n  var createArc = function createArc(radius, startAngle, endAngle, anticlockwise) {\n    var EPSILON = 0.00001; // Roughly 1/1000th of a degree, see below        // normalize startAngle, endAngle to [-2PI, 2PI]\n\n    var twoPI = Math.PI * 2;\n    var startAngleN = startAngle;\n\n    if (startAngleN < twoPI || startAngleN > twoPI) {\n      startAngleN = startAngleN % twoPI;\n    }\n\n    var endAngleN = endAngle;\n\n    if (endAngleN < twoPI || endAngleN > twoPI) {\n      endAngleN = endAngleN % twoPI;\n    } // Compute the sequence of arc curves, up to PI/2 at a time.        // Total arc angle is less than 2PI.\n\n\n    var curves = [];\n    var piOverTwo = Math.PI / 2.0; //var sgn = (startAngle < endAngle) ? +1 : -1; // clockwise or counterclockwise\n\n    var sgn = anticlockwise ? -1 : +1;\n    var a1 = startAngle;\n\n    for (var totalAngle = Math.min(twoPI, Math.abs(endAngleN - startAngleN)); totalAngle > EPSILON;) {\n      var a2 = a1 + sgn * Math.min(totalAngle, piOverTwo);\n      curves.push(createSmallArc.call(this, radius, a1, a2));\n      totalAngle -= Math.abs(a2 - a1);\n      a1 = a2;\n    }\n\n    return curves;\n  };\n  /**\n  * Cubic bezier approximation of a circular arc centered at the origin, from (radians) a1 to a2, where a2-a1 < pi/2. The arc's radius is r.\n  *\n  * Returns an object with four points, where x1,y1 and x4,y4 are the arc's end points and x2,y2 and x3,y3 are the cubic bezier's control points.\n  *\n  * This algorithm is based on the approach described in: A. Riškus, \"Approximation of a Cubic Bezier Curve by Circular Arcs and Vice Versa,\" Information Technology and Control, 35(4), 2006 pp. 371-378.\n  */\n\n\n  var createSmallArc = function createSmallArc(r, a1, a2) {\n    var a = (a2 - a1) / 2.0;\n    var x4 = r * Math.cos(a);\n    var y4 = r * Math.sin(a);\n    var x1 = x4;\n    var y1 = -y4;\n    var q1 = x1 * x1 + y1 * y1;\n    var q2 = q1 + x1 * x4 + y1 * y4;\n    var k2 = 4 / 3 * (Math.sqrt(2 * q1 * q2) - q2) / (x1 * y4 - y1 * x4);\n    var x2 = x1 - k2 * y1;\n    var y2 = y1 + k2 * x1;\n    var x3 = x2;\n    var y3 = -y2;\n    var ar = a + a1;\n    var cos_ar = Math.cos(ar);\n    var sin_ar = Math.sin(ar);\n    return {\n      x1: r * Math.cos(a1),\n      y1: r * Math.sin(a1),\n      x2: x2 * cos_ar - y2 * sin_ar,\n      y2: x2 * sin_ar + y2 * cos_ar,\n      x3: x3 * cos_ar - y3 * sin_ar,\n      y3: x3 * sin_ar + y3 * cos_ar,\n      x4: r * Math.cos(a2),\n      y4: r * Math.sin(a2)\n    };\n  };\n\n  var rad2deg = function rad2deg(value) {\n    return value * 180 / Math.PI;\n  };\n\n  var deg2rad = function deg2rad(deg) {\n    return deg * Math.PI / 180;\n  };\n\n  var getQuadraticCurveBoundary = function getQuadraticCurveBoundary(sx, sy, cpx, cpy, ex, ey) {\n    var midX1 = sx + (cpx - sx) * 0.50;\n    var midY1 = sy + (cpy - sy) * 0.50;\n    var midX2 = ex + (cpx - ex) * 0.50;\n    var midY2 = ey + (cpy - ey) * 0.50;\n    var resultX1 = Math.min(sx, ex, midX1, midX2);\n    var resultX2 = Math.max(sx, ex, midX1, midX2);\n    var resultY1 = Math.min(sy, ey, midY1, midY2);\n    var resultY2 = Math.max(sy, ey, midY1, midY2);\n    return new Rectangle(resultX1, resultY1, resultX2 - resultX1, resultY2 - resultY1);\n  }; //De Casteljau algorithm\n\n\n  var getBezierCurveBoundary = function getBezierCurveBoundary(ax, ay, bx, by, cx, cy, dx, dy) {\n    var tobx = bx - ax;\n    var toby = by - ay;\n    var tocx = cx - bx;\n    var tocy = cy - by;\n    var todx = dx - cx;\n    var tody = dy - cy;\n    var precision = 40;\n    var d, px, py, qx, qy, rx, ry, tx, ty, sx, sy, x, y, i, minx, miny, maxx, maxy, toqx, toqy, torx, tory, totx, toty;\n\n    for (var i = 0; i < precision + 1; i++) {\n      d = i / precision;\n      px = ax + d * tobx;\n      py = ay + d * toby;\n      qx = bx + d * tocx;\n      qy = by + d * tocy;\n      rx = cx + d * todx;\n      ry = cy + d * tody;\n      toqx = qx - px;\n      toqy = qy - py;\n      torx = rx - qx;\n      tory = ry - qy;\n      sx = px + d * toqx;\n      sy = py + d * toqy;\n      tx = qx + d * torx;\n      ty = qy + d * tory;\n      totx = tx - sx;\n      toty = ty - sy;\n      x = sx + d * totx;\n      y = sy + d * toty;\n\n      if (i == 0) {\n        minx = x;\n        miny = y;\n        maxx = x;\n        maxy = y;\n      } else {\n        minx = Math.min(minx, x);\n        miny = Math.min(miny, y);\n        maxx = Math.max(maxx, x);\n        maxy = Math.max(maxy, y);\n      }\n    }\n\n    return new Rectangle(Math.round(minx), Math.round(miny), Math.round(maxx - minx), Math.round(maxy - miny));\n  };\n\n  var Point = function Point(x, y) {\n    var _x = x || 0;\n\n    Object.defineProperty(this, 'x', {\n      enumerable: true,\n      get: function get() {\n        return _x;\n      },\n      set: function set(value) {\n        if (!isNaN(value)) {\n          _x = parseFloat(value);\n        }\n      }\n    });\n\n    var _y = y || 0;\n\n    Object.defineProperty(this, 'y', {\n      enumerable: true,\n      get: function get() {\n        return _y;\n      },\n      set: function set(value) {\n        if (!isNaN(value)) {\n          _y = parseFloat(value);\n        }\n      }\n    });\n    var _type = 'pt';\n    Object.defineProperty(this, 'type', {\n      enumerable: true,\n      get: function get() {\n        return _type;\n      },\n      set: function set(value) {\n        _type = value.toString();\n      }\n    });\n    return this;\n  };\n\n  var Rectangle = function Rectangle(x, y, w, h) {\n    Point.call(this, x, y);\n    this.type = 'rect';\n\n    var _w = w || 0;\n\n    Object.defineProperty(this, 'w', {\n      enumerable: true,\n      get: function get() {\n        return _w;\n      },\n      set: function set(value) {\n        if (!isNaN(value)) {\n          _w = parseFloat(value);\n        }\n      }\n    });\n\n    var _h = h || 0;\n\n    Object.defineProperty(this, 'h', {\n      enumerable: true,\n      get: function get() {\n        return _h;\n      },\n      set: function set(value) {\n        if (!isNaN(value)) {\n          _h = parseFloat(value);\n        }\n      }\n    });\n    return this;\n  };\n\n  var Matrix = function Matrix(sx, shy, shx, sy, tx, ty) {\n    var _matrix = [];\n    Object.defineProperty(this, 'sx', {\n      get: function get() {\n        return _matrix[0];\n      },\n      set: function set(value) {\n        _matrix[0] = Math.round(value * 100000) / 100000;\n      }\n    });\n    Object.defineProperty(this, 'shy', {\n      get: function get() {\n        return _matrix[1];\n      },\n      set: function set(value) {\n        _matrix[1] = Math.round(value * 100000) / 100000;\n      }\n    });\n    Object.defineProperty(this, 'shx', {\n      get: function get() {\n        return _matrix[2];\n      },\n      set: function set(value) {\n        _matrix[2] = Math.round(value * 100000) / 100000;\n      }\n    });\n    Object.defineProperty(this, 'sy', {\n      get: function get() {\n        return _matrix[3];\n      },\n      set: function set(value) {\n        _matrix[3] = Math.round(value * 100000) / 100000;\n      }\n    });\n    Object.defineProperty(this, 'tx', {\n      get: function get() {\n        return _matrix[4];\n      },\n      set: function set(value) {\n        _matrix[4] = Math.round(value * 100000) / 100000;\n      }\n    });\n    Object.defineProperty(this, 'ty', {\n      get: function get() {\n        return _matrix[5];\n      },\n      set: function set(value) {\n        _matrix[5] = Math.round(value * 100000) / 100000;\n      }\n    });\n    Object.defineProperty(this, 'rotation', {\n      get: function get() {\n        return Math.atan2(this.shx, this.sx);\n      }\n    });\n    Object.defineProperty(this, 'scaleX', {\n      get: function get() {\n        return this.decompose().scale.sx;\n      }\n    });\n    Object.defineProperty(this, 'scaleY', {\n      get: function get() {\n        return this.decompose().scale.sy;\n      }\n    });\n    Object.defineProperty(this, 'isIdentity', {\n      get: function get() {\n        if (this.sx !== 1) {\n          return false;\n        }\n\n        if (this.shy !== 0) {\n          return false;\n        }\n\n        if (this.shx !== 0) {\n          return false;\n        }\n\n        if (this.sy !== 1) {\n          return false;\n        }\n\n        if (this.tx !== 0) {\n          return false;\n        }\n\n        if (this.ty !== 0) {\n          return false;\n        }\n\n        return true;\n      }\n    });\n    this.sx = !isNaN(sx) ? sx : 1;\n    this.shy = !isNaN(shy) ? shy : 0;\n    this.shx = !isNaN(shx) ? shx : 0;\n    this.sy = !isNaN(sy) ? sy : 1;\n    this.tx = !isNaN(tx) ? tx : 0;\n    this.ty = !isNaN(ty) ? ty : 0;\n    return this;\n  };\n  /**\n  * Multiply the matrix with given Matrix\n  * \n  * @function multiply\n  * @param matrix\n  * @returns {Matrix}\n  * @private\n  * @ignore\n  */\n\n\n  Matrix.prototype.multiply = function (matrix) {\n    var sx = matrix.sx * this.sx + matrix.shy * this.shx;\n    var shy = matrix.sx * this.shy + matrix.shy * this.sy;\n    var shx = matrix.shx * this.sx + matrix.sy * this.shx;\n    var sy = matrix.shx * this.shy + matrix.sy * this.sy;\n    var tx = matrix.tx * this.sx + matrix.ty * this.shx + this.tx;\n    var ty = matrix.tx * this.shy + matrix.ty * this.sy + this.ty;\n    return new Matrix(sx, shy, shx, sy, tx, ty);\n  };\n  /**\n  * @function decompose\n  * @private\n  * @ignore\n  */\n\n\n  Matrix.prototype.decompose = function () {\n    var a = this.sx;\n    var b = this.shy;\n    var c = this.shx;\n    var d = this.sy;\n    var e = this.tx;\n    var f = this.ty;\n    var scaleX = Math.sqrt(a * a + b * b);\n    a /= scaleX;\n    b /= scaleX;\n    var shear = a * c + b * d;\n    c -= a * shear;\n    d -= b * shear;\n    var scaleY = Math.sqrt(c * c + d * d);\n    c /= scaleY;\n    d /= scaleY;\n    shear /= scaleY;\n\n    if (a * d < b * c) {\n      a = -a;\n      b = -b;\n      shear = -shear;\n      scaleX = -scaleX;\n    }\n\n    return {\n      scale: new Matrix(scaleX, 0, 0, scaleY, 0, 0),\n      translate: new Matrix(1, 0, 0, 1, e, f),\n      rotate: new Matrix(a, b, -b, a, 0, 0),\n      skew: new Matrix(1, 0, shear, 1, 0, 0)\n    };\n  };\n  /**\n  * @function applyToPoint\n  * @private\n  * @ignore\n  */\n\n\n  Matrix.prototype.applyToPoint = function (pt) {\n    var x = pt.x * this.sx + pt.y * this.shx + this.tx;\n    var y = pt.x * this.shy + pt.y * this.sy + this.ty;\n    return new Point(x, y);\n  };\n  /**\n  * @function applyToRectangle\n  * @private\n  * @ignore\n  */\n\n\n  Matrix.prototype.applyToRectangle = function (rect) {\n    var pt1 = this.applyToPoint(rect);\n    var pt2 = this.applyToPoint(new Point(rect.x + rect.w, rect.y + rect.h));\n    return new Rectangle(pt1.x, pt1.y, pt2.x - pt1.x, pt2.y - pt1.y);\n  };\n  /**\n  * @function clone\n  * @private\n  * @ignore\n  */\n\n\n  Matrix.prototype.clone = function () {\n    var sx = this.sx;\n    var shy = this.shy;\n    var shx = this.shx;\n    var sy = this.sy;\n    var tx = this.tx;\n    var ty = this.ty;\n    return new Matrix(sx, shy, shx, sy, tx, ty);\n  };\n})(jsPDF.API, typeof self !== 'undefined' && self || typeof window !== 'undefined' && window || typeof global !== 'undefined' && global || Function('return typeof this === \"object\" && this.content')() || Function('return this')());\n\n/**\n * jsPDF filters PlugIn\n * Copyright (c) 2014 Aras Abbasi \n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n(function (jsPDFAPI) {\n\n  var ASCII85Encode = function ASCII85Encode(a) {\n    var b, c, d, e, f, g, h, i, j, k;\n\n    for (!/[^\\x00-\\xFF]/.test(a), b = \"\\x00\\x00\\x00\\x00\".slice(a.length % 4 || 4), a += b, c = [], d = 0, e = a.length; e > d; d += 4) {\n      f = (a.charCodeAt(d) << 24) + (a.charCodeAt(d + 1) << 16) + (a.charCodeAt(d + 2) << 8) + a.charCodeAt(d + 3), 0 !== f ? (k = f % 85, f = (f - k) / 85, j = f % 85, f = (f - j) / 85, i = f % 85, f = (f - i) / 85, h = f % 85, f = (f - h) / 85, g = f % 85, c.push(g + 33, h + 33, i + 33, j + 33, k + 33)) : c.push(122);\n    }\n\n    return function (a, b) {\n      for (var c = b; c > 0; c--) {\n        a.pop();\n      }\n    }(c, b.length), String.fromCharCode.apply(String, c) + \"~>\";\n  };\n\n  var ASCII85Decode = function ASCII85Decode(a) {\n    var c,\n        d,\n        e,\n        f,\n        g,\n        h = String,\n        l = \"length\",\n        w = 255,\n        x = \"charCodeAt\",\n        y = \"slice\",\n        z = \"replace\";\n\n    for (\"~>\" === a[y](-2), a = a[y](0, -2)[z](/\\s/g, \"\")[z](\"z\", \"!!!!!\"), c = \"uuuuu\"[y](a[l] % 5 || 5), a += c, e = [], f = 0, g = a[l]; g > f; f += 5) {\n      d = 52200625 * (a[x](f) - 33) + 614125 * (a[x](f + 1) - 33) + 7225 * (a[x](f + 2) - 33) + 85 * (a[x](f + 3) - 33) + (a[x](f + 4) - 33), e.push(w & d >> 24, w & d >> 16, w & d >> 8, w & d);\n    }\n\n    return function (a, b) {\n      for (var c = b; c > 0; c--) {\n        a.pop();\n      }\n    }(e, c[l]), h.fromCharCode.apply(h, e);\n  };\n  /**\n  * TODO: Not Tested:\n  //https://gist.github.com/revolunet/843889\n  // LZW-compress a string\n  var LZWEncode = function(s, options) {\n    options = Object.assign({\n      predictor: 1,\n      colors: 1,\n      bitsPerComponent: 8,\n      columns: 1,\n      earlyChange: 1\n    }, options);\n     var dict = {};\n    var data = (s + \"\").split(\"\");\n    var out = [];\n    var currChar;\n    var phrase = data[0];\n    var code = 256; //0xe000\n    for (var i=1; i<data.length; i++) {\n      currChar=data[i];\n      if (dict['_' + phrase + currChar] != null) {\n        phrase += currChar;\n      }\n      else {\n        out.push(phrase.length > 1 ? dict['_'+phrase] : phrase.charCodeAt(0));\n        dict['_' + phrase + currChar] = code;\n        code++;\n        phrase=currChar;\n      }\n    }\n    out.push(phrase.length > 1 ? dict['_'+phrase] : phrase.charCodeAt(0));\n    for (var i=0; i<out.length; i++) {\n      out[i] = String.fromCharCode(out[i]);\n    }\n    return out.join(\"\");\n  }\n   // Decompress an LZW-encoded string\n  var LZWDecode = function(s, options) {\n    options = Object.assign({\n      predictor: 1,\n      colors: 1,\n      bitsPerComponent: 8,\n      columns: 1,\n      earlyChange: 1\n    }, options);\n     var dict = {};\n    var data = (s + \"\").split(\"\");\n    var currChar = data[0];\n    var oldPhrase = currChar;\n    var out = [currChar];\n    var code = 256;\n    var phrase;\n    for (var i=1; i<data.length; i++) {\n      var currCode = data[i].charCodeAt(0);\n      if (currCode < 256) {\n        phrase = data[i];\n      }\n      else {\n         phrase = dict['_'+currCode] ? dict['_'+currCode] : (oldPhrase + currChar);\n      }\n      out.push(phrase);\n      currChar = phrase.charAt(0);\n      dict['_'+code] = oldPhrase + currChar;\n      code++;\n      oldPhrase = phrase;\n    }\n    return out.join(\"\");\n  }\n  */\n\n\n  var ASCIIHexEncode = function ASCIIHexEncode(value) {\n    var result = '';\n    var i;\n\n    for (var i = 0; i < value.length; i += 1) {\n      result += (\"0\" + value.charCodeAt(i).toString(16)).slice(-2);\n    }\n\n    result += '>';\n    return result;\n  };\n\n  var ASCIIHexDecode = function ASCIIHexDecode(value) {\n    var regexCheckIfHex = new RegExp(/^([0-9A-Fa-f]{2})+$/);\n    value = value.replace(/\\s/g, '');\n\n    if (value.indexOf(\">\") !== -1) {\n      value = value.substr(0, value.indexOf(\">\"));\n    }\n\n    if (value.length % 2) {\n      value += \"0\";\n    }\n\n    if (regexCheckIfHex.test(value) === false) {\n      return \"\";\n    }\n\n    var result = '';\n    var i;\n\n    for (var i = 0; i < value.length; i += 2) {\n      result += String.fromCharCode(\"0x\" + (value[i] + value[i + 1]));\n    }\n\n    return result;\n  };\n\n  var FlateEncode = function FlateEncode(data, options) {\n    options = Object.assign({\n      predictor: 1,\n      colors: 1,\n      bitsPerComponent: 8,\n      columns: 1\n    }, options);\n    var arr = [];\n    var i = data.length;\n    var adler32;\n    var deflater;\n\n    while (i--) {\n      arr[i] = data.charCodeAt(i);\n    }\n\n    adler32 = jsPDFAPI.adler32cs.from(data);\n    deflater = new Deflater(6);\n    deflater.append(new Uint8Array(arr));\n    data = deflater.flush();\n    arr = new Uint8Array(data.length + 6);\n    arr.set(new Uint8Array([120, 156])), arr.set(data, 2);\n    arr.set(new Uint8Array([adler32 & 0xFF, adler32 >> 8 & 0xFF, adler32 >> 16 & 0xFF, adler32 >> 24 & 0xFF]), data.length + 2);\n    data = String.fromCharCode.apply(null, arr);\n    return data;\n  };\n\n  jsPDFAPI.processDataByFilters = function (origData, filterChain) {\n\n    var i = 0;\n    var data = origData || '';\n    var reverseChain = [];\n    filterChain = filterChain || [];\n\n    if (typeof filterChain === \"string\") {\n      filterChain = [filterChain];\n    }\n\n    for (i = 0; i < filterChain.length; i += 1) {\n      switch (filterChain[i]) {\n        case \"ASCII85Decode\":\n        case \"/ASCII85Decode\":\n          data = ASCII85Decode(data);\n          reverseChain.push(\"/ASCII85Encode\");\n          break;\n\n        case \"ASCII85Encode\":\n        case \"/ASCII85Encode\":\n          data = ASCII85Encode(data);\n          reverseChain.push(\"/ASCII85Decode\");\n          break;\n\n        case \"ASCIIHexDecode\":\n        case \"/ASCIIHexDecode\":\n          data = ASCIIHexDecode(data);\n          reverseChain.push(\"/ASCIIHexEncode\");\n          break;\n\n        case \"ASCIIHexEncode\":\n        case \"/ASCIIHexEncode\":\n          data = ASCIIHexEncode(data);\n          reverseChain.push(\"/ASCIIHexDecode\");\n          break;\n\n        case \"FlateEncode\":\n        case \"/FlateEncode\":\n          data = FlateEncode(data);\n          reverseChain.push(\"/FlateDecode\");\n          break;\n\n        /**\n        case \"LZWDecode\":\n        case \"/LZWDecode\":\n          data = LZWDecode(data);\n          reverseChain.push(\"/LZWEncode\");\n          break;\n        case \"LZWEncode\":\n        case \"/LZWEncode\":\n          data = LZWEncode(data);\n          reverseChain.push(\"/LZWDecode\");\n          break;\n        */\n\n        default:\n          throw \"The filter: \\\"\" + filterChain[i] + \"\\\" is not implemented\";\n      }\n    }\n\n    return {\n      data: data,\n      reverseChain: reverseChain.reverse().join(\" \")\n    };\n  };\n})(jsPDF.API);\n\n/**\n * jsPDF fileloading PlugIn\n * Copyright (c) 2018 Aras Abbasi (aras.abbasi@gmail.com)\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n\n/**\n* @name fileloading\n* @module\n*/\n(function (jsPDFAPI) {\n  /**\n  * @name loadFile\n  * @function\n  * @param {string} url\n  * @param {boolean} sync\n  * @param {function} callback\n  * @returns {string|undefined} result\n  */\n\n  jsPDFAPI.loadFile = function (url, sync, callback) {\n    sync = sync || true;\n\n    callback = callback || function () {};\n\n    var result;\n\n    var xhr = function xhr(url, sync, callback) {\n      var req = new XMLHttpRequest();\n      var byteArray = [];\n      var i = 0;\n\n      var sanitizeUnicode = function sanitizeUnicode(data) {\n        var dataLength = data.length;\n        var StringFromCharCode = String.fromCharCode; //Transform Unicode to ASCII\n\n        for (i = 0; i < dataLength; i += 1) {\n          byteArray.push(StringFromCharCode(data.charCodeAt(i) & 0xff));\n        }\n\n        return byteArray.join(\"\");\n      };\n\n      req.open('GET', url, !sync); // XHR binary charset opt by Marcus Granado 2006 [http://mgran.blogspot.com]\n\n      req.overrideMimeType('text\\/plain; charset=x-user-defined');\n\n      if (sync === false) {\n        req.onload = function () {\n          return sanitizeUnicode(this.responseText);\n        };\n      }\n\n      req.send(null);\n\n      if (req.status !== 200) {\n        console.warn('Unable to load file \"' + url + '\"');\n        return;\n      }\n\n      if (sync) {\n        return sanitizeUnicode(req.responseText);\n      }\n    };\n\n    try {\n      result = xhr(url, sync, callback);\n    } catch (e) {\n      result = undefined;\n    }\n\n    return result;\n  };\n  /**\n  * @name loadImageFile\n  * @function\n  * @param {string} path\n  * @param {boolean} sync\n  * @param {function} callback\n  */\n\n\n  jsPDFAPI.loadImageFile = jsPDFAPI.loadFile;\n})(jsPDF.API);\n\n/**\n * Copyright (c) 2018 Erik Koopmans\n * Released under the MIT License.\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n\n/**\n * jsPDF html PlugIn\n *\n * @name html\n * @module\n */\n(function (jsPDFAPI, global) {\n  /**\n  * Determine the type of a variable/object.\n  * \n  * @private\n  * @ignore\n  */\n\n  var objType = function objType(obj) {\n    var type = _typeof(obj);\n\n    if (type === 'undefined') return 'undefined';else if (type === 'string' || obj instanceof String) return 'string';else if (type === 'number' || obj instanceof Number) return 'number';else if (type === 'function' || obj instanceof Function) return 'function';else if (!!obj && obj.constructor === Array) return 'array';else if (obj && obj.nodeType === 1) return 'element';else if (type === 'object') return 'object';else return 'unknown';\n  };\n  /**\n  * Create an HTML element with optional className, innerHTML, and style.\n  * \n  * @private\n  * @ignore\n  */\n\n\n  var createElement = function createElement(tagName, opt) {\n    var el = document.createElement(tagName);\n    if (opt.className) el.className = opt.className;\n\n    if (opt.innerHTML) {\n      el.innerHTML = opt.innerHTML;\n      var scripts = el.getElementsByTagName('script');\n\n      for (var i = scripts.length; i-- > 0; null) {\n        scripts[i].parentNode.removeChild(scripts[i]);\n      }\n    }\n\n    for (var key in opt.style) {\n      el.style[key] = opt.style[key];\n    }\n\n    return el;\n  };\n  /**\n  * Deep-clone a node and preserve contents/properties.\n  * \n  * @private\n  * @ignore\n  */\n\n\n  var cloneNode = function cloneNode(node, javascriptEnabled) {\n    // Recursively clone the node.\n    var clone = node.nodeType === 3 ? document.createTextNode(node.nodeValue) : node.cloneNode(false);\n\n    for (var child = node.firstChild; child; child = child.nextSibling) {\n      if (javascriptEnabled === true || child.nodeType !== 1 || child.nodeName !== 'SCRIPT') {\n        clone.appendChild(cloneNode(child, javascriptEnabled));\n      }\n    }\n\n    if (node.nodeType === 1) {\n      // Preserve contents/properties of special nodes.\n      if (node.nodeName === 'CANVAS') {\n        clone.width = node.width;\n        clone.height = node.height;\n        clone.getContext('2d').drawImage(node, 0, 0);\n      } else if (node.nodeName === 'TEXTAREA' || node.nodeName === 'SELECT') {\n        clone.value = node.value;\n      } // Preserve the node's scroll position when it loads.\n\n\n      clone.addEventListener('load', function () {\n        clone.scrollTop = node.scrollTop;\n        clone.scrollLeft = node.scrollLeft;\n      }, true);\n    } // Return the cloned node.\n\n\n    return clone;\n  };\n  /* ----- CONSTRUCTOR ----- */\n\n\n  var Worker = function Worker(opt) {\n    // Create the root parent for the proto chain, and the starting Worker.\n    var root = Object.assign(Worker.convert(Promise.resolve()), JSON.parse(JSON.stringify(Worker.template)));\n    var self = Worker.convert(Promise.resolve(), root); // Set progress, optional settings, and return.\n\n    self = self.setProgress(1, Worker, 1, [Worker]);\n    self = self.set(opt);\n    return self;\n  }; // Boilerplate for subclassing Promise.\n\n\n  Worker.prototype = Object.create(Promise.prototype);\n  Worker.prototype.constructor = Worker; // Converts/casts promises into Workers.\n\n  Worker.convert = function convert(promise, inherit) {\n    // Uses prototypal inheritance to receive changes made to ancestors' properties.\n    promise.__proto__ = inherit || Worker.prototype;\n    return promise;\n  };\n\n  Worker.template = {\n    prop: {\n      src: null,\n      container: null,\n      overlay: null,\n      canvas: null,\n      img: null,\n      pdf: null,\n      pageSize: null,\n      callback: function callback() {}\n    },\n    progress: {\n      val: 0,\n      state: null,\n      n: 0,\n      stack: []\n    },\n    opt: {\n      filename: 'file.pdf',\n      margin: [0, 0, 0, 0],\n      enableLinks: true,\n      x: 0,\n      y: 0,\n      html2canvas: {},\n      jsPDF: {}\n    }\n  };\n  /* ----- FROM / TO ----- */\n\n  Worker.prototype.from = function from(src, type) {\n    function getType(src) {\n      switch (objType(src)) {\n        case 'string':\n          return 'string';\n\n        case 'element':\n          return src.nodeName.toLowerCase === 'canvas' ? 'canvas' : 'element';\n\n        default:\n          return 'unknown';\n      }\n    }\n\n    return this.then(function from_main() {\n      type = type || getType(src);\n\n      switch (type) {\n        case 'string':\n          return this.set({\n            src: createElement('div', {\n              innerHTML: src\n            })\n          });\n\n        case 'element':\n          return this.set({\n            src: src\n          });\n\n        case 'canvas':\n          return this.set({\n            canvas: src\n          });\n\n        case 'img':\n          return this.set({\n            img: src\n          });\n\n        default:\n          return this.error('Unknown source type.');\n      }\n    });\n  };\n\n  Worker.prototype.to = function to(target) {\n    // Route the 'to' request to the appropriate method.\n    switch (target) {\n      case 'container':\n        return this.toContainer();\n\n      case 'canvas':\n        return this.toCanvas();\n\n      case 'img':\n        return this.toImg();\n\n      case 'pdf':\n        return this.toPdf();\n\n      default:\n        return this.error('Invalid target.');\n    }\n  };\n\n  Worker.prototype.toContainer = function toContainer() {\n    // Set up function prerequisites.\n    var prereqs = [function checkSrc() {\n      return this.prop.src || this.error('Cannot duplicate - no source HTML.');\n    }, function checkPageSize() {\n      return this.prop.pageSize || this.setPageSize();\n    }];\n    return this.thenList(prereqs).then(function toContainer_main() {\n      // Define the CSS styles for the container and its overlay parent.\n      var overlayCSS = {\n        position: 'fixed',\n        overflow: 'hidden',\n        zIndex: 1000,\n        left: '-100000px',\n        right: 0,\n        bottom: 0,\n        top: 0\n      };\n      var containerCSS = {\n        position: 'relative',\n        display: 'inline-block',\n        width: Math.max(this.prop.src.clientWidth, this.prop.src.scrollWidth, this.prop.src.offsetWidth) + 'px',\n        left: 0,\n        right: 0,\n        top: 0,\n        margin: 'auto',\n        backgroundColor: 'white'\n      }; // Set the overlay to hidden (could be changed in the future to provide a print preview).\n\n      var source = cloneNode(this.prop.src, this.opt.html2canvas.javascriptEnabled);\n\n      if (source.tagName === 'BODY') {\n        containerCSS.height = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight) + 'px';\n      }\n\n      this.prop.overlay = createElement('div', {\n        className: 'html2pdf__overlay',\n        style: overlayCSS\n      });\n      this.prop.container = createElement('div', {\n        className: 'html2pdf__container',\n        style: containerCSS\n      });\n      this.prop.container.appendChild(source);\n      this.prop.container.firstChild.appendChild(createElement('div', {\n        style: {\n          clear: 'both',\n          border: '0 none transparent',\n          margin: 0,\n          padding: 0,\n          height: 0\n        }\n      }));\n      this.prop.container.style.float = 'none';\n      this.prop.overlay.appendChild(this.prop.container);\n      document.body.appendChild(this.prop.overlay);\n      this.prop.container.firstChild.style.position = 'relative';\n      this.prop.container.height = Math.max(this.prop.container.firstChild.clientHeight, this.prop.container.firstChild.scrollHeight, this.prop.container.firstChild.offsetHeight) + 'px';\n    });\n  };\n\n  Worker.prototype.toCanvas = function toCanvas() {\n    // Set up function prerequisites.\n    var prereqs = [function checkContainer() {\n      return document.body.contains(this.prop.container) || this.toContainer();\n    }]; // Fulfill prereqs then create the canvas.\n\n    return this.thenList(prereqs).then(function toCanvas_main() {\n      // Handle old-fashioned 'onrendered' argument.\n      var options = Object.assign({}, this.opt.html2canvas);\n      delete options.onrendered;\n\n      if (!this.isHtml2CanvasLoaded()) {\n        return;\n      }\n\n      return html2canvas(this.prop.container, options);\n    }).then(function toCanvas_post(canvas) {\n      // Handle old-fashioned 'onrendered' argument.\n      var onRendered = this.opt.html2canvas.onrendered || function () {};\n\n      onRendered(canvas);\n      this.prop.canvas = canvas;\n      document.body.removeChild(this.prop.overlay);\n    });\n  };\n\n  Worker.prototype.toContext2d = function toContext2d() {\n    // Set up function prerequisites.\n    var prereqs = [function checkContainer() {\n      return document.body.contains(this.prop.container) || this.toContainer();\n    }]; // Fulfill prereqs then create the canvas.\n\n    return this.thenList(prereqs).then(function toContext2d_main() {\n      // Handle old-fashioned 'onrendered' argument.\n      var pdf = this.opt.jsPDF;\n      var options = Object.assign({\n        async: true,\n        allowTaint: true,\n        backgroundColor: '#ffffff',\n        imageTimeout: 15000,\n        logging: true,\n        proxy: null,\n        removeContainer: true,\n        foreignObjectRendering: false,\n        useCORS: false\n      }, this.opt.html2canvas);\n      delete options.onrendered;\n      pdf.context2d.autoPaging = true;\n      pdf.context2d.posX = this.opt.x;\n      pdf.context2d.posY = this.opt.y;\n      options.windowHeight = options.windowHeight || 0;\n      options.windowHeight = options.windowHeight == 0 ? Math.max(this.prop.container.clientHeight, this.prop.container.scrollHeight, this.prop.container.offsetHeight) : options.windowHeight;\n\n      if (!this.isHtml2CanvasLoaded()) {\n        return;\n      }\n\n      return html2canvas(this.prop.container, options);\n    }).then(function toContext2d_post(canvas) {\n      // Handle old-fashioned 'onrendered' argument.\n      var onRendered = this.opt.html2canvas.onrendered || function () {};\n\n      onRendered(canvas);\n      this.prop.canvas = canvas;\n      document.body.removeChild(this.prop.overlay);\n    });\n  };\n\n  Worker.prototype.toImg = function toImg() {\n    // Set up function prerequisites.\n    var prereqs = [function checkCanvas() {\n      return this.prop.canvas || this.toCanvas();\n    }]; // Fulfill prereqs then create the image.\n\n    return this.thenList(prereqs).then(function toImg_main() {\n      var imgData = this.prop.canvas.toDataURL('image/' + this.opt.image.type, this.opt.image.quality);\n      this.prop.img = document.createElement('img');\n      this.prop.img.src = imgData;\n    });\n  };\n\n  Worker.prototype.toPdf = function toPdf() {\n    // Set up function prerequisites.\n    var prereqs = [function checkContext2d() {\n      return this.toContext2d();\n    } //function checkCanvas() { return this.prop.canvas || this.toCanvas(); }\n    ]; // Fulfill prereqs then create the image.\n\n    return this.thenList(prereqs).then(function toPdf_main() {\n      // Create local copies of frequently used properties.\n      this.prop.pdf = this.prop.pdf || this.opt.jsPDF;\n    });\n  };\n  /* ----- OUTPUT / SAVE ----- */\n\n\n  Worker.prototype.output = function output(type, options, src) {\n    // Redirect requests to the correct function (outputPdf / outputImg).\n    src = src || 'pdf';\n\n    if (src.toLowerCase() === 'img' || src.toLowerCase() === 'image') {\n      return this.outputImg(type, options);\n    } else {\n      return this.outputPdf(type, options);\n    }\n  };\n\n  Worker.prototype.outputPdf = function outputPdf(type, options) {\n    // Set up function prerequisites.\n    var prereqs = [function checkPdf() {\n      return this.prop.pdf || this.toPdf();\n    }]; // Fulfill prereqs then perform the appropriate output.\n\n    return this.thenList(prereqs).then(function outputPdf_main() {\n      /* Currently implemented output types:\n       *    https://rawgit.com/MrRio/jsPDF/master/docs/jspdf.js.html#line992\n       *  save(options), arraybuffer, blob, bloburi/bloburl,\n       *  datauristring/dataurlstring, dataurlnewwindow, datauri/dataurl\n       */\n      return this.prop.pdf.output(type, options);\n    });\n  };\n\n  Worker.prototype.outputImg = function outputImg(type, options) {\n    // Set up function prerequisites.\n    var prereqs = [function checkImg() {\n      return this.prop.img || this.toImg();\n    }]; // Fulfill prereqs then perform the appropriate output.\n\n    return this.thenList(prereqs).then(function outputImg_main() {\n      switch (type) {\n        case undefined:\n        case 'img':\n          return this.prop.img;\n\n        case 'datauristring':\n        case 'dataurlstring':\n          return this.prop.img.src;\n\n        case 'datauri':\n        case 'dataurl':\n          return document.location.href = this.prop.img.src;\n\n        default:\n          throw 'Image output type \"' + type + '\" is not supported.';\n      }\n    });\n  };\n\n  Worker.prototype.isHtml2CanvasLoaded = function () {\n    var result = typeof global.html2canvas !== \"undefined\";\n\n    if (!result) {\n      console.error(\"html2canvas not loaded.\");\n    }\n\n    return result;\n  };\n\n  Worker.prototype.save = function save(filename) {\n    // Set up function prerequisites.\n    var prereqs = [function checkPdf() {\n      return this.prop.pdf || this.toPdf();\n    }];\n\n    if (!this.isHtml2CanvasLoaded()) {\n      return;\n    } // Fulfill prereqs, update the filename (if provided), and save the PDF.\n\n\n    return this.thenList(prereqs).set(filename ? {\n      filename: filename\n    } : null).then(function save_main() {\n      this.prop.pdf.save(this.opt.filename);\n    });\n  };\n\n  Worker.prototype.doCallback = function doCallback(filename) {\n    // Set up function prerequisites.\n    var prereqs = [function checkPdf() {\n      return this.prop.pdf || this.toPdf();\n    }];\n\n    if (!this.isHtml2CanvasLoaded()) {\n      return;\n    } // Fulfill prereqs, update the filename (if provided), and save the PDF.\n\n\n    return this.thenList(prereqs).then(function doCallback_main() {\n      this.prop.callback(this.prop.pdf);\n    });\n  };\n  /* ----- SET / GET ----- */\n\n\n  Worker.prototype.set = function set(opt) {\n    // TODO: Implement ordered pairs?\n    // Silently ignore invalid or empty input.\n    if (objType(opt) !== 'object') {\n      return this;\n    } // Build an array of setter functions to queue.\n\n\n    var fns = Object.keys(opt || {}).map(function (key) {\n      if (key in Worker.template.prop) {\n        // Set pre-defined properties.\n        return function set_prop() {\n          this.prop[key] = opt[key];\n        };\n      } else {\n        switch (key) {\n          case 'margin':\n            return this.setMargin.bind(this, opt.margin);\n\n          case 'jsPDF':\n            return function set_jsPDF() {\n              this.opt.jsPDF = opt.jsPDF;\n              return this.setPageSize();\n            };\n\n          case 'pageSize':\n            return this.setPageSize.bind(this, opt.pageSize);\n\n          default:\n            // Set any other properties in opt.\n            return function set_opt() {\n              this.opt[key] = opt[key];\n            };\n        }\n      }\n    }, this); // Set properties within the promise chain.\n\n    return this.then(function set_main() {\n      return this.thenList(fns);\n    });\n  };\n\n  Worker.prototype.get = function get(key, cbk) {\n    return this.then(function get_main() {\n      // Fetch the requested property, either as a predefined prop or in opt.\n      var val = key in Worker.template.prop ? this.prop[key] : this.opt[key];\n      return cbk ? cbk(val) : val;\n    });\n  };\n\n  Worker.prototype.setMargin = function setMargin(margin) {\n    return this.then(function setMargin_main() {\n      // Parse the margin property.\n      switch (objType(margin)) {\n        case 'number':\n          margin = [margin, margin, margin, margin];\n\n        case 'array':\n          if (margin.length === 2) {\n            margin = [margin[0], margin[1], margin[0], margin[1]];\n          }\n\n          if (margin.length === 4) {\n            break;\n          }\n\n        default:\n          return this.error('Invalid margin array.');\n      } // Set the margin property, then update pageSize.\n\n\n      this.opt.margin = margin;\n    }).then(this.setPageSize);\n  };\n\n  Worker.prototype.setPageSize = function setPageSize(pageSize) {\n    function toPx(val, k) {\n      return Math.floor(val * k / 72 * 96);\n    }\n\n    return this.then(function setPageSize_main() {\n      // Retrieve page-size based on jsPDF settings, if not explicitly provided.\n      pageSize = pageSize || jsPDF.getPageSize(this.opt.jsPDF); // Add 'inner' field if not present.\n\n      if (!pageSize.hasOwnProperty('inner')) {\n        pageSize.inner = {\n          width: pageSize.width - this.opt.margin[1] - this.opt.margin[3],\n          height: pageSize.height - this.opt.margin[0] - this.opt.margin[2]\n        };\n        pageSize.inner.px = {\n          width: toPx(pageSize.inner.width, pageSize.k),\n          height: toPx(pageSize.inner.height, pageSize.k)\n        };\n        pageSize.inner.ratio = pageSize.inner.height / pageSize.inner.width;\n      } // Attach pageSize to this.\n\n\n      this.prop.pageSize = pageSize;\n    });\n  };\n\n  Worker.prototype.setProgress = function setProgress(val, state, n, stack) {\n    // Immediately update all progress values.\n    if (val != null) this.progress.val = val;\n    if (state != null) this.progress.state = state;\n    if (n != null) this.progress.n = n;\n    if (stack != null) this.progress.stack = stack;\n    this.progress.ratio = this.progress.val / this.progress.state; // Return this for command chaining.\n\n    return this;\n  };\n\n  Worker.prototype.updateProgress = function updateProgress(val, state, n, stack) {\n    // Immediately update all progress values, using setProgress.\n    return this.setProgress(val ? this.progress.val + val : null, state ? state : null, n ? this.progress.n + n : null, stack ? this.progress.stack.concat(stack) : null);\n  };\n  /* ----- PROMISE MAPPING ----- */\n\n\n  Worker.prototype.then = function then(onFulfilled, onRejected) {\n    // Wrap `this` for encapsulation.\n    var self = this;\n    return this.thenCore(onFulfilled, onRejected, function then_main(onFulfilled, onRejected) {\n      // Update progress while queuing, calling, and resolving `then`.\n      self.updateProgress(null, null, 1, [onFulfilled]);\n      return Promise.prototype.then.call(this, function then_pre(val) {\n        self.updateProgress(null, onFulfilled);\n        return val;\n      }).then(onFulfilled, onRejected).then(function then_post(val) {\n        self.updateProgress(1);\n        return val;\n      });\n    });\n  };\n\n  Worker.prototype.thenCore = function thenCore(onFulfilled, onRejected, thenBase) {\n    // Handle optional thenBase parameter.\n    thenBase = thenBase || Promise.prototype.then; // Wrap `this` for encapsulation and bind it to the promise handlers.\n\n    var self = this;\n\n    if (onFulfilled) {\n      onFulfilled = onFulfilled.bind(self);\n    }\n\n    if (onRejected) {\n      onRejected = onRejected.bind(self);\n    } // Cast self into a Promise to avoid polyfills recursively defining `then`.\n\n\n    var isNative = Promise.toString().indexOf('[native code]') !== -1 && Promise.name === 'Promise';\n    var selfPromise = isNative ? self : Worker.convert(Object.assign({}, self), Promise.prototype); // Return the promise, after casting it into a Worker and preserving props.\n\n    var returnVal = thenBase.call(selfPromise, onFulfilled, onRejected);\n    return Worker.convert(returnVal, self.__proto__);\n  };\n\n  Worker.prototype.thenExternal = function thenExternal(onFulfilled, onRejected) {\n    // Call `then` and return a standard promise (exits the Worker chain).\n    return Promise.prototype.then.call(this, onFulfilled, onRejected);\n  };\n\n  Worker.prototype.thenList = function thenList(fns) {\n    // Queue a series of promise 'factories' into the promise chain.\n    var self = this;\n    fns.forEach(function thenList_forEach(fn) {\n      self = self.thenCore(fn);\n    });\n    return self;\n  };\n\n  Worker.prototype['catch'] = function (onRejected) {\n    // Bind `this` to the promise handler, call `catch`, and return a Worker.\n    if (onRejected) {\n      onRejected = onRejected.bind(this);\n    }\n\n    var returnVal = Promise.prototype['catch'].call(this, onRejected);\n    return Worker.convert(returnVal, this);\n  };\n\n  Worker.prototype.catchExternal = function catchExternal(onRejected) {\n    // Call `catch` and return a standard promise (exits the Worker chain).\n    return Promise.prototype['catch'].call(this, onRejected);\n  };\n\n  Worker.prototype.error = function error(msg) {\n    // Throw the error in the Promise chain.\n    return this.then(function error_main() {\n      throw new Error(msg);\n    });\n  };\n  /* ----- ALIASES ----- */\n\n\n  Worker.prototype.using = Worker.prototype.set;\n  Worker.prototype.saveAs = Worker.prototype.save;\n  Worker.prototype.export = Worker.prototype.output;\n  Worker.prototype.run = Worker.prototype.then; // Get dimensions of a PDF page, as determined by jsPDF.\n\n  jsPDF.getPageSize = function (orientation, unit, format) {\n    // Decode options object\n    if (_typeof(orientation) === 'object') {\n      var options = orientation;\n      orientation = options.orientation;\n      unit = options.unit || unit;\n      format = options.format || format;\n    } // Default options\n\n\n    unit = unit || 'mm';\n    format = format || 'a4';\n    orientation = ('' + (orientation || 'P')).toLowerCase();\n    var format_as_string = ('' + format).toLowerCase(); // Size in pt of various paper formats\n\n    var pageFormats = {\n      'a0': [2383.94, 3370.39],\n      'a1': [1683.78, 2383.94],\n      'a2': [1190.55, 1683.78],\n      'a3': [841.89, 1190.55],\n      'a4': [595.28, 841.89],\n      'a5': [419.53, 595.28],\n      'a6': [297.64, 419.53],\n      'a7': [209.76, 297.64],\n      'a8': [147.40, 209.76],\n      'a9': [104.88, 147.40],\n      'a10': [73.70, 104.88],\n      'b0': [2834.65, 4008.19],\n      'b1': [2004.09, 2834.65],\n      'b2': [1417.32, 2004.09],\n      'b3': [1000.63, 1417.32],\n      'b4': [708.66, 1000.63],\n      'b5': [498.90, 708.66],\n      'b6': [354.33, 498.90],\n      'b7': [249.45, 354.33],\n      'b8': [175.75, 249.45],\n      'b9': [124.72, 175.75],\n      'b10': [87.87, 124.72],\n      'c0': [2599.37, 3676.54],\n      'c1': [1836.85, 2599.37],\n      'c2': [1298.27, 1836.85],\n      'c3': [918.43, 1298.27],\n      'c4': [649.13, 918.43],\n      'c5': [459.21, 649.13],\n      'c6': [323.15, 459.21],\n      'c7': [229.61, 323.15],\n      'c8': [161.57, 229.61],\n      'c9': [113.39, 161.57],\n      'c10': [79.37, 113.39],\n      'dl': [311.81, 623.62],\n      'letter': [612, 792],\n      'government-letter': [576, 756],\n      'legal': [612, 1008],\n      'junior-legal': [576, 360],\n      'ledger': [1224, 792],\n      'tabloid': [792, 1224],\n      'credit-card': [153, 243]\n    }; // Unit conversion\n\n    switch (unit) {\n      case 'pt':\n        var k = 1;\n        break;\n\n      case 'mm':\n        var k = 72 / 25.4;\n        break;\n\n      case 'cm':\n        var k = 72 / 2.54;\n        break;\n\n      case 'in':\n        var k = 72;\n        break;\n\n      case 'px':\n        var k = 72 / 96;\n        break;\n\n      case 'pc':\n        var k = 12;\n        break;\n\n      case 'em':\n        var k = 12;\n        break;\n\n      case 'ex':\n        var k = 6;\n        break;\n\n      default:\n        throw 'Invalid unit: ' + unit;\n    } // Dimensions are stored as user units and converted to points on output\n\n\n    if (pageFormats.hasOwnProperty(format_as_string)) {\n      var pageHeight = pageFormats[format_as_string][1] / k;\n      var pageWidth = pageFormats[format_as_string][0] / k;\n    } else {\n      try {\n        var pageHeight = format[1];\n        var pageWidth = format[0];\n      } catch (err) {\n        throw new Error('Invalid format: ' + format);\n      }\n    } // Handle page orientation\n\n\n    if (orientation === 'p' || orientation === 'portrait') {\n      orientation = 'p';\n\n      if (pageWidth > pageHeight) {\n        var tmp = pageWidth;\n        pageWidth = pageHeight;\n        pageHeight = tmp;\n      }\n    } else if (orientation === 'l' || orientation === 'landscape') {\n      orientation = 'l';\n\n      if (pageHeight > pageWidth) {\n        var tmp = pageWidth;\n        pageWidth = pageHeight;\n        pageHeight = tmp;\n      }\n    } else {\n      throw 'Invalid orientation: ' + orientation;\n    } // Return information (k is the unit conversion ratio from pts)\n\n\n    var info = {\n      'width': pageWidth,\n      'height': pageHeight,\n      'unit': unit,\n      'k': k\n    };\n    return info;\n  };\n  /**\n   * Generate a PDF from an HTML element or string using.\n   *\n   * @name html\n   * @function\n   * @param {Element|string} source The source element or HTML string.\n   * @param {Object=} options An object of optional settings.\n   * @description The Plugin needs html2canvas from niklasvh\n   */\n\n\n  jsPDFAPI.html = function (src, options) {\n\n    options = options || {};\n\n    options.callback = options.callback || function () {};\n\n    options.html2canvas = options.html2canvas || {};\n    options.html2canvas.canvas = options.html2canvas.canvas || this.canvas;\n    options.jsPDF = options.jsPDF || this; // Create a new worker with the given options.\n\n    var pdf = options.jsPDF;\n    var worker = new Worker(options);\n\n    if (!options.worker) {\n      // If worker is not set to true, perform the traditional 'simple' operation.\n      return worker.from(src).doCallback();\n    } else {\n      // Otherwise, return the worker for new Promise-based operation.\n      return worker;\n    }\n\n    return this;\n  };\n})(jsPDF.API, typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global);\n\n/**\n * @license\n * ==================================================================== \n * Copyright (c) 2013 Youssef Beddad, youssef.beddad@gmail.com\n * \n * \n * ====================================================================\n */\n\n/*global jsPDF */\n\n/**\n * jsPDF JavaScript plugin\n *\n * @name javascript\n * @module\n*/\n(function (jsPDFAPI) {\n\n  var jsNamesObj, jsJsObj, text;\n  /**\n  * @name addJS\n  * @function\n  * @param {string} javascript The javascript to be embedded into the PDF-file.\n  * @returns {jsPDF}\n  */\n\n  jsPDFAPI.addJS = function (javascript) {\n    text = javascript;\n    this.internal.events.subscribe('postPutResources', function (javascript) {\n      jsNamesObj = this.internal.newObject();\n      this.internal.out('<<');\n      this.internal.out('/Names [(EmbeddedJS) ' + (jsNamesObj + 1) + ' 0 R]');\n      this.internal.out('>>');\n      this.internal.out('endobj');\n      jsJsObj = this.internal.newObject();\n      this.internal.out('<<');\n      this.internal.out('/S /JavaScript');\n      this.internal.out('/JS (' + text + ')');\n      this.internal.out('>>');\n      this.internal.out('endobj');\n    });\n    this.internal.events.subscribe('putCatalog', function () {\n      if (jsNamesObj !== undefined && jsJsObj !== undefined) {\n        this.internal.out('/Names <</JavaScript ' + jsNamesObj + ' 0 R>>');\n      }\n    });\n    return this;\n  };\n})(jsPDF.API);\n\n/**\n * @license\n * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n\n(function (jsPDFAPI) {\n\n  jsPDFAPI.events.push(['postPutResources', function () {\n    var pdf = this;\n    var rx = /^(\\d+) 0 obj$/; // Write action goto objects for each page\n    // this.outline.destsGoto = [];\n    // for (var i = 0; i < totalPages; i++) {\n    // var id = pdf.internal.newObject();\n    // this.outline.destsGoto.push(id);\n    // pdf.internal.write(\"<</D[\" + (i * 2 + 3) + \" 0 R /XYZ null\n    // null null]/S/GoTo>> endobj\");\n    // }\n    //\n    // for (var i = 0; i < dests.length; i++) {\n    // pdf.internal.write(\"(page_\" + (i + 1) + \")\" + dests[i] + \" 0\n    // R\");\n    // }\n    //\t\t\t\t\n\n    if (this.outline.root.children.length > 0) {\n      var lines = pdf.outline.render().split(/\\r\\n/);\n\n      for (var i = 0; i < lines.length; i++) {\n        var line = lines[i];\n        var m = rx.exec(line);\n\n        if (m != null) {\n          var oid = m[1];\n          pdf.internal.newObjectDeferredBegin(oid, false);\n        }\n\n        pdf.internal.write(line);\n      }\n    } // This code will write named destination for each page reference\n    // (page_1, etc)\n\n\n    if (this.outline.createNamedDestinations) {\n      var totalPages = this.internal.pages.length; // WARNING: this assumes jsPDF starts on page 3 and pageIDs\n      // follow 5, 7, 9, etc\n      // Write destination objects for each page\n\n      var dests = [];\n\n      for (var i = 0; i < totalPages; i++) {\n        var id = pdf.internal.newObject();\n        dests.push(id);\n        var info = pdf.internal.getPageInfo(i + 1);\n        pdf.internal.write(\"<< /D[\" + info.objId + \" 0 R /XYZ null null null]>> endobj\");\n      } // assign a name for each destination\n\n\n      var names2Oid = pdf.internal.newObject();\n      pdf.internal.write('<< /Names [ ');\n\n      for (var i = 0; i < dests.length; i++) {\n        pdf.internal.write(\"(page_\" + (i + 1) + \")\" + dests[i] + \" 0 R\");\n      }\n\n      pdf.internal.write(' ] >>', 'endobj'); // var kids = pdf.internal.newObject();\n      // pdf.internal.write('<< /Kids [ ' + names2Oid + ' 0 R');\n      // pdf.internal.write(' ] >>', 'endobj');\n\n      var namesOid = pdf.internal.newObject();\n      pdf.internal.write('<< /Dests ' + names2Oid + \" 0 R\");\n      pdf.internal.write('>>', 'endobj');\n    }\n  }]);\n  jsPDFAPI.events.push(['putCatalog', function () {\n    var pdf = this;\n\n    if (pdf.outline.root.children.length > 0) {\n      pdf.internal.write(\"/Outlines\", this.outline.makeRef(this.outline.root));\n\n      if (this.outline.createNamedDestinations) {\n        pdf.internal.write(\"/Names \" + namesOid + \" 0 R\");\n      } // Open with Bookmarks showing\n      // pdf.internal.write(\"/PageMode /UseOutlines\");\n\n    }\n  }]);\n  jsPDFAPI.events.push(['initialized', function () {\n    var pdf = this;\n    pdf.outline = {\n      createNamedDestinations: false,\n      root: {\n        children: []\n      }\n    };\n    /**\n     * Options: pageNumber\n     */\n\n    pdf.outline.add = function (parent, title, options) {\n      var item = {\n        title: title,\n        options: options,\n        children: []\n      };\n\n      if (parent == null) {\n        parent = this.root;\n      }\n\n      parent.children.push(item);\n      return item;\n    };\n\n    pdf.outline.render = function () {\n      this.ctx = {};\n      this.ctx.val = '';\n      this.ctx.pdf = pdf;\n      this.genIds_r(this.root);\n      this.renderRoot(this.root);\n      this.renderItems(this.root);\n      return this.ctx.val;\n    };\n\n    pdf.outline.genIds_r = function (node) {\n      node.id = pdf.internal.newObjectDeferred();\n\n      for (var i = 0; i < node.children.length; i++) {\n        this.genIds_r(node.children[i]);\n      }\n    };\n\n    pdf.outline.renderRoot = function (node) {\n      this.objStart(node);\n      this.line('/Type /Outlines');\n\n      if (node.children.length > 0) {\n        this.line('/First ' + this.makeRef(node.children[0]));\n        this.line('/Last ' + this.makeRef(node.children[node.children.length - 1]));\n      }\n\n      this.line('/Count ' + this.count_r({\n        count: 0\n      }, node));\n      this.objEnd();\n    };\n\n    pdf.outline.renderItems = function (node) {\n      var getHorizontalCoordinateString = this.ctx.pdf.internal.getCoordinateString;\n      var getVerticalCoordinateString = this.ctx.pdf.internal.getVerticalCoordinateString;\n\n      for (var i = 0; i < node.children.length; i++) {\n        var item = node.children[i];\n        this.objStart(item);\n        this.line('/Title ' + this.makeString(item.title));\n        this.line('/Parent ' + this.makeRef(node));\n\n        if (i > 0) {\n          this.line('/Prev ' + this.makeRef(node.children[i - 1]));\n        }\n\n        if (i < node.children.length - 1) {\n          this.line('/Next ' + this.makeRef(node.children[i + 1]));\n        }\n\n        if (item.children.length > 0) {\n          this.line('/First ' + this.makeRef(item.children[0]));\n          this.line('/Last ' + this.makeRef(item.children[item.children.length - 1]));\n        }\n\n        var count = this.count = this.count_r({\n          count: 0\n        }, item);\n\n        if (count > 0) {\n          this.line('/Count ' + count);\n        }\n\n        if (item.options) {\n          if (item.options.pageNumber) {\n            // Explicit Destination\n            //WARNING this assumes page ids are 3,5,7, etc.\n            var info = pdf.internal.getPageInfo(item.options.pageNumber);\n            this.line('/Dest ' + '[' + info.objId + ' 0 R /XYZ 0 ' + getVerticalCoordinateString(0) + ' 0]'); // this line does not work on all clients (pageNumber instead of page ref)\n            //this.line('/Dest ' + '[' + (item.options.pageNumber - 1) + ' /XYZ 0 ' + this.ctx.pdf.internal.pageSize.getHeight() + ' 0]');\n            // Named Destination\n            // this.line('/Dest (page_' + (item.options.pageNumber) + ')');\n            // Action Destination\n            // var id = pdf.internal.newObject();\n            // pdf.internal.write('<</D[' + (item.options.pageNumber - 1) + ' /XYZ null null null]/S/GoTo>> endobj');\n            // this.line('/A ' + id + ' 0 R' );\n          }\n        }\n\n        this.objEnd();\n      }\n\n      for (var i = 0; i < node.children.length; i++) {\n        var item = node.children[i];\n        this.renderItems(item);\n      }\n    };\n\n    pdf.outline.line = function (text) {\n      this.ctx.val += text + '\\r\\n';\n    };\n\n    pdf.outline.makeRef = function (node) {\n      return node.id + ' 0 R';\n    };\n\n    pdf.outline.makeString = function (val) {\n      return '(' + pdf.internal.pdfEscape(val) + ')';\n    };\n\n    pdf.outline.objStart = function (node) {\n      this.ctx.val += '\\r\\n' + node.id + ' 0 obj' + '\\r\\n<<\\r\\n';\n    };\n\n    pdf.outline.objEnd = function (node) {\n      this.ctx.val += '>> \\r\\n' + 'endobj' + '\\r\\n';\n    };\n\n    pdf.outline.count_r = function (ctx, node) {\n      for (var i = 0; i < node.children.length; i++) {\n        ctx.count++;\n        this.count_r(ctx, node.children[i]);\n      }\n\n      return ctx.count;\n    };\n  }]);\n  return this;\n})(jsPDF.API);\n\n/**\n * @license\n * \n * Copyright (c) 2014 James Robb, https://github.com/jamesbrobb\n *\n * \n * ====================================================================\n */\n\n/**\n* jsPDF PNG PlugIn\n* @name png_support\n* @module\n*/\n(function (jsPDFAPI) {\n  /*\n   * @see http://www.w3.org/TR/PNG-Chunks.html\n   *\n   Color    Allowed      Interpretation\n   Type     Bit Depths\n  \t   0       1,2,4,8,16  Each pixel is a grayscale sample.\n  \t   2       8,16        Each pixel is an R,G,B triple.\n  \t   3       1,2,4,8     Each pixel is a palette index;\n                         a PLTE chunk must appear.\n  \t   4       8,16        Each pixel is a grayscale sample,\n                         followed by an alpha sample.\n  \t   6       8,16        Each pixel is an R,G,B triple,\n                         followed by an alpha sample.\n  */\n\n  /*\n   * PNG filter method types\n   *\n   * @see http://www.w3.org/TR/PNG-Filters.html\n   * @see http://www.libpng.org/pub/png/book/chapter09.html\n   *\n   * This is what the value 'Predictor' in decode params relates to\n   *\n   * 15 is \"optimal prediction\", which means the prediction algorithm can change from line to line.\n   * In that case, you actually have to read the first byte off each line for the prediction algorthim (which should be 0-4, corresponding to PDF 10-14) and select the appropriate unprediction algorithm based on that byte.\n   *\n     0       None\n     1       Sub\n     2       Up\n     3       Average\n     4       Paeth\n   */\n\n  var doesNotHavePngJS = function doesNotHavePngJS() {\n    return typeof PNG !== 'function' || typeof FlateStream !== 'function';\n  },\n      canCompress = function canCompress(value) {\n    return value !== jsPDFAPI.image_compression.NONE && hasCompressionJS();\n  },\n      hasCompressionJS = function hasCompressionJS() {\n    var inst = typeof Deflater === 'function';\n    if (!inst) throw new Error(\"requires deflate.js for compression\");\n    return inst;\n  },\n      compressBytes = function compressBytes(bytes, lineLength, colorsPerPixel, compression) {\n    var level = 5,\n        filter_method = filterUp;\n\n    switch (compression) {\n      case jsPDFAPI.image_compression.FAST:\n        level = 3;\n        filter_method = filterSub;\n        break;\n\n      case jsPDFAPI.image_compression.MEDIUM:\n        level = 6;\n        filter_method = filterAverage;\n        break;\n\n      case jsPDFAPI.image_compression.SLOW:\n        level = 9;\n        filter_method = filterPaeth; //uses to sum to choose best filter for each line\n\n        break;\n    }\n\n    bytes = applyPngFilterMethod(bytes, lineLength, colorsPerPixel, filter_method);\n    var header = new Uint8Array(createZlibHeader(level));\n    var checksum = adler32(bytes);\n    var deflate = new Deflater(level);\n    var a = deflate.append(bytes);\n    var cBytes = deflate.flush();\n    var len = header.length + a.length + cBytes.length;\n    var cmpd = new Uint8Array(len + 4);\n    cmpd.set(header);\n    cmpd.set(a, header.length);\n    cmpd.set(cBytes, header.length + a.length);\n    cmpd[len++] = checksum >>> 24 & 0xff;\n    cmpd[len++] = checksum >>> 16 & 0xff;\n    cmpd[len++] = checksum >>> 8 & 0xff;\n    cmpd[len++] = checksum & 0xff;\n    return jsPDFAPI.arrayBufferToBinaryString(cmpd);\n  },\n      createZlibHeader = function createZlibHeader(bytes, level) {\n    /*\n     * @see http://www.ietf.org/rfc/rfc1950.txt for zlib header\n     */\n    var cm = 8;\n    var cinfo = Math.LOG2E * Math.log(0x8000) - 8;\n    var cmf = cinfo << 4 | cm;\n    var hdr = cmf << 8;\n    var flevel = Math.min(3, (level - 1 & 0xff) >> 1);\n    hdr |= flevel << 6;\n    hdr |= 0; //FDICT\n\n    hdr += 31 - hdr % 31;\n    return [cmf, hdr & 0xff & 0xff];\n  },\n      adler32 = function adler32(array, param) {\n    var adler = 1;\n    var s1 = adler & 0xffff,\n        s2 = adler >>> 16 & 0xffff;\n    var len = array.length;\n    var tlen;\n    var i = 0;\n\n    while (len > 0) {\n      tlen = len > param ? param : len;\n      len -= tlen;\n\n      do {\n        s1 += array[i++];\n        s2 += s1;\n      } while (--tlen);\n\n      s1 %= 65521;\n      s2 %= 65521;\n    }\n\n    return (s2 << 16 | s1) >>> 0;\n  },\n      applyPngFilterMethod = function applyPngFilterMethod(bytes, lineLength, colorsPerPixel, filter_method) {\n    var lines = bytes.length / lineLength,\n        result = new Uint8Array(bytes.length + lines),\n        filter_methods = getFilterMethods(),\n        i = 0,\n        line,\n        prevLine,\n        offset;\n\n    for (; i < lines; i++) {\n      offset = i * lineLength;\n      line = bytes.subarray(offset, offset + lineLength);\n\n      if (filter_method) {\n        result.set(filter_method(line, colorsPerPixel, prevLine), offset + i);\n      } else {\n        var j = 0,\n            len = filter_methods.length,\n            results = [];\n\n        for (; j < len; j++) {\n          results[j] = filter_methods[j](line, colorsPerPixel, prevLine);\n        }\n\n        var ind = getIndexOfSmallestSum(results.concat());\n        result.set(results[ind], offset + i);\n      }\n\n      prevLine = line;\n    }\n\n    return result;\n  },\n      filterNone = function filterNone(line, colorsPerPixel, prevLine) {\n    /*var result = new Uint8Array(line.length + 1);\n    result[0] = 0;\n    result.set(line, 1);*/\n    var result = Array.apply([], line);\n    result.unshift(0);\n    return result;\n  },\n      filterSub = function filterSub(line, colorsPerPixel, prevLine) {\n    var result = [],\n        i = 0,\n        len = line.length,\n        left;\n    result[0] = 1;\n\n    for (; i < len; i++) {\n      left = line[i - colorsPerPixel] || 0;\n      result[i + 1] = line[i] - left + 0x0100 & 0xff;\n    }\n\n    return result;\n  },\n      filterUp = function filterUp(line, colorsPerPixel, prevLine) {\n    var result = [],\n        i = 0,\n        len = line.length,\n        up;\n    result[0] = 2;\n\n    for (; i < len; i++) {\n      up = prevLine && prevLine[i] || 0;\n      result[i + 1] = line[i] - up + 0x0100 & 0xff;\n    }\n\n    return result;\n  },\n      filterAverage = function filterAverage(line, colorsPerPixel, prevLine) {\n    var result = [],\n        i = 0,\n        len = line.length,\n        left,\n        up;\n    result[0] = 3;\n\n    for (; i < len; i++) {\n      left = line[i - colorsPerPixel] || 0;\n      up = prevLine && prevLine[i] || 0;\n      result[i + 1] = line[i] + 0x0100 - (left + up >>> 1) & 0xff;\n    }\n\n    return result;\n  },\n      filterPaeth = function filterPaeth(line, colorsPerPixel, prevLine) {\n    var result = [],\n        i = 0,\n        len = line.length,\n        left,\n        up,\n        upLeft,\n        paeth;\n    result[0] = 4;\n\n    for (; i < len; i++) {\n      left = line[i - colorsPerPixel] || 0;\n      up = prevLine && prevLine[i] || 0;\n      upLeft = prevLine && prevLine[i - colorsPerPixel] || 0;\n      paeth = paethPredictor(left, up, upLeft);\n      result[i + 1] = line[i] - paeth + 0x0100 & 0xff;\n    }\n\n    return result;\n  },\n      paethPredictor = function paethPredictor(left, up, upLeft) {\n    var p = left + up - upLeft,\n        pLeft = Math.abs(p - left),\n        pUp = Math.abs(p - up),\n        pUpLeft = Math.abs(p - upLeft);\n    return pLeft <= pUp && pLeft <= pUpLeft ? left : pUp <= pUpLeft ? up : upLeft;\n  },\n      getFilterMethods = function getFilterMethods() {\n    return [filterNone, filterSub, filterUp, filterAverage, filterPaeth];\n  },\n      getIndexOfSmallestSum = function getIndexOfSmallestSum(arrays) {\n    var i = 0,\n        len = arrays.length,\n        sum,\n        min,\n        ind;\n\n    while (i < len) {\n      sum = absSum(arrays[i].slice(1));\n\n      if (sum < min || !min) {\n        min = sum;\n        ind = i;\n      }\n\n      i++;\n    }\n\n    return ind;\n  },\n      absSum = function absSum(array) {\n    var i = 0,\n        len = array.length,\n        sum = 0;\n\n    while (i < len) {\n      sum += Math.abs(array[i++]);\n    }\n\n    return sum;\n  },\n      getPredictorFromCompression = function getPredictorFromCompression(compression) {\n    var predictor;\n\n    switch (compression) {\n      case jsPDFAPI.image_compression.FAST:\n        predictor = 11;\n        break;\n\n      case jsPDFAPI.image_compression.MEDIUM:\n        predictor = 13;\n        break;\n\n      case jsPDFAPI.image_compression.SLOW:\n        predictor = 14;\n        break;\n\n      default:\n        predictor = 12;\n        break;\n    }\n\n    return predictor;\n  };\n  /**\n  *\n  * @name processPNG\n  * @function\n  * @ignore\n  */\n\n\n  jsPDFAPI.processPNG = function (imageData, imageIndex, alias, compression, dataAsBinaryString) {\n\n    var colorSpace = this.color_spaces.DEVICE_RGB,\n        decode = this.decode.FLATE_DECODE,\n        bpc = 8,\n        img,\n        dp,\n        trns,\n        colors,\n        pal,\n        smask;\n    /*\tif(this.isString(imageData)) {\n    \t\t}*/\n\n    if (this.isArrayBuffer(imageData)) imageData = new Uint8Array(imageData);\n\n    if (this.isArrayBufferView(imageData)) {\n      if (doesNotHavePngJS()) throw new Error(\"PNG support requires png.js and zlib.js\");\n      img = new PNG(imageData);\n      imageData = img.imgData;\n      bpc = img.bits;\n      colorSpace = img.colorSpace;\n      colors = img.colors; //logImg(img);\n\n      /*\n       * colorType 6 - Each pixel is an R,G,B triple, followed by an alpha sample.\n       *\n       * colorType 4 - Each pixel is a grayscale sample, followed by an alpha sample.\n       *\n       * Extract alpha to create two separate images, using the alpha as a sMask\n       */\n\n      if ([4, 6].indexOf(img.colorType) !== -1) {\n        /*\n         * processes 8 bit RGBA and grayscale + alpha images\n         */\n        if (img.bits === 8) {\n          var pixels = img.pixelBitlength == 32 ? new Uint32Array(img.decodePixels().buffer) : img.pixelBitlength == 16 ? new Uint16Array(img.decodePixels().buffer) : new Uint8Array(img.decodePixels().buffer),\n              len = pixels.length,\n              imgData = new Uint8Array(len * img.colors),\n              alphaData = new Uint8Array(len),\n              pDiff = img.pixelBitlength - img.bits,\n              i = 0,\n              n = 0,\n              pixel,\n              pbl;\n\n          for (; i < len; i++) {\n            pixel = pixels[i];\n            pbl = 0;\n\n            while (pbl < pDiff) {\n              imgData[n++] = pixel >>> pbl & 0xff;\n              pbl = pbl + img.bits;\n            }\n\n            alphaData[i] = pixel >>> pbl & 0xff;\n          }\n        }\n        /*\n         * processes 16 bit RGBA and grayscale + alpha images\n         */\n\n\n        if (img.bits === 16) {\n          var pixels = new Uint32Array(img.decodePixels().buffer),\n              len = pixels.length,\n              imgData = new Uint8Array(len * (32 / img.pixelBitlength) * img.colors),\n              alphaData = new Uint8Array(len * (32 / img.pixelBitlength)),\n              hasColors = img.colors > 1,\n              i = 0,\n              n = 0,\n              a = 0,\n              pixel;\n\n          while (i < len) {\n            pixel = pixels[i++];\n            imgData[n++] = pixel >>> 0 & 0xFF;\n\n            if (hasColors) {\n              imgData[n++] = pixel >>> 16 & 0xFF;\n              pixel = pixels[i++];\n              imgData[n++] = pixel >>> 0 & 0xFF;\n            }\n\n            alphaData[a++] = pixel >>> 16 & 0xFF;\n          }\n\n          bpc = 8;\n        }\n\n        if (canCompress(compression)) {\n          imageData = compressBytes(imgData, img.width * img.colors, img.colors, compression);\n          smask = compressBytes(alphaData, img.width, 1, compression);\n        } else {\n          imageData = imgData;\n          smask = alphaData;\n          decode = null;\n        }\n      }\n      /*\n       * Indexed png. Each pixel is a palette index.\n       */\n\n\n      if (img.colorType === 3) {\n        colorSpace = this.color_spaces.INDEXED;\n        pal = img.palette;\n\n        if (img.transparency.indexed) {\n          var trans = img.transparency.indexed;\n          var total = 0,\n              i = 0,\n              len = trans.length;\n\n          for (; i < len; ++i) {\n            total += trans[i];\n          }\n\n          total = total / 255;\n          /*\n           * a single color is specified as 100% transparent (0),\n           * so we set trns to use a /Mask with that index\n           */\n\n          if (total === len - 1 && trans.indexOf(0) !== -1) {\n            trns = [trans.indexOf(0)];\n            /*\n             * there's more than one colour within the palette that specifies\n             * a transparency value less than 255, so we unroll the pixels to create an image sMask\n             */\n          } else if (total !== len) {\n            var pixels = img.decodePixels(),\n                alphaData = new Uint8Array(pixels.length),\n                i = 0,\n                len = pixels.length;\n\n            for (; i < len; i++) {\n              alphaData[i] = trans[pixels[i]];\n            }\n\n            smask = compressBytes(alphaData, img.width, 1);\n          }\n        }\n      }\n\n      var predictor = getPredictorFromCompression(compression);\n      if (decode === this.decode.FLATE_DECODE) dp = '/Predictor ' + predictor + ' /Colors ' + colors + ' /BitsPerComponent ' + bpc + ' /Columns ' + img.width;else //remove 'Predictor' as it applies to the type of png filter applied to its IDAT - we only apply with compression\n        dp = '/Colors ' + colors + ' /BitsPerComponent ' + bpc + ' /Columns ' + img.width;\n      if (this.isArrayBuffer(imageData) || this.isArrayBufferView(imageData)) imageData = this.arrayBufferToBinaryString(imageData);\n      if (smask && this.isArrayBuffer(smask) || this.isArrayBufferView(smask)) smask = this.arrayBufferToBinaryString(smask);\n      return this.createImageInfo(imageData, img.width, img.height, colorSpace, bpc, decode, imageIndex, alias, dp, trns, pal, smask, predictor);\n    }\n\n    throw new Error(\"Unsupported PNG image data, try using JPEG instead.\");\n  };\n})(jsPDF.API);\n\n/**\n * @license\n * Copyright (c) 2017 Aras Abbasi \n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n\n/**\n* jsPDF gif Support PlugIn\n*\n* @name gif_support\n* @module\n*/\n(function (jsPDFAPI) {\n\n  jsPDFAPI.processGIF89A = function (imageData, imageIndex, alias, compression, dataAsBinaryString) {\n    var reader = new GifReader(imageData);\n    var width = reader.width,\n        height = reader.height;\n    var qu = 100;\n    var pixels = [];\n    reader.decodeAndBlitFrameRGBA(0, pixels);\n    var rawImageData = {\n      data: pixels,\n      width: width,\n      height: height\n    };\n    var encoder = new JPEGEncoder(qu);\n    var data = encoder.encode(rawImageData, qu);\n    return jsPDFAPI.processJPEG.call(this, data, imageIndex, alias, compression);\n  };\n\n  jsPDFAPI.processGIF87A = jsPDFAPI.processGIF89A;\n})(jsPDF.API);\n\n/**\n * Copyright (c) 2018 Aras Abbasi \n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n\n/**\n* jsPDF bmp Support PlugIn\n* @name bmp_support\n* @module\n*/\n(function (jsPDFAPI) {\n\n  jsPDFAPI.processBMP = function (imageData, imageIndex, alias, compression, dataAsBinaryString) {\n    var reader = new BmpDecoder(imageData, false);\n    var width = reader.width,\n        height = reader.height;\n    var qu = 100;\n    var pixels = reader.getData();\n    var rawImageData = {\n      data: pixels,\n      width: width,\n      height: height\n    };\n    var encoder = new JPEGEncoder(qu);\n    var data = encoder.encode(rawImageData, qu);\n    return jsPDFAPI.processJPEG.call(this, data, imageIndex, alias, compression);\n  };\n})(jsPDF.API);\n\n/**\n * @license\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n\n/**\n * jsPDF setLanguage Plugin\n *\n * @name setLanguage\n * @module\n */\n(function (jsPDFAPI) {\n  /**\n  * Add Language Tag to the generated PDF\n  *\n  * @name setLanguage\n  * @function \n  * @param {string} langCode The Language code as ISO-639-1 (e.g. 'en') or as country language code (e.g. 'en-GB'). \n  * @returns {jsPDF}\n  * @example\n  * var doc = new jsPDF()\n  * doc.text(10, 10, 'This is a test')\n  * doc.setLanguage(\"en-US\")\n  * doc.save('english.pdf')\n  */\n\n  jsPDFAPI.setLanguage = function (langCode) {\n\n    var langCodes = {\n      \"af\": \"Afrikaans\",\n      \"sq\": \"Albanian\",\n      \"ar\": \"Arabic (Standard)\",\n      \"ar-DZ\": \"Arabic (Algeria)\",\n      \"ar-BH\": \"Arabic (Bahrain)\",\n      \"ar-EG\": \"Arabic (Egypt)\",\n      \"ar-IQ\": \"Arabic (Iraq)\",\n      \"ar-JO\": \"Arabic (Jordan)\",\n      \"ar-KW\": \"Arabic (Kuwait)\",\n      \"ar-LB\": \"Arabic (Lebanon)\",\n      \"ar-LY\": \"Arabic (Libya)\",\n      \"ar-MA\": \"Arabic (Morocco)\",\n      \"ar-OM\": \"Arabic (Oman)\",\n      \"ar-QA\": \"Arabic (Qatar)\",\n      \"ar-SA\": \"Arabic (Saudi Arabia)\",\n      \"ar-SY\": \"Arabic (Syria)\",\n      \"ar-TN\": \"Arabic (Tunisia)\",\n      \"ar-AE\": \"Arabic (U.A.E.)\",\n      \"ar-YE\": \"Arabic (Yemen)\",\n      \"an\": \"Aragonese\",\n      \"hy\": \"Armenian\",\n      \"as\": \"Assamese\",\n      \"ast\": \"Asturian\",\n      \"az\": \"Azerbaijani\",\n      \"eu\": \"Basque\",\n      \"be\": \"Belarusian\",\n      \"bn\": \"Bengali\",\n      \"bs\": \"Bosnian\",\n      \"br\": \"Breton\",\n      \"bg\": \"Bulgarian\",\n      \"my\": \"Burmese\",\n      \"ca\": \"Catalan\",\n      \"ch\": \"Chamorro\",\n      \"ce\": \"Chechen\",\n      \"zh\": \"Chinese\",\n      \"zh-HK\": \"Chinese (Hong Kong)\",\n      \"zh-CN\": \"Chinese (PRC)\",\n      \"zh-SG\": \"Chinese (Singapore)\",\n      \"zh-TW\": \"Chinese (Taiwan)\",\n      \"cv\": \"Chuvash\",\n      \"co\": \"Corsican\",\n      \"cr\": \"Cree\",\n      \"hr\": \"Croatian\",\n      \"cs\": \"Czech\",\n      \"da\": \"Danish\",\n      \"nl\": \"Dutch (Standard)\",\n      \"nl-BE\": \"Dutch (Belgian)\",\n      \"en\": \"English\",\n      \"en-AU\": \"English (Australia)\",\n      \"en-BZ\": \"English (Belize)\",\n      \"en-CA\": \"English (Canada)\",\n      \"en-IE\": \"English (Ireland)\",\n      \"en-JM\": \"English (Jamaica)\",\n      \"en-NZ\": \"English (New Zealand)\",\n      \"en-PH\": \"English (Philippines)\",\n      \"en-ZA\": \"English (South Africa)\",\n      \"en-TT\": \"English (Trinidad & Tobago)\",\n      \"en-GB\": \"English (United Kingdom)\",\n      \"en-US\": \"English (United States)\",\n      \"en-ZW\": \"English (Zimbabwe)\",\n      \"eo\": \"Esperanto\",\n      \"et\": \"Estonian\",\n      \"fo\": \"Faeroese\",\n      \"fj\": \"Fijian\",\n      \"fi\": \"Finnish\",\n      \"fr\": \"French (Standard)\",\n      \"fr-BE\": \"French (Belgium)\",\n      \"fr-CA\": \"French (Canada)\",\n      \"fr-FR\": \"French (France)\",\n      \"fr-LU\": \"French (Luxembourg)\",\n      \"fr-MC\": \"French (Monaco)\",\n      \"fr-CH\": \"French (Switzerland)\",\n      \"fy\": \"Frisian\",\n      \"fur\": \"Friulian\",\n      \"gd\": \"Gaelic (Scots)\",\n      \"gd-IE\": \"Gaelic (Irish)\",\n      \"gl\": \"Galacian\",\n      \"ka\": \"Georgian\",\n      \"de\": \"German (Standard)\",\n      \"de-AT\": \"German (Austria)\",\n      \"de-DE\": \"German (Germany)\",\n      \"de-LI\": \"German (Liechtenstein)\",\n      \"de-LU\": \"German (Luxembourg)\",\n      \"de-CH\": \"German (Switzerland)\",\n      \"el\": \"Greek\",\n      \"gu\": \"Gujurati\",\n      \"ht\": \"Haitian\",\n      \"he\": \"Hebrew\",\n      \"hi\": \"Hindi\",\n      \"hu\": \"Hungarian\",\n      \"is\": \"Icelandic\",\n      \"id\": \"Indonesian\",\n      \"iu\": \"Inuktitut\",\n      \"ga\": \"Irish\",\n      \"it\": \"Italian (Standard)\",\n      \"it-CH\": \"Italian (Switzerland)\",\n      \"ja\": \"Japanese\",\n      \"kn\": \"Kannada\",\n      \"ks\": \"Kashmiri\",\n      \"kk\": \"Kazakh\",\n      \"km\": \"Khmer\",\n      \"ky\": \"Kirghiz\",\n      \"tlh\": \"Klingon\",\n      \"ko\": \"Korean\",\n      \"ko-KP\": \"Korean (North Korea)\",\n      \"ko-KR\": \"Korean (South Korea)\",\n      \"la\": \"Latin\",\n      \"lv\": \"Latvian\",\n      \"lt\": \"Lithuanian\",\n      \"lb\": \"Luxembourgish\",\n      \"mk\": \"FYRO Macedonian\",\n      \"ms\": \"Malay\",\n      \"ml\": \"Malayalam\",\n      \"mt\": \"Maltese\",\n      \"mi\": \"Maori\",\n      \"mr\": \"Marathi\",\n      \"mo\": \"Moldavian\",\n      \"nv\": \"Navajo\",\n      \"ng\": \"Ndonga\",\n      \"ne\": \"Nepali\",\n      \"no\": \"Norwegian\",\n      \"nb\": \"Norwegian (Bokmal)\",\n      \"nn\": \"Norwegian (Nynorsk)\",\n      \"oc\": \"Occitan\",\n      \"or\": \"Oriya\",\n      \"om\": \"Oromo\",\n      \"fa\": \"Persian\",\n      \"fa-IR\": \"Persian/Iran\",\n      \"pl\": \"Polish\",\n      \"pt\": \"Portuguese\",\n      \"pt-BR\": \"Portuguese (Brazil)\",\n      \"pa\": \"Punjabi\",\n      \"pa-IN\": \"Punjabi (India)\",\n      \"pa-PK\": \"Punjabi (Pakistan)\",\n      \"qu\": \"Quechua\",\n      \"rm\": \"Rhaeto-Romanic\",\n      \"ro\": \"Romanian\",\n      \"ro-MO\": \"Romanian (Moldavia)\",\n      \"ru\": \"Russian\",\n      \"ru-MO\": \"Russian (Moldavia)\",\n      \"sz\": \"Sami (Lappish)\",\n      \"sg\": \"Sango\",\n      \"sa\": \"Sanskrit\",\n      \"sc\": \"Sardinian\",\n      \"sd\": \"Sindhi\",\n      \"si\": \"Singhalese\",\n      \"sr\": \"Serbian\",\n      \"sk\": \"Slovak\",\n      \"sl\": \"Slovenian\",\n      \"so\": \"Somani\",\n      \"sb\": \"Sorbian\",\n      \"es\": \"Spanish\",\n      \"es-AR\": \"Spanish (Argentina)\",\n      \"es-BO\": \"Spanish (Bolivia)\",\n      \"es-CL\": \"Spanish (Chile)\",\n      \"es-CO\": \"Spanish (Colombia)\",\n      \"es-CR\": \"Spanish (Costa Rica)\",\n      \"es-DO\": \"Spanish (Dominican Republic)\",\n      \"es-EC\": \"Spanish (Ecuador)\",\n      \"es-SV\": \"Spanish (El Salvador)\",\n      \"es-GT\": \"Spanish (Guatemala)\",\n      \"es-HN\": \"Spanish (Honduras)\",\n      \"es-MX\": \"Spanish (Mexico)\",\n      \"es-NI\": \"Spanish (Nicaragua)\",\n      \"es-PA\": \"Spanish (Panama)\",\n      \"es-PY\": \"Spanish (Paraguay)\",\n      \"es-PE\": \"Spanish (Peru)\",\n      \"es-PR\": \"Spanish (Puerto Rico)\",\n      \"es-ES\": \"Spanish (Spain)\",\n      \"es-UY\": \"Spanish (Uruguay)\",\n      \"es-VE\": \"Spanish (Venezuela)\",\n      \"sx\": \"Sutu\",\n      \"sw\": \"Swahili\",\n      \"sv\": \"Swedish\",\n      \"sv-FI\": \"Swedish (Finland)\",\n      \"sv-SV\": \"Swedish (Sweden)\",\n      \"ta\": \"Tamil\",\n      \"tt\": \"Tatar\",\n      \"te\": \"Teluga\",\n      \"th\": \"Thai\",\n      \"tig\": \"Tigre\",\n      \"ts\": \"Tsonga\",\n      \"tn\": \"Tswana\",\n      \"tr\": \"Turkish\",\n      \"tk\": \"Turkmen\",\n      \"uk\": \"Ukrainian\",\n      \"hsb\": \"Upper Sorbian\",\n      \"ur\": \"Urdu\",\n      \"ve\": \"Venda\",\n      \"vi\": \"Vietnamese\",\n      \"vo\": \"Volapuk\",\n      \"wa\": \"Walloon\",\n      \"cy\": \"Welsh\",\n      \"xh\": \"Xhosa\",\n      \"ji\": \"Yiddish\",\n      \"zu\": \"Zulu\"\n    };\n\n    if (this.internal.languageSettings === undefined) {\n      this.internal.languageSettings = {};\n      this.internal.languageSettings.isSubscribed = false;\n    }\n\n    if (langCodes[langCode] !== undefined) {\n      this.internal.languageSettings.languageCode = langCode;\n\n      if (this.internal.languageSettings.isSubscribed === false) {\n        this.internal.events.subscribe(\"putCatalog\", function () {\n          this.internal.write(\"/Lang (\" + this.internal.languageSettings.languageCode + \")\");\n        });\n        this.internal.languageSettings.isSubscribed = true;\n      }\n    }\n\n    return this;\n  };\n})(jsPDF.API);\n\n/** @license\n * MIT license.\n * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com\n *               2014 Diego Casorran, https://github.com/diegocr\n *\n * \n * ====================================================================\n */\n\n/**\n* jsPDF split_text_to_size plugin \n* \n* @name split_text_to_size\n* @module\n*/\n(function (API) {\n  /**\n   * Returns an array of length matching length of the 'word' string, with each\n   * cell occupied by the width of the char in that position.\n   * \n   * @name getCharWidthsArray\n   * @function\n   * @param {string} text\n   * @param {Object} options\n   * @returns {Array}\n   */\n\n  var getCharWidthsArray = API.getCharWidthsArray = function (text, options) {\n    options = options || {};\n    var activeFont = options.font || this.internal.getFont();\n    var fontSize = options.fontSize || this.internal.getFontSize();\n    var charSpace = options.charSpace || this.internal.getCharSpace();\n    var widths = options.widths ? options.widths : activeFont.metadata.Unicode.widths;\n    var widthsFractionOf = widths.fof ? widths.fof : 1;\n    var kerning = options.kerning ? options.kerning : activeFont.metadata.Unicode.kerning;\n    var kerningFractionOf = kerning.fof ? kerning.fof : 1;\n    var i;\n    var l;\n    var char_code;\n    var prior_char_code = 0; //for kerning\n\n    var default_char_width = widths[0] || widthsFractionOf;\n    var output = [];\n\n    for (i = 0, l = text.length; i < l; i++) {\n      char_code = text.charCodeAt(i);\n\n      if (typeof activeFont.metadata.widthOfString === \"function\") {\n        output.push((activeFont.metadata.widthOfGlyph(activeFont.metadata.characterToGlyph(char_code)) + charSpace * (1000 / fontSize) || 0) / 1000);\n      } else {\n        output.push((widths[char_code] || default_char_width) / widthsFractionOf + (kerning[char_code] && kerning[char_code][prior_char_code] || 0) / kerningFractionOf);\n      }\n\n      prior_char_code = char_code;\n    }\n\n    return output;\n  };\n  /**\n   * Calculate the sum of a number-array\n   * \n   * @name getArraySum\n   * @public\n   * @function\n   * @param {Array} array Array of numbers\n   * @returns {number}\n   */\n\n\n  var getArraySum = API.getArraySum = function (array) {\n    var i = array.length,\n        output = 0;\n\n    while (i) {\n      i--;\n      output += array[i];\n    }\n\n    return output;\n  };\n  /**\n  * Returns a widths of string in a given font, if the font size is set as 1 point.\n  *\n  * In other words, this is \"proportional\" value. For 1 unit of font size, the length\n  * of the string will be that much.\n  * \n  * Multiply by font size to get actual width in *points*\n  * Then divide by 72 to get inches or divide by (72/25.6) to get 'mm' etc.\n  * \n  * @name getStringUnitWidth\n  * @public\n  * @function\n  * @param {string} text\n  * @param {string} options\n  * @returns {number} result\n  */\n\n\n  var getStringUnitWidth = API.getStringUnitWidth = function (text, options) {\n    options = options || {};\n    var fontSize = options.fontSize || this.internal.getFontSize();\n    var font = options.font || this.internal.getFont();\n    var charSpace = options.charSpace || this.internal.getCharSpace();\n    var result = 0;\n\n    if (typeof font.metadata.widthOfString === \"function\") {\n      result = font.metadata.widthOfString(text, fontSize, charSpace) / fontSize;\n    } else {\n      result = getArraySum(getCharWidthsArray.apply(this, arguments));\n    }\n\n    return result;\n  };\n  /**\n  returns array of lines\n  */\n\n\n  var splitLongWord = function splitLongWord(word, widths_array, firstLineMaxLen, maxLen) {\n    var answer = []; // 1st, chop off the piece that can fit on the hanging line.\n\n    var i = 0,\n        l = word.length,\n        workingLen = 0;\n\n    while (i !== l && workingLen + widths_array[i] < firstLineMaxLen) {\n      workingLen += widths_array[i];\n      i++;\n    } // this is first line.\n\n\n    answer.push(word.slice(0, i)); // 2nd. Split the rest into maxLen pieces.\n\n    var startOfLine = i;\n    workingLen = 0;\n\n    while (i !== l) {\n      if (workingLen + widths_array[i] > maxLen) {\n        answer.push(word.slice(startOfLine, i));\n        workingLen = 0;\n        startOfLine = i;\n      }\n\n      workingLen += widths_array[i];\n      i++;\n    }\n\n    if (startOfLine !== i) {\n      answer.push(word.slice(startOfLine, i));\n    }\n\n    return answer;\n  }; // Note, all sizing inputs for this function must be in \"font measurement units\"\n  // By default, for PDF, it's \"point\".\n\n\n  var splitParagraphIntoLines = function splitParagraphIntoLines(text, maxlen, options) {\n    // at this time works only on Western scripts, ones with space char\n    // separating the words. Feel free to expand.\n    if (!options) {\n      options = {};\n    }\n\n    var line = [],\n        lines = [line],\n        line_length = options.textIndent || 0,\n        separator_length = 0,\n        current_word_length = 0,\n        word,\n        widths_array,\n        words = text.split(' '),\n        spaceCharWidth = getCharWidthsArray.apply(this, [' ', options])[0],\n        i,\n        l,\n        tmp,\n        lineIndent;\n\n    if (options.lineIndent === -1) {\n      lineIndent = words[0].length + 2;\n    } else {\n      lineIndent = options.lineIndent || 0;\n    }\n\n    if (lineIndent) {\n      var pad = Array(lineIndent).join(\" \"),\n          wrds = [];\n      words.map(function (wrd) {\n        wrd = wrd.split(/\\s*\\n/);\n\n        if (wrd.length > 1) {\n          wrds = wrds.concat(wrd.map(function (wrd, idx) {\n            return (idx && wrd.length ? \"\\n\" : \"\") + wrd;\n          }));\n        } else {\n          wrds.push(wrd[0]);\n        }\n      });\n      words = wrds;\n      lineIndent = getStringUnitWidth.apply(this, [pad, options]);\n    }\n\n    for (i = 0, l = words.length; i < l; i++) {\n      var force = 0;\n      word = words[i];\n\n      if (lineIndent && word[0] == \"\\n\") {\n        word = word.substr(1);\n        force = 1;\n      }\n\n      widths_array = getCharWidthsArray.apply(this, [word, options]);\n      current_word_length = getArraySum(widths_array);\n\n      if (line_length + separator_length + current_word_length > maxlen || force) {\n        if (current_word_length > maxlen) {\n          // this happens when you have space-less long URLs for example.\n          // we just chop these to size. We do NOT insert hiphens\n          tmp = splitLongWord.apply(this, [word, widths_array, maxlen - (line_length + separator_length), maxlen]); // first line we add to existing line object\n\n          line.push(tmp.shift()); // it's ok to have extra space indicator there\n          // last line we make into new line object\n\n          line = [tmp.pop()]; // lines in the middle we apped to lines object as whole lines\n\n          while (tmp.length) {\n            lines.push([tmp.shift()]); // single fragment occupies whole line\n          }\n\n          current_word_length = getArraySum(widths_array.slice(word.length - (line[0] ? line[0].length : 0)));\n        } else {\n          // just put it on a new line\n          line = [word];\n        } // now we attach new line to lines\n\n\n        lines.push(line);\n        line_length = current_word_length + lineIndent;\n        separator_length = spaceCharWidth;\n      } else {\n        line.push(word);\n        line_length += separator_length + current_word_length;\n        separator_length = spaceCharWidth;\n      }\n    }\n\n    if (lineIndent) {\n      var postProcess = function postProcess(ln, idx) {\n        return (idx ? pad : '') + ln.join(\" \");\n      };\n    } else {\n      var postProcess = function postProcess(ln) {\n        return ln.join(\" \");\n      };\n    }\n\n    return lines.map(postProcess);\n  };\n  /**\n  * Splits a given string into an array of strings. Uses 'size' value\n  * (in measurement units declared as default for the jsPDF instance)\n  * and the font's \"widths\" and \"Kerning\" tables, where available, to\n  * determine display length of a given string for a given font.\n  * \n  * We use character's 100% of unit size (height) as width when Width\n  * table or other default width is not available.\n  * \n  * @name splitTextToSize\n  * @public\n  * @function\n  * @param {string} text Unencoded, regular JavaScript (Unicode, UTF-16 / UCS-2) string.\n  * @param {number} size Nominal number, measured in units default to this instance of jsPDF.\n  * @param {Object} options Optional flags needed for chopper to do the right thing.\n  * @returns {Array} array Array with strings chopped to size.\n  */\n\n\n  API.splitTextToSize = function (text, maxlen, options) {\n\n    options = options || {};\n\n    var fsize = options.fontSize || this.internal.getFontSize(),\n        newOptions = function (options) {\n      var widths = {\n        0: 1\n      },\n          kerning = {};\n\n      if (!options.widths || !options.kerning) {\n        var f = this.internal.getFont(options.fontName, options.fontStyle),\n            encoding = 'Unicode'; // NOT UTF8, NOT UTF16BE/LE, NOT UCS2BE/LE\n        // Actual JavaScript-native String's 16bit char codes used.\n        // no multi-byte logic here\n\n        if (f.metadata[encoding]) {\n          return {\n            widths: f.metadata[encoding].widths || widths,\n            kerning: f.metadata[encoding].kerning || kerning\n          };\n        } else {\n          return {\n            font: f.metadata,\n            fontSize: this.internal.getFontSize(),\n            charSpace: this.internal.getCharSpace()\n          };\n        }\n      } else {\n        return {\n          widths: options.widths,\n          kerning: options.kerning\n        };\n      } // then use default values\n\n\n      return {\n        widths: widths,\n        kerning: kerning\n      };\n    }.call(this, options); // first we split on end-of-line chars\n\n\n    var paragraphs;\n\n    if (Array.isArray(text)) {\n      paragraphs = text;\n    } else {\n      paragraphs = text.split(/\\r?\\n/);\n    } // now we convert size (max length of line) into \"font size units\"\n    // at present time, the \"font size unit\" is always 'point'\n    // 'proportional' means, \"in proportion to font size\"\n\n\n    var fontUnit_maxLen = 1.0 * this.internal.scaleFactor * maxlen / fsize; // at this time, fsize is always in \"points\" regardless of the default measurement unit of the doc.\n    // this may change in the future?\n    // until then, proportional_maxlen is likely to be in 'points'\n    // If first line is to be indented (shorter or longer) than maxLen\n    // we indicate that by using CSS-style \"text-indent\" option.\n    // here it's in font units too (which is likely 'points')\n    // it can be negative (which makes the first line longer than maxLen)\n\n    newOptions.textIndent = options.textIndent ? options.textIndent * 1.0 * this.internal.scaleFactor / fsize : 0;\n    newOptions.lineIndent = options.lineIndent;\n    var i,\n        l,\n        output = [];\n\n    for (i = 0, l = paragraphs.length; i < l; i++) {\n      output = output.concat(splitParagraphIntoLines.apply(this, [paragraphs[i], fontUnit_maxLen, newOptions]));\n    }\n\n    return output;\n  };\n})(jsPDF.API);\n\n/** @license\n jsPDF standard_fonts_metrics plugin\n * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com\n * MIT license.\n * \n * ====================================================================\n */\n\n(function (API) {\n  /*\n  # reference (Python) versions of 'compress' and 'uncompress'\n  # only 'uncompress' function is featured lower as JavaScript\n  # if you want to unit test \"roundtrip\", just transcribe the reference\n  # 'compress' function from Python into JavaScript\n  \n  def compress(data):\n  \n  \tkeys =   '0123456789abcdef'\n  \tvalues = 'klmnopqrstuvwxyz'\n  \tmapping = dict(zip(keys, values))\n  \tvals = []\n  \tfor key in data.keys():\n  \t\tvalue = data[key]\n  \t\ttry:\n  \t\t\tkeystring = hex(key)[2:]\n  \t\t\tkeystring = keystring[:-1] + mapping[keystring[-1:]]\n  \t\texcept:\n  \t\t\tkeystring = key.join([\"'\",\"'\"])\n  \t\t\t#print('Keystring is %s' % keystring)\n  \n  \t\ttry:\n  \t\t\tif value < 0:\n  \t\t\t\tvaluestring = hex(value)[3:]\n  \t\t\t\tnumberprefix = '-'\n  \t\t\telse:\n  \t\t\t\tvaluestring = hex(value)[2:]\n  \t\t\t\tnumberprefix = ''\n  \t\t\tvaluestring = numberprefix + valuestring[:-1] + mapping[valuestring[-1:]]\n  \t\texcept:\n  \t\t\tif type(value) == dict:\n  \t\t\t\tvaluestring = compress(value)\n  \t\t\telse:\n  \t\t\t\traise Exception(\"Don't know what to do with value type %s\" % type(value))\n  \n  \t\tvals.append(keystring+valuestring)\n  \t\n  \treturn '{' + ''.join(vals) + '}'\n  \n  def uncompress(data):\n  \n  \tdecoded = '0123456789abcdef'\n  \tencoded = 'klmnopqrstuvwxyz'\n  \tmapping = dict(zip(encoded, decoded))\n  \n  \tsign = +1\n  \tstringmode = False\n  \tstringparts = []\n  \n  \toutput = {}\n  \n  \tactiveobject = output\n  \tparentchain = []\n  \n  \tkeyparts = ''\n  \tvalueparts = ''\n  \n  \tkey = None\n  \n  \tending = set(encoded)\n  \n  \ti = 1\n  \tl = len(data) - 1 # stripping starting, ending {}\n  \twhile i != l: # stripping {}\n  \t\t# -, {, }, ' are special.\n  \n  \t\tch = data[i]\n  \t\ti += 1\n  \n  \t\tif ch == \"'\":\n  \t\t\tif stringmode:\n  \t\t\t\t# end of string mode\n  \t\t\t\tstringmode = False\n  \t\t\t\tkey = ''.join(stringparts)\n  \t\t\telse:\n  \t\t\t\t# start of string mode\n  \t\t\t\tstringmode = True\n  \t\t\t\tstringparts = []\n  \t\telif stringmode == True:\n  \t\t\t#print(\"Adding %s to stringpart\" % ch)\n  \t\t\tstringparts.append(ch)\n  \n  \t\telif ch == '{':\n  \t\t\t# start of object\n  \t\t\tparentchain.append( [activeobject, key] )\n  \t\t\tactiveobject = {}\n  \t\t\tkey = None\n  \t\t\t#DEBUG = True\n  \t\telif ch == '}':\n  \t\t\t# end of object\n  \t\t\tparent, key = parentchain.pop()\n  \t\t\tparent[key] = activeobject\n  \t\t\tkey = None\n  \t\t\tactiveobject = parent\n  \t\t\t#DEBUG = False\n  \n  \t\telif ch == '-':\n  \t\t\tsign = -1\n  \t\telse:\n  \t\t\t# must be number\n  \t\t\tif key == None:\n  \t\t\t\t#debug(\"In Key. It is '%s', ch is '%s'\" % (keyparts, ch))\n  \t\t\t\tif ch in ending:\n  \t\t\t\t\t#debug(\"End of key\")\n  \t\t\t\t\tkeyparts += mapping[ch]\n  \t\t\t\t\tkey = int(keyparts, 16) * sign\n  \t\t\t\t\tsign = +1\n  \t\t\t\t\tkeyparts = ''\n  \t\t\t\telse:\n  \t\t\t\t\tkeyparts += ch\n  \t\t\telse:\n  \t\t\t\t#debug(\"In value. It is '%s', ch is '%s'\" % (valueparts, ch))\n  \t\t\t\tif ch in ending:\n  \t\t\t\t\t#debug(\"End of value\")\n  \t\t\t\t\tvalueparts += mapping[ch]\n  \t\t\t\t\tactiveobject[key] = int(valueparts, 16) * sign\n  \t\t\t\t\tsign = +1\n  \t\t\t\t\tkey = None\n  \t\t\t\t\tvalueparts = ''\n  \t\t\t\telse:\n  \t\t\t\t\tvalueparts += ch\n  \n  \t\t\t#debug(activeobject)\n  \n  \treturn output\n  \n  */\n\n  /**\n  Uncompresses data compressed into custom, base16-like format. \n  @public\n  @function\n  @param\n  @returns {Type}\n  */\n\n  var uncompress = function uncompress(data) {\n    var decoded = '0123456789abcdef',\n        encoded = 'klmnopqrstuvwxyz',\n        mapping = {};\n\n    for (var i = 0; i < encoded.length; i++) {\n      mapping[encoded[i]] = decoded[i];\n    }\n\n    var undef,\n        output = {},\n        sign = 1,\n        stringparts // undef. will be [] in string mode\n    ,\n        activeobject = output,\n        parentchain = [],\n        parent_key_pair,\n        keyparts = '',\n        valueparts = '',\n        key // undef. will be Truthy when Key is resolved.\n    ,\n        datalen = data.length - 1 // stripping ending }\n    ,\n        ch;\n    i = 1; // stripping starting {\n\n    while (i != datalen) {\n      // - { } ' are special.\n      ch = data[i];\n      i += 1;\n\n      if (ch == \"'\") {\n        if (stringparts) {\n          // end of string mode\n          key = stringparts.join('');\n          stringparts = undef;\n        } else {\n          // start of string mode\n          stringparts = [];\n        }\n      } else if (stringparts) {\n        stringparts.push(ch);\n      } else if (ch == '{') {\n        // start of object\n        parentchain.push([activeobject, key]);\n        activeobject = {};\n        key = undef;\n      } else if (ch == '}') {\n        // end of object\n        parent_key_pair = parentchain.pop();\n        parent_key_pair[0][parent_key_pair[1]] = activeobject;\n        key = undef;\n        activeobject = parent_key_pair[0];\n      } else if (ch == '-') {\n        sign = -1;\n      } else {\n        // must be number\n        if (key === undef) {\n          if (mapping.hasOwnProperty(ch)) {\n            keyparts += mapping[ch];\n            key = parseInt(keyparts, 16) * sign;\n            sign = +1;\n            keyparts = '';\n          } else {\n            keyparts += ch;\n          }\n        } else {\n          if (mapping.hasOwnProperty(ch)) {\n            valueparts += mapping[ch];\n            activeobject[key] = parseInt(valueparts, 16) * sign;\n            sign = +1;\n            key = undef;\n            valueparts = '';\n          } else {\n            valueparts += ch;\n          }\n        }\n      }\n    } // end while\n\n\n    return output;\n  }; // encoding = 'Unicode' \n  // NOT UTF8, NOT UTF16BE/LE, NOT UCS2BE/LE. NO clever BOM behavior\n  // Actual 16bit char codes used.\n  // no multi-byte logic here\n  // Unicode characters to WinAnsiEncoding:\n  // {402: 131, 8211: 150, 8212: 151, 8216: 145, 8217: 146, 8218: 130, 8220: 147, 8221: 148, 8222: 132, 8224: 134, 8225: 135, 8226: 149, 8230: 133, 8364: 128, 8240:137, 8249: 139, 8250: 155, 710: 136, 8482: 153, 338: 140, 339: 156, 732: 152, 352: 138, 353: 154, 376: 159, 381: 142, 382: 158}\n  // as you can see, all Unicode chars are outside of 0-255 range. No char code conflicts.\n  // this means that you can give Win cp1252 encoded strings to jsPDF for rendering directly\n  // as well as give strings with some (supported by these fonts) Unicode characters and \n  // these will be mapped to win cp1252 \n  // for example, you can send char code (cp1252) 0x80 or (unicode) 0x20AC, getting \"Euro\" glyph displayed in both cases.\n\n\n  var encodingBlock = {\n    'codePages': ['WinAnsiEncoding'],\n    'WinAnsiEncoding': uncompress(\"{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}\")\n  },\n      encodings = {\n    'Unicode': {\n      'Courier': encodingBlock,\n      'Courier-Bold': encodingBlock,\n      'Courier-BoldOblique': encodingBlock,\n      'Courier-Oblique': encodingBlock,\n      'Helvetica': encodingBlock,\n      'Helvetica-Bold': encodingBlock,\n      'Helvetica-BoldOblique': encodingBlock,\n      'Helvetica-Oblique': encodingBlock,\n      'Times-Roman': encodingBlock,\n      'Times-Bold': encodingBlock,\n      'Times-BoldItalic': encodingBlock,\n      'Times-Italic': encodingBlock //\t, 'Symbol'\n      //\t, 'ZapfDingbats'\n\n    }\n  },\n      fontMetrics = {\n    'Unicode': {\n      // all sizing numbers are n/fontMetricsFractionOf = one font size unit\n      // this means that if fontMetricsFractionOf = 1000, and letter A's width is 476, it's\n      // width is 476/1000 or 47.6% of its height (regardless of font size)\n      // At this time this value applies to \"widths\" and \"kerning\" numbers.\n      // char code 0 represents \"default\" (average) width - use it for chars missing in this table.\n      // key 'fof' represents the \"fontMetricsFractionOf\" value\n      'Courier-Oblique': uncompress(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\n      'Times-BoldItalic': uncompress(\"{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}\"),\n      'Helvetica-Bold': uncompress(\"{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}\"),\n      'Courier': uncompress(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\n      'Courier-BoldOblique': uncompress(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\n      'Times-Bold': uncompress(\"{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}\"),\n      'Symbol': uncompress(\"{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}\"),\n      'Helvetica': uncompress(\"{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}\"),\n      'Helvetica-BoldOblique': uncompress(\"{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}\"),\n      'ZapfDingbats': uncompress(\"{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}\"),\n      'Courier-Bold': uncompress(\"{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}\"),\n      'Times-Italic': uncompress(\"{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}\"),\n      'Times-Roman': uncompress(\"{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}\"),\n      'Helvetica-Oblique': uncompress(\"{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}\")\n    }\n  };\n  /*\n  This event handler is fired when a new jsPDF object is initialized\n  This event handler appends metrics data to standard fonts within\n  that jsPDF instance. The metrics are mapped over Unicode character\n  codes, NOT CIDs or other codes matching the StandardEncoding table of the\n  standard PDF fonts.\n  Future:\n  Also included is the encoding maping table, converting Unicode (UCS-2, UTF-16)\n  char codes to StandardEncoding character codes. The encoding table is to be used\n  somewhere around \"pdfEscape\" call.\n  */\n\n  API.events.push(['addFont', function (data) {\n    var font = data.font;\n    var metrics,\n        unicode_section,\n        encoding = 'Unicode',\n        encodingBlock;\n    metrics = fontMetrics[encoding][font.postScriptName];\n\n    if (metrics) {\n      if (font.metadata[encoding]) {\n        unicode_section = font.metadata[encoding];\n      } else {\n        unicode_section = font.metadata[encoding] = {};\n      }\n\n      unicode_section.widths = metrics.widths;\n      unicode_section.kerning = metrics.kerning;\n    }\n\n    encodingBlock = encodings[encoding][font.postScriptName];\n\n    if (encodingBlock) {\n      if (font.metadata[encoding]) {\n        unicode_section = font.metadata[encoding];\n      } else {\n        unicode_section = font.metadata[encoding] = {};\n      }\n\n      unicode_section.encoding = encodingBlock;\n\n      if (encodingBlock.codePages && encodingBlock.codePages.length) {\n        font.encoding = encodingBlock.codePages[0];\n      }\n    }\n  }]); // end of adding event handler\n})(jsPDF.API);\n\n/**\n * @license\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n\n/**\n* @name ttfsupport\n* @module\n*/\n(function (jsPDF, global) {\n\n  jsPDF.API.events.push(['addFont', function (data) {\n    var font = data.font;\n    var instance = data.instance;\n\n    if (typeof instance !== \"undefined\" && instance.existsFileInVFS(font.postScriptName)) {\n      var file = instance.getFileFromVFS(font.postScriptName);\n\n      if (typeof file !== \"string\") {\n        throw new Error(\"Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('\" + font.postScriptName + \"').\");\n      }\n\n      font.metadata = jsPDF.API.TTFFont.open(font.postScriptName, font.fontName, file, font.encoding);\n      font.metadata.Unicode = font.metadata.Unicode || {\n        encoding: {},\n        kerning: {},\n        widths: []\n      };\n      font.metadata.glyIdsUsed = [0];\n    } else if (font.isStandardFont === false) {\n      throw new Error(\"Font does not exist in vFS, import fonts or remove declaration doc.addFont('\" + font.postScriptName + \"').\");\n    }\n  }]); // end of adding event handler\n})(jsPDF, typeof self !== \"undefined\" && self || typeof global !== \"undefined\" && global || typeof window !== \"undefined\" && window || Function(\"return this\")());\n\n/** @license\n * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com\n * \n * \n * ====================================================================\n */\n\n(function (jsPDFAPI) {\n  /**\n  * Parses SVG XML and converts only some of the SVG elements into\n  * PDF elements.\n  *\n  * Supports:\n  * paths\n  * \n  * @name addSvg\n  * @public\n  * @function \n  * @param {string} SVG-Data as Text\n  * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page\n  * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page\n  * @param {number} width of SVG (in units declared at inception of PDF document)\n  * @param {number} height of SVG (in units declared at inception of PDF document)\n  * @returns {Object} jsPDF-instance\n  */\n\n  jsPDFAPI.addSvg = function (svgtext, x, y, w, h) {\n    // 'this' is _jsPDF object returned when jsPDF is inited (new jsPDF())\n    var undef;\n\n    if (x === undef || y === undef) {\n      throw new Error(\"addSVG needs values for 'x' and 'y'\");\n    }\n\n    function InjectCSS(cssbody, document) {\n      var styletag = document.createElement('style');\n      styletag.type = 'text/css';\n\n      if (styletag.styleSheet) {\n        // ie\n        styletag.styleSheet.cssText = cssbody;\n      } else {\n        // others\n        styletag.appendChild(document.createTextNode(cssbody));\n      }\n\n      document.getElementsByTagName(\"head\")[0].appendChild(styletag);\n    }\n\n    function createWorkerNode(document) {\n      var frameID = 'childframe' // Date.now().toString() + '_' + (Math.random() * 100).toString()\n      ,\n          frame = document.createElement('iframe');\n      InjectCSS('.jsPDF_sillysvg_iframe {display:none;position:absolute;}', document);\n      frame.name = frameID;\n      frame.setAttribute(\"width\", 0);\n      frame.setAttribute(\"height\", 0);\n      frame.setAttribute(\"frameborder\", \"0\");\n      frame.setAttribute(\"scrolling\", \"no\");\n      frame.setAttribute(\"seamless\", \"seamless\");\n      frame.setAttribute(\"class\", \"jsPDF_sillysvg_iframe\");\n      document.body.appendChild(frame);\n      return frame;\n    }\n\n    function attachSVGToWorkerNode(svgtext, frame) {\n      var framedoc = (frame.contentWindow || frame.contentDocument).document;\n      framedoc.write(svgtext);\n      framedoc.close();\n      return framedoc.getElementsByTagName('svg')[0];\n    }\n\n    function convertPathToPDFLinesArgs(path) {\n      // - starting coordinate pair\n      // - array of arrays of vector shifts (2-len for line, 6 len for bezier)\n      // - scale array [horizontal, vertical] ratios\n      // - style (stroke, fill, both)\n\n      var x = parseFloat(path[1]),\n          y = parseFloat(path[2]),\n          vectors = [],\n          position = 3,\n          len = path.length;\n\n      while (position < len) {\n        if (path[position] === 'c') {\n          vectors.push([parseFloat(path[position + 1]), parseFloat(path[position + 2]), parseFloat(path[position + 3]), parseFloat(path[position + 4]), parseFloat(path[position + 5]), parseFloat(path[position + 6])]);\n          position += 7;\n        } else if (path[position] === 'l') {\n          vectors.push([parseFloat(path[position + 1]), parseFloat(path[position + 2])]);\n          position += 3;\n        } else {\n          position += 1;\n        }\n      }\n\n      return [x, y, vectors];\n    }\n\n    var workernode = createWorkerNode(document),\n        svgnode = attachSVGToWorkerNode(svgtext, workernode),\n        scale = [1, 1],\n        svgw = parseFloat(svgnode.getAttribute('width')),\n        svgh = parseFloat(svgnode.getAttribute('height'));\n\n    if (svgw && svgh) {\n      // setting both w and h makes image stretch to size.\n      // this may distort the image, but fits your demanded size\n      if (w && h) {\n        scale = [w / svgw, h / svgh];\n      } // if only one is set, that value is set as max and SVG\n      // is scaled proportionately.\n      else if (w) {\n          scale = [w / svgw, w / svgw];\n        } else if (h) {\n          scale = [h / svgh, h / svgh];\n        }\n    }\n\n    var i,\n        l,\n        tmp,\n        linesargs,\n        items = svgnode.childNodes;\n\n    for (i = 0, l = items.length; i < l; i++) {\n      tmp = items[i];\n\n      if (tmp.tagName && tmp.tagName.toUpperCase() === 'PATH') {\n        linesargs = convertPathToPDFLinesArgs(tmp.getAttribute(\"d\").split(' ')); // path start x coordinate\n\n        linesargs[0] = linesargs[0] * scale[0] + x; // where x is upper left X of image\n        // path start y coordinate\n\n        linesargs[1] = linesargs[1] * scale[1] + y; // where y is upper left Y of image\n        // the rest of lines are vectors. these will adjust with scale value auto.\n\n        this.lines.call(this, linesargs[2] // lines\n        , linesargs[0] // starting x\n        , linesargs[1] // starting y\n        , scale);\n      }\n    } // clean up\n    // workernode.parentNode.removeChild(workernode)\n\n\n    return this;\n  }; //fallback\n\n\n  jsPDFAPI.addSVG = jsPDFAPI.addSvg;\n  /**\n  * Parses SVG XML and saves it as image into the PDF.\n  *\n  * Depends on canvas-element and canvg\n  *\n  * @name addSvgAsImage\n  * @public\n  * @function\n  * @param {string} SVG-Data as Text\n  * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page\n  * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page\n  * @param {number} width of SVG-Image (in units declared at inception of PDF document)\n  * @param {number} height of SVG-Image (in units declared at inception of PDF document)\n  * @param {string} alias of SVG-Image (if used multiple times)\n  * @param {string} compression of the generated JPEG, can have the values 'NONE', 'FAST', 'MEDIUM' and 'SLOW'\n  * @param {number} rotation of the image in degrees (0-359)\n  * \n  * @returns jsPDF jsPDF-instance\n  */\n\n  jsPDFAPI.addSvgAsImage = function (svg, x, y, w, h, alias, compression, rotation) {\n    if (isNaN(x) || isNaN(y)) {\n      console.error('jsPDF.addSvgAsImage: Invalid coordinates', arguments);\n      throw new Error('Invalid coordinates passed to jsPDF.addSvgAsImage');\n    }\n\n    if (isNaN(w) || isNaN(h)) {\n      console.error('jsPDF.addSvgAsImage: Invalid measurements', arguments);\n      throw new Error('Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage');\n    }\n\n    var canvas = document.createElement('canvas');\n    canvas.width = w;\n    canvas.height = h;\n    var ctx = canvas.getContext('2d');\n    ctx.fillStyle = '#fff'; /// set white fill style\n\n    ctx.fillRect(0, 0, canvas.width, canvas.height); //load a svg snippet in the canvas with id = 'drawingArea'\n\n    canvg(canvas, svg, {\n      ignoreMouse: true,\n      ignoreAnimation: true,\n      ignoreDimensions: true,\n      ignoreClear: true\n    });\n    this.addImage(canvas.toDataURL(\"image/jpeg\", 1.0), x, y, w, h, compression, rotation);\n    return this;\n  };\n})(jsPDF.API);\n\n/** \n * @license\n * ==================================================================== \n * Copyright (c) 2013 Eduardo Menezes de Morais, eduardo.morais@usp.br\n * \n * \n * ====================================================================\n */\n\n/**\n * jsPDF total_pages plugin\n * @name total_pages\n * @module\n */\n(function (jsPDFAPI) {\n  /**\n  * @name putTotalPages\n  * @function\n  * @param {string} pageExpression Regular Expression\n  * @returns {jsPDF} jsPDF-instance\n  */\n\n  jsPDFAPI.putTotalPages = function (pageExpression) {\n\n    var replaceExpression;\n    var totalNumberOfPages = 0;\n\n    if (parseInt(this.internal.getFont().id.substr(1), 10) < 15) {\n      replaceExpression = new RegExp(pageExpression, 'g');\n      totalNumberOfPages = this.internal.getNumberOfPages();\n    } else {\n      replaceExpression = new RegExp(this.pdfEscape16(pageExpression, this.internal.getFont()), 'g');\n      totalNumberOfPages = this.pdfEscape16(this.internal.getNumberOfPages() + '', this.internal.getFont());\n    }\n\n    for (var n = 1; n <= this.internal.getNumberOfPages(); n++) {\n      for (var i = 0; i < this.internal.pages[n].length; i++) {\n        this.internal.pages[n][i] = this.internal.pages[n][i].replace(replaceExpression, totalNumberOfPages);\n      }\n    }\n\n    return this;\n  };\n})(jsPDF.API);\n\n/**\n * jsPDF viewerPreferences Plugin\n * @author Aras Abbasi (github.com/arasabbasi)\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n\n/**\n* Adds the ability to set ViewerPreferences and by thus\n* controlling the way the document is to be presented on the\n* screen or in print.\n* @name viewerpreferences\n* @module\n*/\n(function (jsPDFAPI) {\n  /**\n   * Set the ViewerPreferences of the generated PDF\n   *\n   * @name viewerPreferences\n  * @function\n  * @public\n   * @param {Object} options Array with the ViewerPreferences<br />\n   * Example: doc.viewerPreferences({\"FitWindow\":true});<br />\n   * <br />\n   * You can set following preferences:<br />\n   * <br/>\n   * <b>HideToolbar</b> <i>(boolean)</i><br />\n   * Default value: false<br />\n   * <br />\n   * <b>HideMenubar</b> <i>(boolean)</i><br />\n   * Default value: false.<br />\n   * <br />\n   * <b>HideWindowUI</b> <i>(boolean)</i><br />\n   * Default value: false.<br />\n   * <br />\n   * <b>FitWindow</b> <i>(boolean)</i><br />\n   * Default value: false.<br />\n   * <br />\n   * <b>CenterWindow</b> <i>(boolean)</i><br />\n   * Default value: false<br />\n   * <br />\n   * <b>DisplayDocTitle</b> <i>(boolean)</i><br />\n   * Default value: false.<br />\n   * <br />\n   * <b>NonFullScreenPageMode</b> <i>(string)</i><br />\n   * Possible values: UseNone, UseOutlines, UseThumbs, UseOC<br />\n   * Default value: UseNone<br/>\n   * <br />\n   * <b>Direction</b> <i>(string)</i><br />\n   * Possible values: L2R, R2L<br />\n   * Default value: L2R.<br />\n   * <br />\n   * <b>ViewArea</b> <i>(string)</i><br />\n   * Possible values: MediaBox, CropBox, TrimBox, BleedBox, ArtBox<br />\n   * Default value: CropBox.<br />\n   * <br />\n   * <b>ViewClip</b> <i>(string)</i><br />\n   * Possible values: MediaBox, CropBox, TrimBox, BleedBox, ArtBox<br />\n   * Default value: CropBox<br />\n   * <br />\n   * <b>PrintArea</b> <i>(string)</i><br />\n   * Possible values: MediaBox, CropBox, TrimBox, BleedBox, ArtBox<br />\n   * Default value: CropBox<br />\n   * <br />\n   * <b>PrintClip</b> <i>(string)</i><br />\n   * Possible values: MediaBox, CropBox, TrimBox, BleedBox, ArtBox<br />\n   * Default value: CropBox.<br />\n   * <br />\n   * <b>PrintScaling</b> <i>(string)</i><br />\n   * Possible values: AppDefault, None<br />\n   * Default value: AppDefault.<br />\n   * <br />\n   * <b>Duplex</b> <i>(string)</i><br />\n   * Possible values: Simplex, DuplexFlipLongEdge, DuplexFlipShortEdge\n   * Default value: none<br />\n   * <br />\n   * <b>PickTrayByPDFSize</b> <i>(boolean)</i><br />\n   * Default value: false<br />\n   * <br />\n   * <b>PrintPageRange</b> <i>(Array)</i><br />\n   * Example: [[1,5], [7,9]]<br />\n   * Default value: as defined by PDF viewer application<br />\n   * <br />\n   * <b>NumCopies</b> <i>(Number)</i><br />\n   * Possible values: 1, 2, 3, 4, 5<br />\n   * Default value: 1<br />\n   * <br />\n   * For more information see the PDF Reference, sixth edition on Page 577\n   * @param {boolean} doReset True to reset the settings\n   * @function\n   * @returns jsPDF jsPDF-instance\n   * @example\n   * var doc = new jsPDF()\n   * doc.text('This is a test', 10, 10)\n   * doc.viewerPreferences({'FitWindow': true}, true)\n   * doc.save(\"viewerPreferences.pdf\")\n   *\n   * // Example printing 10 copies, using cropbox, and hiding UI.\n   * doc.viewerPreferences({\n   *   'HideWindowUI': true,\n   *   'PrintArea': 'CropBox',\n   *   'NumCopies': 10\n   * })\n   */\n\n  jsPDFAPI.viewerPreferences = function (options, doReset) {\n    options = options || {};\n    doReset = doReset || false;\n    var configuration;\n    var configurationTemplate = {\n      \"HideToolbar\": {\n        defaultValue: false,\n        value: false,\n        type: \"boolean\",\n        explicitSet: false,\n        valueSet: [true, false],\n        pdfVersion: 1.3\n      },\n      \"HideMenubar\": {\n        defaultValue: false,\n        value: false,\n        type: \"boolean\",\n        explicitSet: false,\n        valueSet: [true, false],\n        pdfVersion: 1.3\n      },\n      \"HideWindowUI\": {\n        defaultValue: false,\n        value: false,\n        type: \"boolean\",\n        explicitSet: false,\n        valueSet: [true, false],\n        pdfVersion: 1.3\n      },\n      \"FitWindow\": {\n        defaultValue: false,\n        value: false,\n        type: \"boolean\",\n        explicitSet: false,\n        valueSet: [true, false],\n        pdfVersion: 1.3\n      },\n      \"CenterWindow\": {\n        defaultValue: false,\n        value: false,\n        type: \"boolean\",\n        explicitSet: false,\n        valueSet: [true, false],\n        pdfVersion: 1.3\n      },\n      \"DisplayDocTitle\": {\n        defaultValue: false,\n        value: false,\n        type: \"boolean\",\n        explicitSet: false,\n        valueSet: [true, false],\n        pdfVersion: 1.4\n      },\n      \"NonFullScreenPageMode\": {\n        defaultValue: \"UseNone\",\n        value: \"UseNone\",\n        type: \"name\",\n        explicitSet: false,\n        valueSet: [\"UseNone\", \"UseOutlines\", \"UseThumbs\", \"UseOC\"],\n        pdfVersion: 1.3\n      },\n      \"Direction\": {\n        defaultValue: \"L2R\",\n        value: \"L2R\",\n        type: \"name\",\n        explicitSet: false,\n        valueSet: [\"L2R\", \"R2L\"],\n        pdfVersion: 1.3\n      },\n      \"ViewArea\": {\n        defaultValue: \"CropBox\",\n        value: \"CropBox\",\n        type: \"name\",\n        explicitSet: false,\n        valueSet: [\"MediaBox\", \"CropBox\", \"TrimBox\", \"BleedBox\", \"ArtBox\"],\n        pdfVersion: 1.4\n      },\n      \"ViewClip\": {\n        defaultValue: \"CropBox\",\n        value: \"CropBox\",\n        type: \"name\",\n        explicitSet: false,\n        valueSet: [\"MediaBox\", \"CropBox\", \"TrimBox\", \"BleedBox\", \"ArtBox\"],\n        pdfVersion: 1.4\n      },\n      \"PrintArea\": {\n        defaultValue: \"CropBox\",\n        value: \"CropBox\",\n        type: \"name\",\n        explicitSet: false,\n        valueSet: [\"MediaBox\", \"CropBox\", \"TrimBox\", \"BleedBox\", \"ArtBox\"],\n        pdfVersion: 1.4\n      },\n      \"PrintClip\": {\n        defaultValue: \"CropBox\",\n        value: \"CropBox\",\n        type: \"name\",\n        explicitSet: false,\n        valueSet: [\"MediaBox\", \"CropBox\", \"TrimBox\", \"BleedBox\", \"ArtBox\"],\n        pdfVersion: 1.4\n      },\n      \"PrintScaling\": {\n        defaultValue: \"AppDefault\",\n        value: \"AppDefault\",\n        type: \"name\",\n        explicitSet: false,\n        valueSet: [\"AppDefault\", \"None\"],\n        pdfVersion: 1.6\n      },\n      \"Duplex\": {\n        defaultValue: \"\",\n        value: \"none\",\n        type: \"name\",\n        explicitSet: false,\n        valueSet: [\"Simplex\", \"DuplexFlipShortEdge\", \"DuplexFlipLongEdge\", \"none\"],\n        pdfVersion: 1.7\n      },\n      \"PickTrayByPDFSize\": {\n        defaultValue: false,\n        value: false,\n        type: \"boolean\",\n        explicitSet: false,\n        valueSet: [true, false],\n        pdfVersion: 1.7\n      },\n      \"PrintPageRange\": {\n        defaultValue: \"\",\n        value: \"\",\n        type: \"array\",\n        explicitSet: false,\n        valueSet: null,\n        pdfVersion: 1.7\n      },\n      \"NumCopies\": {\n        defaultValue: 1,\n        value: 1,\n        type: \"integer\",\n        explicitSet: false,\n        valueSet: null,\n        pdfVersion: 1.7\n      }\n    };\n    var configurationKeys = Object.keys(configurationTemplate);\n    var rangeArray = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var isValid = true;\n    var method;\n    var value;\n\n    function arrayContainsElement(array, element) {\n      var iterator;\n      var result = false;\n\n      for (iterator = 0; iterator < array.length; iterator += 1) {\n        if (array[iterator] === element) {\n          result = true;\n        }\n      }\n\n      return result;\n    }\n\n    if (this.internal.viewerpreferences === undefined) {\n      this.internal.viewerpreferences = {};\n      this.internal.viewerpreferences.configuration = JSON.parse(JSON.stringify(configurationTemplate));\n      this.internal.viewerpreferences.isSubscribed = false;\n    }\n\n    configuration = this.internal.viewerpreferences.configuration;\n\n    if (options === \"reset\" || doReset === true) {\n      var len = configurationKeys.length;\n\n      for (k = 0; k < len; k += 1) {\n        configuration[configurationKeys[k]].value = configuration[configurationKeys[k]].defaultValue;\n        configuration[configurationKeys[k]].explicitSet = false;\n      }\n    }\n\n    if (_typeof(options) === \"object\") {\n      for (method in options) {\n        value = options[method];\n\n        if (arrayContainsElement(configurationKeys, method) && value !== undefined) {\n          if (configuration[method].type === \"boolean\" && typeof value === \"boolean\") {\n            configuration[method].value = value;\n          } else if (configuration[method].type === \"name\" && arrayContainsElement(configuration[method].valueSet, value)) {\n            configuration[method].value = value;\n          } else if (configuration[method].type === \"integer\" && Number.isInteger(value)) {\n            configuration[method].value = value;\n          } else if (configuration[method].type === \"array\") {\n            for (i = 0; i < value.length; i += 1) {\n              isValid = true;\n\n              if (value[i].length === 1 && typeof value[i][0] === \"number\") {\n                rangeArray.push(String(value[i] - 1));\n              } else if (value[i].length > 1) {\n                for (j = 0; j < value[i].length; j += 1) {\n                  if (typeof value[i][j] !== \"number\") {\n                    isValid = false;\n                  }\n                }\n\n                if (isValid === true) {\n                  rangeArray.push([value[i][0] - 1, value[i][1] - 1].join(\" \"));\n                }\n              }\n            }\n\n            configuration[method].value = \"[\" + rangeArray.join(\" \") + \"]\";\n          } else {\n            configuration[method].value = configuration[method].defaultValue;\n          }\n\n          configuration[method].explicitSet = true;\n        }\n      }\n    }\n\n    if (this.internal.viewerpreferences.isSubscribed === false) {\n      this.internal.events.subscribe(\"putCatalog\", function () {\n        var pdfDict = [];\n        var vPref;\n\n        for (vPref in configuration) {\n          if (configuration[vPref].explicitSet === true) {\n            if (configuration[vPref].type === \"name\") {\n              pdfDict.push(\"/\" + vPref + \" /\" + configuration[vPref].value);\n            } else {\n              pdfDict.push(\"/\" + vPref + \" \" + configuration[vPref].value);\n            }\n          }\n        }\n\n        if (pdfDict.length !== 0) {\n          this.internal.write(\"/ViewerPreferences\\n<<\\n\" + pdfDict.join(\"\\n\") + \"\\n>>\");\n        }\n      });\n      this.internal.viewerpreferences.isSubscribed = true;\n    }\n\n    this.internal.viewerpreferences.configuration = configuration;\n    return this;\n  };\n})(jsPDF.API);\n\n/** ==================================================================== \n * jsPDF XMP metadata plugin\n * Copyright (c) 2016 Jussi Utunen, u-jussi@suomi24.fi\n * \n * \n * ====================================================================\n */\n\n/*global jsPDF */\n\n/**\n* @name xmp_metadata\n* @module\n*/\n(function (jsPDFAPI) {\n\n  var xmpmetadata = \"\";\n  var xmpnamespaceuri = \"\";\n  var metadata_object_number = \"\";\n  /**\n  * Adds XMP formatted metadata to PDF\n  *\n  * @name addMetadata\n  * @function\n  * @param {String} metadata The actual metadata to be added. The metadata shall be stored as XMP simple value. Note that if the metadata string contains XML markup characters \"<\", \">\" or \"&\", those characters should be written using XML entities.\n  * @param {String} namespaceuri Sets the namespace URI for the metadata. Last character should be slash or hash.\n  * @returns {jsPDF} jsPDF-instance\n  */\n\n  jsPDFAPI.addMetadata = function (metadata, namespaceuri) {\n    xmpnamespaceuri = namespaceuri || \"http://jspdf.default.namespaceuri/\"; //The namespace URI for an XMP name shall not be empty\n\n    xmpmetadata = metadata;\n    this.internal.events.subscribe('postPutResources', function () {\n      if (!xmpmetadata) {\n        metadata_object_number = \"\";\n      } else {\n        var xmpmeta_beginning = '<x:xmpmeta xmlns:x=\"adobe:ns:meta/\">';\n        var rdf_beginning = '<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"><rdf:Description rdf:about=\"\" xmlns:jspdf=\"' + xmpnamespaceuri + '\"><jspdf:metadata>';\n        var rdf_ending = '</jspdf:metadata></rdf:Description></rdf:RDF>';\n        var xmpmeta_ending = '</x:xmpmeta>';\n        var utf8_xmpmeta_beginning = unescape(encodeURIComponent(xmpmeta_beginning));\n        var utf8_rdf_beginning = unescape(encodeURIComponent(rdf_beginning));\n        var utf8_metadata = unescape(encodeURIComponent(xmpmetadata));\n        var utf8_rdf_ending = unescape(encodeURIComponent(rdf_ending));\n        var utf8_xmpmeta_ending = unescape(encodeURIComponent(xmpmeta_ending));\n        var total_len = utf8_rdf_beginning.length + utf8_metadata.length + utf8_rdf_ending.length + utf8_xmpmeta_beginning.length + utf8_xmpmeta_ending.length;\n        metadata_object_number = this.internal.newObject();\n        this.internal.write('<< /Type /Metadata /Subtype /XML /Length ' + total_len + ' >>');\n        this.internal.write('stream');\n        this.internal.write(utf8_xmpmeta_beginning + utf8_rdf_beginning + utf8_metadata + utf8_rdf_ending + utf8_xmpmeta_ending);\n        this.internal.write('endstream');\n        this.internal.write('endobj');\n      }\n    });\n    this.internal.events.subscribe('putCatalog', function () {\n      if (metadata_object_number) {\n        this.internal.write('/Metadata ' + metadata_object_number + ' 0 R');\n      }\n    });\n    return this;\n  };\n})(jsPDF.API);\n\n/**\n* @name utf8\n* @module\n*/\n(function (jsPDF, global) {\n\n  var jsPDFAPI = jsPDF.API;\n  /**************************************************/\n\n  /* function : toHex                               */\n\n  /* comment : Replace str with a hex string.       */\n\n  /**************************************************/\n\n  function toHex(str) {\n    var hex = '';\n\n    for (var i = 0; i < str.length; i++) {\n      hex += '' + str.charCodeAt(i).toString(16);\n    }\n\n    return hex;\n  }\n  /***************************************************************************************************/\n\n  /* function : pdfEscape16                                                                          */\n\n  /* comment : The character id of a 2-byte string is converted to a hexadecimal number by obtaining */\n\n  /*   the corresponding glyph id and width, and then adding padding to the string.                  */\n\n  /***************************************************************************************************/\n\n\n  var pdfEscape16 = jsPDFAPI.pdfEscape16 = function (text, font) {\n    var widths = font.metadata.Unicode.widths;\n    var padz = [\"\", \"0\", \"00\", \"000\", \"0000\"];\n    var ar = [\"\"];\n\n    for (var i = 0, l = text.length, t; i < l; ++i) {\n      t = font.metadata.characterToGlyph(text.charCodeAt(i));\n      font.metadata.glyIdsUsed.push(t);\n      font.metadata.toUnicode[t] = text.charCodeAt(i);\n\n      if (widths.indexOf(t) == -1) {\n        widths.push(t);\n        widths.push([parseInt(font.metadata.widthOfGlyph(t), 10)]);\n      }\n\n      if (t == '0') {\n        //Spaces are not allowed in cmap.\n        return ar.join(\"\");\n      } else {\n        t = t.toString(16);\n        ar.push(padz[4 - t.length], t);\n      }\n    }\n\n    return ar.join(\"\");\n  };\n\n  var toUnicodeCmap = function toUnicodeCmap(map) {\n    var code, codes, range, unicode, unicodeMap, _i, _len;\n\n    unicodeMap = '/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap\\n/CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n>> def\\n/CMapName /Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange\\n<0000><ffff>\\nendcodespacerange';\n    codes = Object.keys(map).sort(function (a, b) {\n      return a - b;\n    });\n    range = [];\n\n    for (_i = 0, _len = codes.length; _i < _len; _i++) {\n      code = codes[_i];\n\n      if (range.length >= 100) {\n        unicodeMap += \"\\n\" + range.length + \" beginbfchar\\n\" + range.join('\\n') + \"\\nendbfchar\";\n        range = [];\n      }\n\n      unicode = ('0000' + map[code].toString(16)).slice(-4);\n      code = ('0000' + (+code).toString(16)).slice(-4);\n      range.push(\"<\" + code + \"><\" + unicode + \">\");\n    }\n\n    if (range.length) {\n      unicodeMap += \"\\n\" + range.length + \" beginbfchar\\n\" + range.join('\\n') + \"\\nendbfchar\\n\";\n    }\n\n    unicodeMap += 'endcmap\\nCMapName currentdict /CMap defineresource pop\\nend\\nend';\n    return unicodeMap;\n  };\n\n  var identityHFunction = function identityHFunction(font, out, newObject, putStream) {\n    if (font.metadata instanceof jsPDF.API.TTFFont && font.encoding === 'Identity-H') {\n      //Tag with Identity-H\n      var widths = font.metadata.Unicode.widths;\n      var data = font.metadata.subset.encode(font.metadata.glyIdsUsed, 1);\n      var pdfOutput = data;\n      var pdfOutput2 = \"\";\n\n      for (var i = 0; i < pdfOutput.length; i++) {\n        pdfOutput2 += String.fromCharCode(pdfOutput[i]);\n      }\n\n      var fontTable = newObject();\n      putStream({\n        data: pdfOutput2,\n        addLength1: true\n      });\n      out('endobj');\n      var cmap = newObject();\n      var cmapData = toUnicodeCmap(font.metadata.toUnicode);\n      putStream({\n        data: cmapData,\n        addLength1: true\n      });\n      out('endobj');\n      var fontDescriptor = newObject();\n      out('<<');\n      out('/Type /FontDescriptor');\n      out('/FontName /' + font.fontName);\n      out('/FontFile2 ' + fontTable + ' 0 R');\n      out('/FontBBox ' + jsPDF.API.PDFObject.convert(font.metadata.bbox));\n      out('/Flags ' + font.metadata.flags);\n      out('/StemV ' + font.metadata.stemV);\n      out('/ItalicAngle ' + font.metadata.italicAngle);\n      out('/Ascent ' + font.metadata.ascender);\n      out('/Descent ' + font.metadata.decender);\n      out('/CapHeight ' + font.metadata.capHeight);\n      out('>>');\n      out('endobj');\n      var DescendantFont = newObject();\n      out('<<');\n      out('/Type /Font');\n      out('/BaseFont /' + font.fontName);\n      out('/FontDescriptor ' + fontDescriptor + ' 0 R');\n      out('/W ' + jsPDF.API.PDFObject.convert(widths));\n      out('/CIDToGIDMap /Identity');\n      out('/DW 1000');\n      out('/Subtype /CIDFontType2');\n      out('/CIDSystemInfo');\n      out('<<');\n      out('/Supplement 0');\n      out('/Registry (Adobe)');\n      out('/Ordering (' + font.encoding + ')');\n      out('>>');\n      out('>>');\n      out('endobj');\n      font.objectNumber = newObject();\n      out('<<');\n      out('/Type /Font');\n      out('/Subtype /Type0');\n      out('/ToUnicode ' + cmap + ' 0 R');\n      out('/BaseFont /' + font.fontName);\n      out('/Encoding /' + font.encoding);\n      out('/DescendantFonts [' + DescendantFont + ' 0 R]');\n      out('>>');\n      out('endobj');\n      font.isAlreadyPutted = true;\n    }\n  };\n\n  jsPDFAPI.events.push(['putFont', function (args) {\n    identityHFunction(args.font, args.out, args.newObject, args.putStream);\n  }]);\n\n  var winAnsiEncodingFunction = function winAnsiEncodingFunction(font, out, newObject, putStream) {\n    if (font.metadata instanceof jsPDF.API.TTFFont && font.encoding === 'WinAnsiEncoding') {\n      //Tag with WinAnsi encoding\n      var widths = font.metadata.Unicode.widths;\n      var data = font.metadata.rawData;\n      var pdfOutput = data;\n      var pdfOutput2 = \"\";\n\n      for (var i = 0; i < pdfOutput.length; i++) {\n        pdfOutput2 += String.fromCharCode(pdfOutput[i]);\n      }\n\n      var fontTable = newObject();\n      putStream({\n        data: pdfOutput2,\n        addLength1: true\n      });\n      out('endobj');\n      var cmap = newObject();\n      var cmapData = toUnicodeCmap(font.metadata.toUnicode);\n      putStream({\n        data: cmapData,\n        addLength1: true\n      });\n      out('endobj');\n      var fontDescriptor = newObject();\n      out('<<');\n      out('/Descent ' + font.metadata.decender);\n      out('/CapHeight ' + font.metadata.capHeight);\n      out('/StemV ' + font.metadata.stemV);\n      out('/Type /FontDescriptor');\n      out('/FontFile2 ' + fontTable + ' 0 R');\n      out('/Flags 96');\n      out('/FontBBox ' + jsPDF.API.PDFObject.convert(font.metadata.bbox));\n      out('/FontName /' + font.fontName);\n      out('/ItalicAngle ' + font.metadata.italicAngle);\n      out('/Ascent ' + font.metadata.ascender);\n      out('>>');\n      out('endobj');\n      font.objectNumber = newObject();\n\n      for (var i = 0; i < font.metadata.hmtx.widths.length; i++) {\n        font.metadata.hmtx.widths[i] = parseInt(font.metadata.hmtx.widths[i] * (1000 / font.metadata.head.unitsPerEm)); //Change the width of Em units to Point units.\n      }\n\n      out('<</Subtype/TrueType/Type/Font/ToUnicode ' + cmap + ' 0 R/BaseFont/' + font.fontName + '/FontDescriptor ' + fontDescriptor + ' 0 R' + '/Encoding/' + font.encoding + ' /FirstChar 29 /LastChar 255 /Widths ' + jsPDF.API.PDFObject.convert(font.metadata.hmtx.widths) + '>>');\n      out('endobj');\n      font.isAlreadyPutted = true;\n    }\n  };\n\n  jsPDFAPI.events.push(['putFont', function (args) {\n    winAnsiEncodingFunction(args.font, args.out, args.newObject, args.putStream);\n  }]);\n\n  var utf8TextFunction = function utf8TextFunction(args) {\n    var text = args.text || '';\n    var x = args.x;\n    var y = args.y;\n    var options = args.options || {};\n    var mutex = args.mutex || {};\n    var pdfEscape = mutex.pdfEscape;\n    var activeFontKey = mutex.activeFontKey;\n    var fonts = mutex.fonts;\n    var key,\n        fontSize = mutex.activeFontSize;\n    var str = '',\n        s = 0,\n        cmapConfirm;\n    var strText = '';\n    var key = activeFontKey;\n    var encoding = fonts[key].encoding;\n\n    if (fonts[key].encoding !== 'Identity-H') {\n      return {\n        text: text,\n        x: x,\n        y: y,\n        options: options,\n        mutex: mutex\n      };\n    }\n    strText = text;\n    key = activeFontKey;\n\n    if (Object.prototype.toString.call(text) === '[object Array]') {\n      strText = text[0];\n    }\n\n    for (s = 0; s < strText.length; s += 1) {\n      if (fonts[key].metadata.hasOwnProperty('cmap')) {\n        cmapConfirm = fonts[key].metadata.cmap.unicode.codeMap[strText[s].charCodeAt(0)];\n        /*\n        if (Object.prototype.toString.call(text) === '[object Array]') {\n          var i = 0;\n         // for (i = 0; i < text.length; i += 1) {\n              if (Object.prototype.toString.call(text[s]) === '[object Array]') {\n                  cmapConfirm = fonts[key].metadata.cmap.unicode.codeMap[strText[s][0].charCodeAt(0)]; //Make sure the cmap has the corresponding glyph id\n              } else {\n                  \n              }\n          //}\n          \n        } else {\n          cmapConfirm = fonts[key].metadata.cmap.unicode.codeMap[strText[s].charCodeAt(0)]; //Make sure the cmap has the corresponding glyph id\n        }*/\n      }\n\n      if (!cmapConfirm) {\n        if (strText[s].charCodeAt(0) < 256 && fonts[key].metadata.hasOwnProperty('Unicode')) {\n          str += strText[s];\n        } else {\n          str += '';\n        }\n      } else {\n        str += strText[s];\n      }\n    }\n\n    var result = '';\n\n    if (parseInt(key.slice(1)) < 14 || encoding === 'WinAnsiEncoding') {\n      //For the default 13 font\n      result = toHex(pdfEscape(str, key));\n    } else if (encoding === 'Identity-H') {\n      result = pdfEscape16(str, fonts[key]);\n    }\n\n    mutex.isHex = true;\n    return {\n      text: result,\n      x: x,\n      y: y,\n      options: options,\n      mutex: mutex\n    };\n  };\n\n  var utf8EscapeFunction = function utf8EscapeFunction(parms) {\n    var text = parms.text || '',\n        x = parms.x,\n        y = parms.y,\n        options = parms.options,\n        mutex = parms.mutex;\n    var lang = options.lang;\n    var tmpText = [];\n    var args = {\n      text: text,\n      x: x,\n      y: y,\n      options: options,\n      mutex: mutex\n    };\n\n    if (Object.prototype.toString.call(text) === '[object Array]') {\n      var i = 0;\n\n      for (i = 0; i < text.length; i += 1) {\n        if (Object.prototype.toString.call(text[i]) === '[object Array]') {\n          if (text[i].length === 3) {\n            tmpText.push([utf8TextFunction(Object.assign({}, args, {\n              text: text[i][0]\n            })).text, text[i][1], text[i][2]]);\n          } else {\n            tmpText.push(utf8TextFunction(Object.assign({}, args, {\n              text: text[i]\n            })).text);\n          }\n        } else {\n          tmpText.push(utf8TextFunction(Object.assign({}, args, {\n            text: text[i]\n          })).text);\n        }\n      }\n\n      parms.text = tmpText;\n    } else {\n      parms.text = utf8TextFunction(Object.assign({}, args, {\n        text: text\n      })).text;\n    }\n  };\n\n  jsPDFAPI.events.push(['postProcessText', utf8EscapeFunction]);\n})(jsPDF, typeof self !== \"undefined\" && self || typeof global !== \"undefined\" && global || typeof window !== \"undefined\" && window || Function(\"return this\")());\n\n/**\n * jsPDF virtual FileSystem functionality\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n\n/**\n* Use the vFS to handle files\n* \n* @name vFS\n* @module\n*/\n(function (jsPDFAPI) {\n\n  var _initializeVFS = function _initializeVFS(instance) {\n    if (typeof instance === \"undefined\") {\n      return false;\n    }\n\n    if (typeof instance.vFS === \"undefined\") {\n      instance.vFS = {};\n    }\n\n    return true;\n  };\n  /** \n  * Check if the file exists in the vFS\n  * \n  * @name existsFileInVFS\n  * @function \n  * @param {string} Possible filename in the vFS.\n  * @returns {boolean}\n  * @example\n  * doc.existsFileInVFS(\"someFile.txt\");\n  */\n\n\n  jsPDFAPI.existsFileInVFS = function (filename) {\n    if (_initializeVFS(this.internal)) {\n      return typeof this.internal.vFS[filename] !== \"undefined\";\n    }\n\n    return false;\n  };\n  /**\n  * Add a file to the vFS\n  *\n  * @name addFileToVFS\n  * @function \n  * @param {string} filename The name of the file which should be added.\n  * @param {string} filecontent The content of the file.\n  * @returns {jsPDF}\n  * @example\n  * doc.addFileToVFS(\"someFile.txt\", \"BADFACE1\");\n  */\n\n\n  jsPDFAPI.addFileToVFS = function (filename, filecontent) {\n    _initializeVFS(this.internal);\n\n    this.internal.vFS[filename] = filecontent;\n    return this;\n  };\n  /** \n  * Get the file from the vFS\n  * \n  * @name getFileFromVFS\n  * @function \n  * @param {string} The name of the file which gets requested.\n  * @returns {string} \n  * @example\n  * doc.getFileFromVFS(\"someFile.txt\");\n  */\n\n\n  jsPDFAPI.getFileFromVFS = function (filename) {\n    _initializeVFS(this.internal);\n\n    if (typeof this.internal.vFS[filename] !== \"undefined\") {\n      return this.internal.vFS[filename];\n    }\n\n    return null;\n  };\n})(jsPDF.API);\n\n/*\n * Copyright (c) 2012 chick307 <chick307@gmail.com>\n *\n * Licensed under the MIT License.\n * http://opensource.org/licenses/mit-license\n */\n(function (jsPDF, callback) {\n  jsPDF.API.adler32cs = callback();\n})(jsPDF, function () {\n  var _hasArrayBuffer = typeof ArrayBuffer === 'function' && typeof Uint8Array === 'function';\n\n  var _Buffer = null,\n      _isBuffer = function () {\n    if (!_hasArrayBuffer) return function _isBuffer() {\n      return false;\n    };\n\n    try {\n      var buffer = {};\n      if (typeof buffer.Buffer === 'function') _Buffer = buffer.Buffer;\n    } catch (error) {}\n\n    return function _isBuffer(value) {\n      return value instanceof ArrayBuffer || _Buffer !== null && value instanceof _Buffer;\n    };\n  }();\n\n  var _utf8ToBinary = function () {\n    if (_Buffer !== null) {\n      return function _utf8ToBinary(utf8String) {\n        return new _Buffer(utf8String, 'utf8').toString('binary');\n      };\n    } else {\n      return function _utf8ToBinary(utf8String) {\n        return unescape(encodeURIComponent(utf8String));\n      };\n    }\n  }();\n\n  var MOD = 65521;\n\n  var _update = function _update(checksum, binaryString) {\n    var a = checksum & 0xFFFF,\n        b = checksum >>> 16;\n\n    for (var i = 0, length = binaryString.length; i < length; i++) {\n      a = (a + (binaryString.charCodeAt(i) & 0xFF)) % MOD;\n      b = (b + a) % MOD;\n    }\n\n    return (b << 16 | a) >>> 0;\n  };\n\n  var _updateUint8Array = function _updateUint8Array(checksum, uint8Array) {\n    var a = checksum & 0xFFFF,\n        b = checksum >>> 16;\n\n    for (var i = 0, length = uint8Array.length; i < length; i++) {\n      a = (a + uint8Array[i]) % MOD;\n      b = (b + a) % MOD;\n    }\n\n    return (b << 16 | a) >>> 0;\n  };\n\n  var exports = {};\n\n  var Adler32 = exports.Adler32 = function () {\n    var ctor = function Adler32(checksum) {\n      if (!(this instanceof ctor)) {\n        throw new TypeError('Constructor cannot called be as a function.');\n      }\n\n      if (!isFinite(checksum = checksum == null ? 1 : +checksum)) {\n        throw new Error('First arguments needs to be a finite number.');\n      }\n\n      this.checksum = checksum >>> 0;\n    };\n\n    var proto = ctor.prototype = {};\n    proto.constructor = ctor;\n\n    ctor.from = function (from) {\n      from.prototype = proto;\n      return from;\n    }(function from(binaryString) {\n      if (!(this instanceof ctor)) {\n        throw new TypeError('Constructor cannot called be as a function.');\n      }\n\n      if (binaryString == null) throw new Error('First argument needs to be a string.');\n      this.checksum = _update(1, binaryString.toString());\n    });\n\n    ctor.fromUtf8 = function (fromUtf8) {\n      fromUtf8.prototype = proto;\n      return fromUtf8;\n    }(function fromUtf8(utf8String) {\n      if (!(this instanceof ctor)) {\n        throw new TypeError('Constructor cannot called be as a function.');\n      }\n\n      if (utf8String == null) throw new Error('First argument needs to be a string.');\n\n      var binaryString = _utf8ToBinary(utf8String.toString());\n\n      this.checksum = _update(1, binaryString);\n    });\n\n    if (_hasArrayBuffer) {\n      ctor.fromBuffer = function (fromBuffer) {\n        fromBuffer.prototype = proto;\n        return fromBuffer;\n      }(function fromBuffer(buffer) {\n        if (!(this instanceof ctor)) {\n          throw new TypeError('Constructor cannot called be as a function.');\n        }\n\n        if (!_isBuffer(buffer)) throw new Error('First argument needs to be ArrayBuffer.');\n        var array = new Uint8Array(buffer);\n        return this.checksum = _updateUint8Array(1, array);\n      });\n    }\n\n    proto.update = function update(binaryString) {\n      if (binaryString == null) throw new Error('First argument needs to be a string.');\n      binaryString = binaryString.toString();\n      return this.checksum = _update(this.checksum, binaryString);\n    };\n\n    proto.updateUtf8 = function updateUtf8(utf8String) {\n      if (utf8String == null) throw new Error('First argument needs to be a string.');\n\n      var binaryString = _utf8ToBinary(utf8String.toString());\n\n      return this.checksum = _update(this.checksum, binaryString);\n    };\n\n    if (_hasArrayBuffer) {\n      proto.updateBuffer = function updateBuffer(buffer) {\n        if (!_isBuffer(buffer)) throw new Error('First argument needs to be ArrayBuffer.');\n        var array = new Uint8Array(buffer);\n        return this.checksum = _updateUint8Array(this.checksum, array);\n      };\n    }\n\n    proto.clone = function clone() {\n      return new Adler32(this.checksum);\n    };\n\n    return ctor;\n  }();\n\n  exports.from = function from(binaryString) {\n    if (binaryString == null) throw new Error('First argument needs to be a string.');\n    return _update(1, binaryString.toString());\n  };\n\n  exports.fromUtf8 = function fromUtf8(utf8String) {\n    if (utf8String == null) throw new Error('First argument needs to be a string.');\n\n    var binaryString = _utf8ToBinary(utf8String.toString());\n\n    return _update(1, binaryString);\n  };\n\n  if (_hasArrayBuffer) {\n    exports.fromBuffer = function fromBuffer(buffer) {\n      if (!_isBuffer(buffer)) throw new Error('First argument need to be ArrayBuffer.');\n      var array = new Uint8Array(buffer);\n      return _updateUint8Array(1, array);\n    };\n  }\n\n  return exports;\n});\n\n/**\n* Unicode Bidi Engine based on the work of Alex Shensis (@asthensis)\n* MIT License\n*/\n(function (jsPDF) {\n  /**\n   * Table of Unicode types.\n   *\n   * Generated by:\n   *\n   * var bidi = require(\"./bidi/index\");\n   * var bidi_accumulate = bidi.slice(0, 256).concat(bidi.slice(0x0500, 0x0500 + 256 * 3)).\n   * concat(bidi.slice(0x2000, 0x2000 + 256)).concat(bidi.slice(0xFB00, 0xFB00 + 256)).\n   * concat(bidi.slice(0xFE00, 0xFE00 + 2 * 256));\n   *\n   * for( var i = 0; i < bidi_accumulate.length; i++) {\n   * \tif(bidi_accumulate[i] === undefined || bidi_accumulate[i] === 'ON')\n   * \t\tbidi_accumulate[i] = 'N'; //mark as neutral to conserve space and substitute undefined\n   * }\n   * var bidiAccumulateStr = 'return [ \"' + bidi_accumulate.toString().replace(/,/g, '\", \"') + '\" ];';\n   * require(\"fs\").writeFile('unicode-types.js', bidiAccumulateStr);\n   *\n   * Based on:\n   * https://github.com/mathiasbynens/unicode-8.0.0\n   */\n\n  var bidiUnicodeTypes = [\"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"S\", \"B\", \"S\", \"WS\", \"B\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"B\", \"B\", \"B\", \"S\", \"WS\", \"N\", \"N\", \"ET\", \"ET\", \"ET\", \"N\", \"N\", \"N\", \"N\", \"N\", \"ES\", \"CS\", \"ES\", \"CS\", \"CS\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"CS\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"N\", \"N\", \"N\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"B\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"CS\", \"N\", \"ET\", \"ET\", \"ET\", \"ET\", \"N\", \"N\", \"N\", \"N\", \"L\", \"N\", \"N\", \"BN\", \"N\", \"N\", \"ET\", \"ET\", \"EN\", \"EN\", \"N\", \"L\", \"N\", \"N\", \"N\", \"EN\", \"L\", \"N\", \"N\", \"N\", \"N\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"L\", \"N\", \"N\", \"N\", \"N\", \"N\", \"ET\", \"N\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"R\", \"NSM\", \"R\", \"NSM\", \"NSM\", \"R\", \"NSM\", \"NSM\", \"R\", \"NSM\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"N\", \"N\", \"N\", \"N\", \"N\", \"R\", \"R\", \"R\", \"R\", \"R\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"N\", \"N\", \"AL\", \"ET\", \"ET\", \"AL\", \"CS\", \"AL\", \"N\", \"N\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"N\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"AN\", \"ET\", \"AN\", \"AN\", \"AL\", \"AL\", \"AL\", \"NSM\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AN\", \"N\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"N\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"AL\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"N\", \"AL\", \"AL\", \"NSM\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"N\", \"N\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"AL\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"R\", \"R\", \"N\", \"N\", \"N\", \"N\", \"R\", \"N\", \"N\", \"N\", \"N\", \"N\", \"WS\", \"WS\", \"WS\", \"WS\", \"WS\", \"WS\", \"WS\", \"WS\", \"WS\", \"WS\", \"WS\", \"BN\", \"BN\", \"BN\", \"L\", \"R\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"WS\", \"B\", \"LRE\", \"RLE\", \"PDF\", \"LRO\", \"RLO\", \"CS\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"CS\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"WS\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"N\", \"LRI\", \"RLI\", \"FSI\", \"PDI\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"BN\", \"EN\", \"L\", \"N\", \"N\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"ES\", \"ES\", \"N\", \"N\", \"N\", \"L\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"ES\", \"ES\", \"N\", \"N\", \"N\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"N\", \"N\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"ET\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"N\", \"N\", \"N\", \"N\", \"R\", \"NSM\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"ES\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"N\", \"R\", \"R\", \"R\", \"R\", \"R\", \"N\", \"R\", \"N\", \"R\", \"R\", \"N\", \"R\", \"R\", \"N\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"NSM\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"CS\", \"N\", \"CS\", \"N\", \"N\", \"CS\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"ET\", \"N\", \"N\", \"ES\", \"ES\", \"N\", \"N\", \"N\", \"N\", \"N\", \"ET\", \"ET\", \"N\", \"N\", \"N\", \"N\", \"N\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"N\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"N\", \"N\", \"BN\", \"N\", \"N\", \"N\", \"ET\", \"ET\", \"ET\", \"N\", \"N\", \"N\", \"N\", \"N\", \"ES\", \"CS\", \"ES\", \"CS\", \"CS\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"EN\", \"CS\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"N\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"N\", \"L\", \"L\", \"L\", \"L\", \"L\", \"L\", \"N\", \"N\", \"L\", \"L\", \"L\", \"N\", \"N\", \"N\", \"ET\", \"ET\", \"N\", \"N\", \"N\", \"ET\", \"ET\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\"];\n  /**\n   * Unicode Bidi algorithm compliant Bidi engine.\n   * For reference see http://unicode.org/reports/tr9/\n  */\n\n  /**\n   * constructor ( options )\n   *\n   * Initializes Bidi engine\n   *\n   * @param {Object} See 'setOptions' below for detailed description.\n   * options are cashed between invocation of 'doBidiReorder' method\n   *\n   * sample usage pattern of BidiEngine:\n   * var opt = {\n   * \tisInputVisual: true,\n   * \tisInputRtl: false,\n   * \tisOutputVisual: false,\n   * \tisOutputRtl: false,\n   * \tisSymmetricSwapping: true\n   * }\n   * var sourceToTarget = [], levels = [];\n   * var bidiEng = Globalize.bidiEngine(opt);\n   * var src = \"text string to be reordered\";\n   * var ret = bidiEng.doBidiReorder(src, sourceToTarget, levels);\n   */\n\n  jsPDF.__bidiEngine__ = jsPDF.prototype.__bidiEngine__ = function (options) {\n    var _UNICODE_TYPES = _bidiUnicodeTypes;\n    var _STATE_TABLE_LTR = [[0, 3, 0, 1, 0, 0, 0], [0, 3, 0, 1, 2, 2, 0], [0, 3, 0, 0x11, 2, 0, 1], [0, 3, 5, 5, 4, 1, 0], [0, 3, 0x15, 0x15, 4, 0, 1], [0, 3, 5, 5, 4, 2, 0]];\n    var _STATE_TABLE_RTL = [[2, 0, 1, 1, 0, 1, 0], [2, 0, 1, 1, 0, 2, 0], [2, 0, 2, 1, 3, 2, 0], [2, 0, 2, 0x21, 3, 1, 1]];\n    var _TYPE_NAMES_MAP = {\n      \"L\": 0,\n      \"R\": 1,\n      \"EN\": 2,\n      \"AN\": 3,\n      \"N\": 4,\n      \"B\": 5,\n      \"S\": 6\n    };\n    var _UNICODE_RANGES_MAP = {\n      0: 0,\n      5: 1,\n      6: 2,\n      7: 3,\n      0x20: 4,\n      0xFB: 5,\n      0xFE: 6,\n      0xFF: 7\n    };\n    var _SWAP_TABLE = [\"(\", \")\", \"(\", \"<\", \">\", \"<\", \"[\", \"]\", \"[\", \"{\", \"}\", \"{\", \"\\xAB\", \"\\xBB\", \"\\xAB\", \"\\u2039\", \"\\u203A\", \"\\u2039\", \"\\u2045\", \"\\u2046\", \"\\u2045\", \"\\u207D\", \"\\u207E\", \"\\u207D\", \"\\u208D\", \"\\u208E\", \"\\u208D\", \"\\u2264\", \"\\u2265\", \"\\u2264\", \"\\u2329\", \"\\u232A\", \"\\u2329\", \"\\uFE59\", \"\\uFE5A\", \"\\uFE59\", \"\\uFE5B\", \"\\uFE5C\", \"\\uFE5B\", \"\\uFE5D\", \"\\uFE5E\", \"\\uFE5D\", \"\\uFE64\", \"\\uFE65\", \"\\uFE64\"];\n\n    var _LTR_RANGES_REG_EXPR = new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/);\n\n    var _lastArabic = false,\n        _hasUbatB,\n        _hasUbatS,\n        DIR_LTR = 0,\n        DIR_RTL = 1,\n        _isInVisual,\n        _isInRtl,\n        _isOutVisual,\n        _isOutRtl,\n        _isSymmetricSwapping,\n        _dir = DIR_LTR;\n\n    this.__bidiEngine__ = {};\n\n    var _init = function _init(text, sourceToTargetMap) {\n      if (sourceToTargetMap) {\n        for (var i = 0; i < text.length; i++) {\n          sourceToTargetMap[i] = i;\n        }\n      }\n\n      if (_isInRtl === undefined) {\n        _isInRtl = _isContextualDirRtl(text);\n      }\n\n      if (_isOutRtl === undefined) {\n        _isOutRtl = _isContextualDirRtl(text);\n      }\n    }; // for reference see 3.2 in http://unicode.org/reports/tr9/\n    //\n\n\n    var _getCharType = function _getCharType(ch) {\n      var charCode = ch.charCodeAt(),\n          range = charCode >> 8,\n          rangeIdx = _UNICODE_RANGES_MAP[range];\n\n      if (rangeIdx !== undefined) {\n        return _UNICODE_TYPES[rangeIdx * 256 + (charCode & 0xFF)];\n      } else if (range === 0xFC || range === 0xFD) {\n        return \"AL\";\n      } else if (_LTR_RANGES_REG_EXPR.test(range)) {\n        //unlikely case\n        return \"L\";\n      } else if (range === 8) {\n        // even less likely\n        return \"R\";\n      }\n\n      return \"N\"; //undefined type, mark as neutral\n    };\n\n    var _isContextualDirRtl = function _isContextualDirRtl(text) {\n      for (var i = 0, charType; i < text.length; i++) {\n        charType = _getCharType(text.charAt(i));\n\n        if (charType === \"L\") {\n          return false;\n        } else if (charType === \"R\") {\n          return true;\n        }\n      }\n\n      return false;\n    }; // for reference see 3.3.4 & 3.3.5 in http://unicode.org/reports/tr9/\n    //\n\n\n    var _resolveCharType = function _resolveCharType(chars, types, resolvedTypes, index) {\n      var cType = types[index],\n          wType,\n          nType,\n          i,\n          len;\n\n      switch (cType) {\n        case \"L\":\n        case \"R\":\n          _lastArabic = false;\n          break;\n\n        case \"N\":\n        case \"AN\":\n          break;\n\n        case \"EN\":\n          if (_lastArabic) {\n            cType = \"AN\";\n          }\n\n          break;\n\n        case \"AL\":\n          _lastArabic = true;\n          cType = \"R\";\n          break;\n\n        case \"WS\":\n          cType = \"N\";\n          break;\n\n        case \"CS\":\n          if (index < 1 || index + 1 >= types.length || (wType = resolvedTypes[index - 1]) !== \"EN\" && wType !== \"AN\" || (nType = types[index + 1]) !== \"EN\" && nType !== \"AN\") {\n            cType = \"N\";\n          } else if (_lastArabic) {\n            nType = \"AN\";\n          }\n\n          cType = nType === wType ? nType : \"N\";\n          break;\n\n        case \"ES\":\n          wType = index > 0 ? resolvedTypes[index - 1] : \"B\";\n          cType = wType === \"EN\" && index + 1 < types.length && types[index + 1] === \"EN\" ? \"EN\" : \"N\";\n          break;\n\n        case \"ET\":\n          if (index > 0 && resolvedTypes[index - 1] === \"EN\") {\n            cType = \"EN\";\n            break;\n          } else if (_lastArabic) {\n            cType = \"N\";\n            break;\n          }\n\n          i = index + 1;\n          len = types.length;\n\n          while (i < len && types[i] === \"ET\") {\n            i++;\n          }\n\n          if (i < len && types[i] === \"EN\") {\n            cType = \"EN\";\n          } else {\n            cType = \"N\";\n          }\n\n          break;\n\n        case \"NSM\":\n          if (_isInVisual && !_isInRtl) {\n            //V->L\n            len = types.length;\n            i = index + 1;\n\n            while (i < len && types[i] === \"NSM\") {\n              i++;\n            }\n\n            if (i < len) {\n              var c = chars[index];\n              var rtlCandidate = c >= 0x0591 && c <= 0x08FF || c === 0xFB1E;\n              wType = types[i];\n\n              if (rtlCandidate && (wType === \"R\" || wType === \"AL\")) {\n                cType = \"R\";\n                break;\n              }\n            }\n          }\n\n          if (index < 1 || (wType = types[index - 1]) === \"B\") {\n            cType = \"N\";\n          } else {\n            cType = resolvedTypes[index - 1];\n          }\n\n          break;\n\n        case \"B\":\n          _lastArabic = false;\n          _hasUbatB = true;\n          cType = _dir;\n          break;\n\n        case \"S\":\n          _hasUbatS = true;\n          cType = \"N\";\n          break;\n\n        case \"LRE\":\n        case \"RLE\":\n        case \"LRO\":\n        case \"RLO\":\n        case \"PDF\":\n          _lastArabic = false;\n          break;\n\n        case \"BN\":\n          cType = \"N\";\n          break;\n      }\n\n      return cType;\n    };\n\n    var _handleUbatS = function _handleUbatS(types, levels, length) {\n      for (var i = 0; i < length; i++) {\n        if (types[i] === \"S\") {\n          levels[i] = _dir;\n\n          for (var j = i - 1; j >= 0; j--) {\n            if (types[j] === \"WS\") {\n              levels[j] = _dir;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n    };\n\n    var _invertString = function _invertString(text, sourceToTargetMap, levels) {\n      var charArray = text.split(\"\");\n\n      if (levels) {\n        _computeLevels(charArray, levels, {\n          hiLevel: _dir\n        });\n      }\n\n      charArray.reverse();\n      sourceToTargetMap && sourceToTargetMap.reverse();\n      return charArray.join(\"\");\n    }; // For reference see 3.3 in http://unicode.org/reports/tr9/\n    //\n\n\n    var _computeLevels = function _computeLevels(chars, levels, params) {\n      var action,\n          condition,\n          i,\n          index,\n          newLevel,\n          prevState,\n          condPos = -1,\n          len = chars.length,\n          newState = 0,\n          resolvedTypes = [],\n          stateTable = _dir ? _STATE_TABLE_RTL : _STATE_TABLE_LTR,\n          types = [];\n      _lastArabic = false;\n      _hasUbatB = false;\n      _hasUbatS = false;\n\n      for (i = 0; i < len; i++) {\n        types[i] = _getCharType(chars[i]);\n      }\n\n      for (index = 0; index < len; index++) {\n        prevState = newState;\n        resolvedTypes[index] = _resolveCharType(chars, types, resolvedTypes, index);\n        newState = stateTable[prevState][_TYPE_NAMES_MAP[resolvedTypes[index]]];\n        action = newState & 0xF0;\n        newState &= 0x0F;\n        levels[index] = newLevel = stateTable[newState][5];\n\n        if (action > 0) {\n          if (action === 0x10) {\n            for (i = condPos; i < index; i++) {\n              levels[i] = 1;\n            }\n\n            condPos = -1;\n          } else {\n            condPos = -1;\n          }\n        }\n\n        condition = stateTable[newState][6];\n\n        if (condition) {\n          if (condPos === -1) {\n            condPos = index;\n          }\n        } else {\n          if (condPos > -1) {\n            for (i = condPos; i < index; i++) {\n              levels[i] = newLevel;\n            }\n\n            condPos = -1;\n          }\n        }\n\n        if (types[index] === \"B\") {\n          levels[index] = 0;\n        }\n\n        params.hiLevel |= newLevel;\n      }\n\n      if (_hasUbatS) {\n        _handleUbatS(types, levels, len);\n      }\n    }; // for reference see 3.4 in http://unicode.org/reports/tr9/\n    //\n\n\n    var _invertByLevel = function _invertByLevel(level, charArray, sourceToTargetMap, levels, params) {\n      if (params.hiLevel < level) {\n        return;\n      }\n\n      if (level === 1 && _dir === DIR_RTL && !_hasUbatB) {\n        charArray.reverse();\n        sourceToTargetMap && sourceToTargetMap.reverse();\n        return;\n      }\n\n      var ch,\n          high,\n          end,\n          low,\n          len = charArray.length,\n          start = 0;\n\n      while (start < len) {\n        if (levels[start] >= level) {\n          end = start + 1;\n\n          while (end < len && levels[end] >= level) {\n            end++;\n          }\n\n          for (low = start, high = end - 1; low < high; low++, high--) {\n            ch = charArray[low];\n            charArray[low] = charArray[high];\n            charArray[high] = ch;\n\n            if (sourceToTargetMap) {\n              ch = sourceToTargetMap[low];\n              sourceToTargetMap[low] = sourceToTargetMap[high];\n              sourceToTargetMap[high] = ch;\n            }\n          }\n\n          start = end;\n        }\n\n        start++;\n      }\n    }; // for reference see 7 & BD16 in http://unicode.org/reports/tr9/\n    //\n\n\n    var _symmetricSwap = function _symmetricSwap(charArray, levels, params) {\n      if (params.hiLevel !== 0 && _isSymmetricSwapping) {\n        for (var i = 0, index; i < charArray.length; i++) {\n          if (levels[i] === 1) {\n            index = _SWAP_TABLE.indexOf(charArray[i]);\n\n            if (index >= 0) {\n              charArray[i] = _SWAP_TABLE[index + 1];\n            }\n          }\n        }\n      }\n    };\n\n    var _reorder = function _reorder(text, sourceToTargetMap, levels) {\n      var charArray = text.split(\"\"),\n          params = {\n        hiLevel: _dir\n      };\n\n      if (!levels) {\n        levels = [];\n      }\n\n      _computeLevels(charArray, levels, params);\n\n      _symmetricSwap(charArray, levels, params);\n\n      _invertByLevel(DIR_RTL + 1, charArray, sourceToTargetMap, levels, params);\n\n      _invertByLevel(DIR_RTL, charArray, sourceToTargetMap, levels, params);\n\n      return charArray.join(\"\");\n    }; // doBidiReorder( text, sourceToTargetMap, levels )\n    // Performs Bidi reordering by implementing Unicode Bidi algorithm.\n    // Returns reordered string\n    // @text [String]:\n    // - input string to be reordered, this is input parameter\n    // $sourceToTargetMap [Array] (optional)\n    // - resultant mapping between input and output strings, this is output parameter\n    // $levels [Array] (optional)\n    // - array of calculated Bidi levels, , this is output parameter\n\n\n    this.__bidiEngine__.doBidiReorder = function (text, sourceToTargetMap, levels) {\n      _init(text, sourceToTargetMap);\n\n      if (!_isInVisual && _isOutVisual && !_isOutRtl) {\n        // LLTR->VLTR, LRTL->VLTR\n        _dir = _isInRtl ? DIR_RTL : DIR_LTR;\n        text = _reorder(text, sourceToTargetMap, levels);\n      } else if (_isInVisual && _isOutVisual && _isInRtl ^ _isOutRtl) {\n        // VRTL->VLTR, VLTR->VRTL\n        _dir = _isInRtl ? DIR_RTL : DIR_LTR;\n        text = _invertString(text, sourceToTargetMap, levels);\n      } else if (!_isInVisual && _isOutVisual && _isOutRtl) {\n        // LLTR->VRTL, LRTL->VRTL\n        _dir = _isInRtl ? DIR_RTL : DIR_LTR;\n        text = _reorder(text, sourceToTargetMap, levels);\n        text = _invertString(text, sourceToTargetMap);\n      } else if (_isInVisual && !_isInRtl && !_isOutVisual && !_isOutRtl) {\n        // VLTR->LLTR\n        _dir = DIR_LTR;\n        text = _reorder(text, sourceToTargetMap, levels);\n      } else if (_isInVisual && !_isOutVisual && _isInRtl ^ _isOutRtl) {\n        // VLTR->LRTL, VRTL->LLTR\n        text = _invertString(text, sourceToTargetMap);\n\n        if (_isInRtl) {\n          //LLTR -> VLTR\n          _dir = DIR_LTR;\n          text = _reorder(text, sourceToTargetMap, levels);\n        } else {\n          //LRTL -> VRTL\n          _dir = DIR_RTL;\n          text = _reorder(text, sourceToTargetMap, levels);\n          text = _invertString(text, sourceToTargetMap);\n        }\n      } else if (_isInVisual && _isInRtl && !_isOutVisual && _isOutRtl) {\n        //  VRTL->LRTL\n        _dir = DIR_RTL;\n        text = _reorder(text, sourceToTargetMap, levels);\n        text = _invertString(text, sourceToTargetMap);\n      } else if (!_isInVisual && !_isOutVisual && _isInRtl ^ _isOutRtl) {\n        // LRTL->LLTR, LLTR->LRTL\n        var isSymmetricSwappingOrig = _isSymmetricSwapping;\n\n        if (_isInRtl) {\n          //LRTL->LLTR\n          _dir = DIR_RTL;\n          text = _reorder(text, sourceToTargetMap, levels);\n          _dir = DIR_LTR;\n          _isSymmetricSwapping = false;\n          text = _reorder(text, sourceToTargetMap, levels);\n          _isSymmetricSwapping = isSymmetricSwappingOrig;\n        } else {\n          //LLTR->LRTL\n          _dir = DIR_LTR;\n          text = _reorder(text, sourceToTargetMap, levels);\n          text = _invertString(text, sourceToTargetMap);\n          _dir = DIR_RTL;\n          _isSymmetricSwapping = false;\n          text = _reorder(text, sourceToTargetMap, levels);\n          _isSymmetricSwapping = isSymmetricSwappingOrig;\n          text = _invertString(text, sourceToTargetMap);\n        }\n      }\n\n      return text;\n    };\n    /**\n    * @name setOptions( options )\n    * @function \n    * Sets options for Bidi conversion\n    * @param {Object}:\n    * - isInputVisual {boolean} (defaults to false): allowed values: true(Visual mode), false(Logical mode)\n    * - isInputRtl {boolean}: allowed values true(Right-to-left direction), false (Left-to-right directiion), undefined(Contectual direction, i.e.direction defined by first strong character of input string)\n    * - isOutputVisual {boolean} (defaults to false): allowed values: true(Visual mode), false(Logical mode)\n    * - isOutputRtl {boolean}: allowed values true(Right-to-left direction), false (Left-to-right directiion), undefined(Contectual direction, i.e.direction defined by first strong characterof input string)\n    * - isSymmetricSwapping {boolean} (defaults to false): allowed values true(needs symmetric swapping), false (no need in symmetric swapping),\n    */\n\n\n    this.__bidiEngine__.setOptions = function (options) {\n      if (options) {\n        _isInVisual = options.isInputVisual;\n        _isOutVisual = options.isOutputVisual;\n        _isInRtl = options.isInputRtl;\n        _isOutRtl = options.isOutputRtl;\n        _isSymmetricSwapping = options.isSymmetricSwapping;\n      }\n    };\n\n    this.__bidiEngine__.setOptions(options);\n\n    return this.__bidiEngine__;\n  };\n\n  var _bidiUnicodeTypes = bidiUnicodeTypes;\n  var bidiEngine = new jsPDF.__bidiEngine__({\n    isInputVisual: true\n  });\n\n  var bidiEngineFunction = function bidiEngineFunction(args) {\n    var text = args.text;\n    var x = args.x;\n    var y = args.y;\n    var options = args.options || {};\n    var mutex = args.mutex || {};\n    var lang = options.lang;\n    var tmpText = [];\n\n    if (Object.prototype.toString.call(text) === '[object Array]') {\n      var i = 0;\n      tmpText = [];\n\n      for (i = 0; i < text.length; i += 1) {\n        if (Object.prototype.toString.call(text[i]) === '[object Array]') {\n          tmpText.push([bidiEngine.doBidiReorder(text[i][0]), text[i][1], text[i][2]]);\n        } else {\n          tmpText.push([bidiEngine.doBidiReorder(text[i])]);\n        }\n      }\n\n      args.text = tmpText;\n    } else {\n      args.text = bidiEngine.doBidiReorder(text);\n    }\n  };\n\n  jsPDF.API.events.push(['postProcessText', bidiEngineFunction]);\n})(jsPDF);\n\n/*\n  Copyright (c) 2008, Adobe Systems Incorporated\n  All rights reserved.\n\n  Redistribution and use in source and binary forms, with or without \n  modification, are permitted provided that the following conditions are\n  met:\n\n  * Redistributions of source code must retain the above copyright notice, \n    this list of conditions and the following disclaimer.\n  \n  * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the \n    documentation and/or other materials provided with the distribution.\n  \n  * Neither the name of Adobe Systems Incorporated nor the names of its \n    contributors may be used to endorse or promote products derived from \n    this software without specific prior written permission.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n  IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR \n  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*\nJPEG encoder ported to JavaScript and optimized by Andreas Ritter, www.bytestrom.eu, 11/2009\n\nBasic GUI blocking jpeg encoder\n*/\nfunction JPEGEncoder(quality) {\n  var ffloor = Math.floor;\n  var YTable = new Array(64);\n  var UVTable = new Array(64);\n  var fdtbl_Y = new Array(64);\n  var fdtbl_UV = new Array(64);\n  var YDC_HT;\n  var UVDC_HT;\n  var YAC_HT;\n  var UVAC_HT;\n  var bitcode = new Array(65535);\n  var category = new Array(65535);\n  var outputfDCTQuant = new Array(64);\n  var DU = new Array(64);\n  var byteout = [];\n  var bytenew = 0;\n  var bytepos = 7;\n  var YDU = new Array(64);\n  var UDU = new Array(64);\n  var VDU = new Array(64);\n  var clt = new Array(256);\n  var RGB_YUV_TABLE = new Array(2048);\n  var currentQuality;\n  var ZigZag = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63];\n  var std_dc_luminance_nrcodes = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n  var std_dc_luminance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  var std_ac_luminance_nrcodes = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d];\n  var std_ac_luminance_values = [0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa];\n  var std_dc_chrominance_nrcodes = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0];\n  var std_dc_chrominance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  var std_ac_chrominance_nrcodes = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77];\n  var std_ac_chrominance_values = [0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa];\n\n  function initQuantTables(sf) {\n    var YQT = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99];\n\n    for (var i = 0; i < 64; i++) {\n      var t = ffloor((YQT[i] * sf + 50) / 100);\n\n      if (t < 1) {\n        t = 1;\n      } else if (t > 255) {\n        t = 255;\n      }\n\n      YTable[ZigZag[i]] = t;\n    }\n\n    var UVQT = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99];\n\n    for (var j = 0; j < 64; j++) {\n      var u = ffloor((UVQT[j] * sf + 50) / 100);\n\n      if (u < 1) {\n        u = 1;\n      } else if (u > 255) {\n        u = 255;\n      }\n\n      UVTable[ZigZag[j]] = u;\n    }\n\n    var aasf = [1.0, 1.387039845, 1.306562965, 1.175875602, 1.0, 0.785694958, 0.541196100, 0.275899379];\n    var k = 0;\n\n    for (var row = 0; row < 8; row++) {\n      for (var col = 0; col < 8; col++) {\n        fdtbl_Y[k] = 1.0 / (YTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0);\n        fdtbl_UV[k] = 1.0 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0);\n        k++;\n      }\n    }\n  }\n\n  function computeHuffmanTbl(nrcodes, std_table) {\n    var codevalue = 0;\n    var pos_in_table = 0;\n    var HT = new Array();\n\n    for (var k = 1; k <= 16; k++) {\n      for (var j = 1; j <= nrcodes[k]; j++) {\n        HT[std_table[pos_in_table]] = [];\n        HT[std_table[pos_in_table]][0] = codevalue;\n        HT[std_table[pos_in_table]][1] = k;\n        pos_in_table++;\n        codevalue++;\n      }\n\n      codevalue *= 2;\n    }\n\n    return HT;\n  }\n\n  function initHuffmanTbl() {\n    YDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes, std_dc_luminance_values);\n    UVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes, std_dc_chrominance_values);\n    YAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes, std_ac_luminance_values);\n    UVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes, std_ac_chrominance_values);\n  }\n\n  function initCategoryNumber() {\n    var nrlower = 1;\n    var nrupper = 2;\n\n    for (var cat = 1; cat <= 15; cat++) {\n      //Positive numbers\n      for (var nr = nrlower; nr < nrupper; nr++) {\n        category[32767 + nr] = cat;\n        bitcode[32767 + nr] = [];\n        bitcode[32767 + nr][1] = cat;\n        bitcode[32767 + nr][0] = nr;\n      } //Negative numbers\n\n\n      for (var nrneg = -(nrupper - 1); nrneg <= -nrlower; nrneg++) {\n        category[32767 + nrneg] = cat;\n        bitcode[32767 + nrneg] = [];\n        bitcode[32767 + nrneg][1] = cat;\n        bitcode[32767 + nrneg][0] = nrupper - 1 + nrneg;\n      }\n\n      nrlower <<= 1;\n      nrupper <<= 1;\n    }\n  }\n\n  function initRGBYUVTable() {\n    for (var i = 0; i < 256; i++) {\n      RGB_YUV_TABLE[i] = 19595 * i;\n      RGB_YUV_TABLE[i + 256 >> 0] = 38470 * i;\n      RGB_YUV_TABLE[i + 512 >> 0] = 7471 * i + 0x8000;\n      RGB_YUV_TABLE[i + 768 >> 0] = -11059 * i;\n      RGB_YUV_TABLE[i + 1024 >> 0] = -21709 * i;\n      RGB_YUV_TABLE[i + 1280 >> 0] = 32768 * i + 0x807FFF;\n      RGB_YUV_TABLE[i + 1536 >> 0] = -27439 * i;\n      RGB_YUV_TABLE[i + 1792 >> 0] = -5329 * i;\n    }\n  } // IO functions\n\n\n  function writeBits(bs) {\n    var value = bs[0];\n    var posval = bs[1] - 1;\n\n    while (posval >= 0) {\n      if (value & 1 << posval) {\n        bytenew |= 1 << bytepos;\n      }\n\n      posval--;\n      bytepos--;\n\n      if (bytepos < 0) {\n        if (bytenew == 0xFF) {\n          writeByte(0xFF);\n          writeByte(0);\n        } else {\n          writeByte(bytenew);\n        }\n\n        bytepos = 7;\n        bytenew = 0;\n      }\n    }\n  }\n\n  function writeByte(value) {\n    //byteout.push(clt[value]); // write char directly instead of converting later\n    byteout.push(value);\n  }\n\n  function writeWord(value) {\n    writeByte(value >> 8 & 0xFF);\n    writeByte(value & 0xFF);\n  } // DCT & quantization core\n\n\n  function fDCTQuant(data, fdtbl) {\n    var d0, d1, d2, d3, d4, d5, d6, d7;\n    /* Pass 1: process rows. */\n\n    var dataOff = 0;\n    var i;\n    var I8 = 8;\n    var I64 = 64;\n\n    for (i = 0; i < I8; ++i) {\n      d0 = data[dataOff];\n      d1 = data[dataOff + 1];\n      d2 = data[dataOff + 2];\n      d3 = data[dataOff + 3];\n      d4 = data[dataOff + 4];\n      d5 = data[dataOff + 5];\n      d6 = data[dataOff + 6];\n      d7 = data[dataOff + 7];\n      var tmp0 = d0 + d7;\n      var tmp7 = d0 - d7;\n      var tmp1 = d1 + d6;\n      var tmp6 = d1 - d6;\n      var tmp2 = d2 + d5;\n      var tmp5 = d2 - d5;\n      var tmp3 = d3 + d4;\n      var tmp4 = d3 - d4;\n      /* Even part */\n\n      var tmp10 = tmp0 + tmp3;\n      /* phase 2 */\n\n      var tmp13 = tmp0 - tmp3;\n      var tmp11 = tmp1 + tmp2;\n      var tmp12 = tmp1 - tmp2;\n      data[dataOff] = tmp10 + tmp11;\n      /* phase 3 */\n\n      data[dataOff + 4] = tmp10 - tmp11;\n      var z1 = (tmp12 + tmp13) * 0.707106781;\n      /* c4 */\n\n      data[dataOff + 2] = tmp13 + z1;\n      /* phase 5 */\n\n      data[dataOff + 6] = tmp13 - z1;\n      /* Odd part */\n\n      tmp10 = tmp4 + tmp5;\n      /* phase 2 */\n\n      tmp11 = tmp5 + tmp6;\n      tmp12 = tmp6 + tmp7;\n      /* The rotator is modified from fig 4-8 to avoid extra negations. */\n\n      var z5 = (tmp10 - tmp12) * 0.382683433;\n      /* c6 */\n\n      var z2 = 0.541196100 * tmp10 + z5;\n      /* c2-c6 */\n\n      var z4 = 1.306562965 * tmp12 + z5;\n      /* c2+c6 */\n\n      var z3 = tmp11 * 0.707106781;\n      /* c4 */\n\n      var z11 = tmp7 + z3;\n      /* phase 5 */\n\n      var z13 = tmp7 - z3;\n      data[dataOff + 5] = z13 + z2;\n      /* phase 6 */\n\n      data[dataOff + 3] = z13 - z2;\n      data[dataOff + 1] = z11 + z4;\n      data[dataOff + 7] = z11 - z4;\n      dataOff += 8;\n      /* advance pointer to next row */\n    }\n    /* Pass 2: process columns. */\n\n\n    dataOff = 0;\n\n    for (i = 0; i < I8; ++i) {\n      d0 = data[dataOff];\n      d1 = data[dataOff + 8];\n      d2 = data[dataOff + 16];\n      d3 = data[dataOff + 24];\n      d4 = data[dataOff + 32];\n      d5 = data[dataOff + 40];\n      d6 = data[dataOff + 48];\n      d7 = data[dataOff + 56];\n      var tmp0p2 = d0 + d7;\n      var tmp7p2 = d0 - d7;\n      var tmp1p2 = d1 + d6;\n      var tmp6p2 = d1 - d6;\n      var tmp2p2 = d2 + d5;\n      var tmp5p2 = d2 - d5;\n      var tmp3p2 = d3 + d4;\n      var tmp4p2 = d3 - d4;\n      /* Even part */\n\n      var tmp10p2 = tmp0p2 + tmp3p2;\n      /* phase 2 */\n\n      var tmp13p2 = tmp0p2 - tmp3p2;\n      var tmp11p2 = tmp1p2 + tmp2p2;\n      var tmp12p2 = tmp1p2 - tmp2p2;\n      data[dataOff] = tmp10p2 + tmp11p2;\n      /* phase 3 */\n\n      data[dataOff + 32] = tmp10p2 - tmp11p2;\n      var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781;\n      /* c4 */\n\n      data[dataOff + 16] = tmp13p2 + z1p2;\n      /* phase 5 */\n\n      data[dataOff + 48] = tmp13p2 - z1p2;\n      /* Odd part */\n\n      tmp10p2 = tmp4p2 + tmp5p2;\n      /* phase 2 */\n\n      tmp11p2 = tmp5p2 + tmp6p2;\n      tmp12p2 = tmp6p2 + tmp7p2;\n      /* The rotator is modified from fig 4-8 to avoid extra negations. */\n\n      var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433;\n      /* c6 */\n\n      var z2p2 = 0.541196100 * tmp10p2 + z5p2;\n      /* c2-c6 */\n\n      var z4p2 = 1.306562965 * tmp12p2 + z5p2;\n      /* c2+c6 */\n\n      var z3p2 = tmp11p2 * 0.707106781;\n      /* c4 */\n\n      var z11p2 = tmp7p2 + z3p2;\n      /* phase 5 */\n\n      var z13p2 = tmp7p2 - z3p2;\n      data[dataOff + 40] = z13p2 + z2p2;\n      /* phase 6 */\n\n      data[dataOff + 24] = z13p2 - z2p2;\n      data[dataOff + 8] = z11p2 + z4p2;\n      data[dataOff + 56] = z11p2 - z4p2;\n      dataOff++;\n      /* advance pointer to next column */\n    } // Quantize/descale the coefficients\n\n\n    var fDCTQuant;\n\n    for (i = 0; i < I64; ++i) {\n      // Apply the quantization and scaling factor & Round to nearest integer\n      fDCTQuant = data[i] * fdtbl[i];\n      outputfDCTQuant[i] = fDCTQuant > 0.0 ? fDCTQuant + 0.5 | 0 : fDCTQuant - 0.5 | 0; //outputfDCTQuant[i] = fround(fDCTQuant);\n    }\n\n    return outputfDCTQuant;\n  }\n\n  function writeAPP0() {\n    writeWord(0xFFE0); // marker\n\n    writeWord(16); // length\n\n    writeByte(0x4A); // J\n\n    writeByte(0x46); // F\n\n    writeByte(0x49); // I\n\n    writeByte(0x46); // F\n\n    writeByte(0); // = \"JFIF\",'\\0'\n\n    writeByte(1); // versionhi\n\n    writeByte(1); // versionlo\n\n    writeByte(0); // xyunits\n\n    writeWord(1); // xdensity\n\n    writeWord(1); // ydensity\n\n    writeByte(0); // thumbnwidth\n\n    writeByte(0); // thumbnheight\n  }\n\n  function writeSOF0(width, height) {\n    writeWord(0xFFC0); // marker\n\n    writeWord(17); // length, truecolor YUV JPG\n\n    writeByte(8); // precision\n\n    writeWord(height);\n    writeWord(width);\n    writeByte(3); // nrofcomponents\n\n    writeByte(1); // IdY\n\n    writeByte(0x11); // HVY\n\n    writeByte(0); // QTY\n\n    writeByte(2); // IdU\n\n    writeByte(0x11); // HVU\n\n    writeByte(1); // QTU\n\n    writeByte(3); // IdV\n\n    writeByte(0x11); // HVV\n\n    writeByte(1); // QTV\n  }\n\n  function writeDQT() {\n    writeWord(0xFFDB); // marker\n\n    writeWord(132); // length\n\n    writeByte(0);\n\n    for (var i = 0; i < 64; i++) {\n      writeByte(YTable[i]);\n    }\n\n    writeByte(1);\n\n    for (var j = 0; j < 64; j++) {\n      writeByte(UVTable[j]);\n    }\n  }\n\n  function writeDHT() {\n    writeWord(0xFFC4); // marker\n\n    writeWord(0x01A2); // length\n\n    writeByte(0); // HTYDCinfo\n\n    for (var i = 0; i < 16; i++) {\n      writeByte(std_dc_luminance_nrcodes[i + 1]);\n    }\n\n    for (var j = 0; j <= 11; j++) {\n      writeByte(std_dc_luminance_values[j]);\n    }\n\n    writeByte(0x10); // HTYACinfo\n\n    for (var k = 0; k < 16; k++) {\n      writeByte(std_ac_luminance_nrcodes[k + 1]);\n    }\n\n    for (var l = 0; l <= 161; l++) {\n      writeByte(std_ac_luminance_values[l]);\n    }\n\n    writeByte(1); // HTUDCinfo\n\n    for (var m = 0; m < 16; m++) {\n      writeByte(std_dc_chrominance_nrcodes[m + 1]);\n    }\n\n    for (var n = 0; n <= 11; n++) {\n      writeByte(std_dc_chrominance_values[n]);\n    }\n\n    writeByte(0x11); // HTUACinfo\n\n    for (var o = 0; o < 16; o++) {\n      writeByte(std_ac_chrominance_nrcodes[o + 1]);\n    }\n\n    for (var p = 0; p <= 161; p++) {\n      writeByte(std_ac_chrominance_values[p]);\n    }\n  }\n\n  function writeSOS() {\n    writeWord(0xFFDA); // marker\n\n    writeWord(12); // length\n\n    writeByte(3); // nrofcomponents\n\n    writeByte(1); // IdY\n\n    writeByte(0); // HTY\n\n    writeByte(2); // IdU\n\n    writeByte(0x11); // HTU\n\n    writeByte(3); // IdV\n\n    writeByte(0x11); // HTV\n\n    writeByte(0); // Ss\n\n    writeByte(0x3f); // Se\n\n    writeByte(0); // Bf\n  }\n\n  function processDU(CDU, fdtbl, DC, HTDC, HTAC) {\n    var EOB = HTAC[0x00];\n    var M16zeroes = HTAC[0xF0];\n    var pos;\n    var I16 = 16;\n    var I63 = 63;\n    var I64 = 64;\n    var DU_DCT = fDCTQuant(CDU, fdtbl); //ZigZag reorder\n\n    for (var j = 0; j < I64; ++j) {\n      DU[ZigZag[j]] = DU_DCT[j];\n    }\n\n    var Diff = DU[0] - DC;\n    DC = DU[0]; //Encode DC\n\n    if (Diff == 0) {\n      writeBits(HTDC[0]); // Diff might be 0\n    } else {\n      pos = 32767 + Diff;\n      writeBits(HTDC[category[pos]]);\n      writeBits(bitcode[pos]);\n    } //Encode ACs\n\n\n    var end0pos = 63; // was const... which is crazy\n\n    for (; end0pos > 0 && DU[end0pos] == 0; end0pos--) {}\n\n    if (end0pos == 0) {\n      writeBits(EOB);\n      return DC;\n    }\n\n    var i = 1;\n    var lng;\n\n    while (i <= end0pos) {\n      var startpos = i;\n\n      for (; DU[i] == 0 && i <= end0pos; ++i) {}\n\n      var nrzeroes = i - startpos;\n\n      if (nrzeroes >= I16) {\n        lng = nrzeroes >> 4;\n\n        for (var nrmarker = 1; nrmarker <= lng; ++nrmarker) {\n          writeBits(M16zeroes);\n        }\n\n        nrzeroes = nrzeroes & 0xF;\n      }\n\n      pos = 32767 + DU[i];\n      writeBits(HTAC[(nrzeroes << 4) + category[pos]]);\n      writeBits(bitcode[pos]);\n      i++;\n    }\n\n    if (end0pos != I63) {\n      writeBits(EOB);\n    }\n\n    return DC;\n  }\n\n  function initCharLookupTable() {\n    var sfcc = String.fromCharCode;\n\n    for (var i = 0; i < 256; i++) {\n      ///// ACHTUNG // 255\n      clt[i] = sfcc(i);\n    }\n  }\n\n  this.encode = function (image, quality) // image data object\n  {\n    var time_start = new Date().getTime();\n    if (quality) setQuality(quality); // Initialize bit writer\n\n    byteout = new Array();\n    bytenew = 0;\n    bytepos = 7; // Add JPEG headers\n\n    writeWord(0xFFD8); // SOI\n\n    writeAPP0();\n    writeDQT();\n    writeSOF0(image.width, image.height);\n    writeDHT();\n    writeSOS(); // Encode 8x8 macroblocks\n\n    var DCY = 0;\n    var DCU = 0;\n    var DCV = 0;\n    bytenew = 0;\n    bytepos = 7;\n    this.encode.displayName = \"_encode_\";\n    var imageData = image.data;\n    var width = image.width;\n    var height = image.height;\n    var quadWidth = width * 4;\n    var x,\n        y = 0;\n    var r, g, b;\n    var start, p, col, row, pos;\n\n    while (y < height) {\n      x = 0;\n\n      while (x < quadWidth) {\n        start = quadWidth * y + x;\n        p = start;\n        col = -1;\n        row = 0;\n\n        for (pos = 0; pos < 64; pos++) {\n          row = pos >> 3; // /8\n\n          col = (pos & 7) * 4; // %8\n\n          p = start + row * quadWidth + col;\n\n          if (y + row >= height) {\n            // padding bottom\n            p -= quadWidth * (y + 1 + row - height);\n          }\n\n          if (x + col >= quadWidth) {\n            // padding right\t\n            p -= x + col - quadWidth + 4;\n          }\n\n          r = imageData[p++];\n          g = imageData[p++];\n          b = imageData[p++];\n          /* // calculate YUV values dynamically\n          YDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80\n          UDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));\n          VDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));\n          */\n          // use lookup table (slightly faster)\n\n          YDU[pos] = (RGB_YUV_TABLE[r] + RGB_YUV_TABLE[g + 256 >> 0] + RGB_YUV_TABLE[b + 512 >> 0] >> 16) - 128;\n          UDU[pos] = (RGB_YUV_TABLE[r + 768 >> 0] + RGB_YUV_TABLE[g + 1024 >> 0] + RGB_YUV_TABLE[b + 1280 >> 0] >> 16) - 128;\n          VDU[pos] = (RGB_YUV_TABLE[r + 1280 >> 0] + RGB_YUV_TABLE[g + 1536 >> 0] + RGB_YUV_TABLE[b + 1792 >> 0] >> 16) - 128;\n        }\n\n        DCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);\n        DCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);\n        DCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);\n        x += 32;\n      }\n\n      y += 8;\n    } ////////////////////////////////////////////////////////////////\n    // Do the bit alignment of the EOI marker\n\n\n    if (bytepos >= 0) {\n      var fillbits = [];\n      fillbits[1] = bytepos + 1;\n      fillbits[0] = (1 << bytepos + 1) - 1;\n      writeBits(fillbits);\n    }\n\n    writeWord(0xFFD9); //EOI\n\n    return new Uint8Array(byteout);\n  };\n\n  function setQuality(quality) {\n    if (quality <= 0) {\n      quality = 1;\n    }\n\n    if (quality > 100) {\n      quality = 100;\n    }\n\n    if (currentQuality == quality) return; // don't recalc if unchanged\n\n    var sf = 0;\n\n    if (quality < 50) {\n      sf = Math.floor(5000 / quality);\n    } else {\n      sf = Math.floor(200 - quality * 2);\n    }\n\n    initQuantTables(sf);\n    currentQuality = quality; //console.log('Quality set to: '+quality +'%');\n  }\n\n  function init() {\n    var time_start = new Date().getTime();\n    if (!quality) quality = 50; // Create tables\n\n    initCharLookupTable();\n    initHuffmanTbl();\n    initCategoryNumber();\n    initRGBYUVTable();\n    setQuality(quality);\n    var duration = new Date().getTime() - time_start; //console.log('Initialization '+ duration + 'ms');\n  }\n\n  init();\n}\n/*rollup-keeper-start*/\n\nwindow.tmp = JPEGEncoder;\n/*rollup-keeper-end*/\n\n/**\n * @author shaozilee\n *\n * Bmp format decoder,support 1bit 4bit 8bit 24bit bmp\n *\n */\nfunction BmpDecoder(buffer, is_with_alpha) {\n  this.pos = 0;\n  this.buffer = buffer;\n  this.datav = new DataView(buffer.buffer);\n  this.is_with_alpha = !!is_with_alpha;\n  this.bottom_up = true;\n  this.flag = String.fromCharCode(this.buffer[0]) + String.fromCharCode(this.buffer[1]);\n  this.pos += 2;\n  if ([\"BM\", \"BA\", \"CI\", \"CP\", \"IC\", \"PT\"].indexOf(this.flag) === -1) throw new Error(\"Invalid BMP File\");\n  this.parseHeader();\n  this.parseBGR();\n}\n\nBmpDecoder.prototype.parseHeader = function () {\n  this.fileSize = this.datav.getUint32(this.pos, true);\n  this.pos += 4;\n  this.reserved = this.datav.getUint32(this.pos, true);\n  this.pos += 4;\n  this.offset = this.datav.getUint32(this.pos, true);\n  this.pos += 4;\n  this.headerSize = this.datav.getUint32(this.pos, true);\n  this.pos += 4;\n  this.width = this.datav.getUint32(this.pos, true);\n  this.pos += 4;\n  this.height = this.datav.getInt32(this.pos, true);\n  this.pos += 4;\n  this.planes = this.datav.getUint16(this.pos, true);\n  this.pos += 2;\n  this.bitPP = this.datav.getUint16(this.pos, true);\n  this.pos += 2;\n  this.compress = this.datav.getUint32(this.pos, true);\n  this.pos += 4;\n  this.rawSize = this.datav.getUint32(this.pos, true);\n  this.pos += 4;\n  this.hr = this.datav.getUint32(this.pos, true);\n  this.pos += 4;\n  this.vr = this.datav.getUint32(this.pos, true);\n  this.pos += 4;\n  this.colors = this.datav.getUint32(this.pos, true);\n  this.pos += 4;\n  this.importantColors = this.datav.getUint32(this.pos, true);\n  this.pos += 4;\n\n  if (this.bitPP === 16 && this.is_with_alpha) {\n    this.bitPP = 15;\n  }\n\n  if (this.bitPP < 15) {\n    var len = this.colors === 0 ? 1 << this.bitPP : this.colors;\n    this.palette = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var blue = this.datav.getUint8(this.pos++, true);\n      var green = this.datav.getUint8(this.pos++, true);\n      var red = this.datav.getUint8(this.pos++, true);\n      var quad = this.datav.getUint8(this.pos++, true);\n      this.palette[i] = {\n        red: red,\n        green: green,\n        blue: blue,\n        quad: quad\n      };\n    }\n  }\n\n  if (this.height < 0) {\n    this.height *= -1;\n    this.bottom_up = false;\n  }\n};\n\nBmpDecoder.prototype.parseBGR = function () {\n  this.pos = this.offset;\n\n  try {\n    var bitn = \"bit\" + this.bitPP;\n    var len = this.width * this.height * 4;\n    this.data = new Uint8Array(len);\n    this[bitn]();\n  } catch (e) {\n    console.log(\"bit decode error:\" + e);\n  }\n};\n\nBmpDecoder.prototype.bit1 = function () {\n  var xlen = Math.ceil(this.width / 8);\n  var mode = xlen % 4;\n  var y = this.height >= 0 ? this.height - 1 : -this.height;\n\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n\n    for (var x = 0; x < xlen; x++) {\n      var b = this.datav.getUint8(this.pos++, true);\n      var location = line * this.width * 4 + x * 8 * 4;\n\n      for (var i = 0; i < 8; i++) {\n        if (x * 8 + i < this.width) {\n          var rgb = this.palette[b >> 7 - i & 0x1];\n          this.data[location + i * 4] = rgb.blue;\n          this.data[location + i * 4 + 1] = rgb.green;\n          this.data[location + i * 4 + 2] = rgb.red;\n          this.data[location + i * 4 + 3] = 0xFF;\n        } else {\n          break;\n        }\n      }\n    }\n\n    if (mode != 0) {\n      this.pos += 4 - mode;\n    }\n  }\n};\n\nBmpDecoder.prototype.bit4 = function () {\n  var xlen = Math.ceil(this.width / 2);\n  var mode = xlen % 4;\n\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n\n    for (var x = 0; x < xlen; x++) {\n      var b = this.datav.getUint8(this.pos++, true);\n      var location = line * this.width * 4 + x * 2 * 4;\n      var before = b >> 4;\n      var after = b & 0x0F;\n      var rgb = this.palette[before];\n      this.data[location] = rgb.blue;\n      this.data[location + 1] = rgb.green;\n      this.data[location + 2] = rgb.red;\n      this.data[location + 3] = 0xFF;\n      if (x * 2 + 1 >= this.width) break;\n      rgb = this.palette[after];\n      this.data[location + 4] = rgb.blue;\n      this.data[location + 4 + 1] = rgb.green;\n      this.data[location + 4 + 2] = rgb.red;\n      this.data[location + 4 + 3] = 0xFF;\n    }\n\n    if (mode != 0) {\n      this.pos += 4 - mode;\n    }\n  }\n};\n\nBmpDecoder.prototype.bit8 = function () {\n  var mode = this.width % 4;\n\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n\n    for (var x = 0; x < this.width; x++) {\n      var b = this.datav.getUint8(this.pos++, true);\n      var location = line * this.width * 4 + x * 4;\n\n      if (b < this.palette.length) {\n        var rgb = this.palette[b];\n        this.data[location] = rgb.red;\n        this.data[location + 1] = rgb.green;\n        this.data[location + 2] = rgb.blue;\n        this.data[location + 3] = 0xFF;\n      } else {\n        this.data[location] = 0xFF;\n        this.data[location + 1] = 0xFF;\n        this.data[location + 2] = 0xFF;\n        this.data[location + 3] = 0xFF;\n      }\n    }\n\n    if (mode != 0) {\n      this.pos += 4 - mode;\n    }\n  }\n};\n\nBmpDecoder.prototype.bit15 = function () {\n  var dif_w = this.width % 3;\n\n  var _11111 = parseInt(\"11111\", 2),\n      _1_5 = _11111;\n\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n\n    for (var x = 0; x < this.width; x++) {\n      var B = this.datav.getUint16(this.pos, true);\n      this.pos += 2;\n      var blue = (B & _1_5) / _1_5 * 255 | 0;\n      var green = (B >> 5 & _1_5) / _1_5 * 255 | 0;\n      var red = (B >> 10 & _1_5) / _1_5 * 255 | 0;\n      var alpha = B >> 15 ? 0xFF : 0x00;\n      var location = line * this.width * 4 + x * 4;\n      this.data[location] = red;\n      this.data[location + 1] = green;\n      this.data[location + 2] = blue;\n      this.data[location + 3] = alpha;\n    } //skip extra bytes\n\n\n    this.pos += dif_w;\n  }\n};\n\nBmpDecoder.prototype.bit16 = function () {\n  var dif_w = this.width % 3;\n\n  var _11111 = parseInt(\"11111\", 2),\n      _1_5 = _11111;\n\n  var _111111 = parseInt(\"111111\", 2),\n      _1_6 = _111111;\n\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n\n    for (var x = 0; x < this.width; x++) {\n      var B = this.datav.getUint16(this.pos, true);\n      this.pos += 2;\n      var alpha = 0xFF;\n      var blue = (B & _1_5) / _1_5 * 255 | 0;\n      var green = (B >> 5 & _1_6) / _1_6 * 255 | 0;\n      var red = (B >> 11) / _1_5 * 255 | 0;\n      var location = line * this.width * 4 + x * 4;\n      this.data[location] = red;\n      this.data[location + 1] = green;\n      this.data[location + 2] = blue;\n      this.data[location + 3] = alpha;\n    } //skip extra bytes\n\n\n    this.pos += dif_w;\n  }\n};\n\nBmpDecoder.prototype.bit24 = function () {\n  //when height > 0\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n\n    for (var x = 0; x < this.width; x++) {\n      var blue = this.datav.getUint8(this.pos++, true);\n      var green = this.datav.getUint8(this.pos++, true);\n      var red = this.datav.getUint8(this.pos++, true);\n      var location = line * this.width * 4 + x * 4;\n      this.data[location] = red;\n      this.data[location + 1] = green;\n      this.data[location + 2] = blue;\n      this.data[location + 3] = 0xFF;\n    } //skip extra bytes\n\n\n    this.pos += this.width % 4;\n  }\n};\n/**\n * add 32bit decode func\n * @author soubok\n */\n\n\nBmpDecoder.prototype.bit32 = function () {\n  //when height > 0\n  for (var y = this.height - 1; y >= 0; y--) {\n    var line = this.bottom_up ? y : this.height - 1 - y;\n\n    for (var x = 0; x < this.width; x++) {\n      var blue = this.datav.getUint8(this.pos++, true);\n      var green = this.datav.getUint8(this.pos++, true);\n      var red = this.datav.getUint8(this.pos++, true);\n      var alpha = this.datav.getUint8(this.pos++, true);\n      var location = line * this.width * 4 + x * 4;\n      this.data[location] = red;\n      this.data[location + 1] = green;\n      this.data[location + 2] = blue;\n      this.data[location + 3] = alpha;\n    } //skip extra bytes\n    //this.pos += (this.width % 4);\n\n  }\n};\n\nBmpDecoder.prototype.getData = function () {\n  return this.data;\n};\n/*rollup-keeper-start*/\n\n\nwindow.tmp = BmpDecoder;\n/*rollup-keeper-end*/\n\n/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n(function (global) {\n\n  var MAX_BITS = 15;\n  var D_CODES = 30;\n  var BL_CODES = 19;\n  var LENGTH_CODES = 29;\n  var LITERALS = 256;\n  var L_CODES = LITERALS + 1 + LENGTH_CODES;\n  var HEAP_SIZE = 2 * L_CODES + 1;\n  var END_BLOCK = 256; // Bit length codes must not exceed MAX_BL_BITS bits\n\n  var MAX_BL_BITS = 7; // repeat previous bit length 3-6 times (2 bits of repeat count)\n\n  var REP_3_6 = 16; // repeat a zero length 3-10 times (3 bits of repeat count)\n\n  var REPZ_3_10 = 17; // repeat a zero length 11-138 times (7 bits of repeat count)\n\n  var REPZ_11_138 = 18; // The lengths of the bit length codes are sent in order of decreasing\n  // probability, to avoid transmitting the lengths for unused bit\n  // length codes.\n\n  var Buf_size = 8 * 2; // JZlib version : \"1.0.2\"\n\n  var Z_DEFAULT_COMPRESSION = -1; // compression strategy\n\n  var Z_FILTERED = 1;\n  var Z_HUFFMAN_ONLY = 2;\n  var Z_DEFAULT_STRATEGY = 0;\n  var Z_NO_FLUSH = 0;\n  var Z_PARTIAL_FLUSH = 1;\n  var Z_FULL_FLUSH = 3;\n  var Z_FINISH = 4;\n  var Z_OK = 0;\n  var Z_STREAM_END = 1;\n  var Z_NEED_DICT = 2;\n  var Z_STREAM_ERROR = -2;\n  var Z_DATA_ERROR = -3;\n  var Z_BUF_ERROR = -5; // Tree\n  // see definition of array dist_code below\n\n  var _dist_code = [0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29];\n\n  function Tree() {\n    var that = this; // dyn_tree; // the dynamic tree\n    // max_code; // largest code with non zero frequency\n    // stat_desc; // the corresponding static tree\n    // Compute the optimal bit lengths for a tree and update the total bit\n    // length\n    // for the current block.\n    // IN assertion: the fields freq and dad are set, heap[heap_max] and\n    // above are the tree nodes sorted by increasing frequency.\n    // OUT assertions: the field len is set to the optimal bit length, the\n    // array bl_count contains the frequencies for each bit length.\n    // The length opt_len is updated; static_len is also updated if stree is\n    // not null.\n\n    function gen_bitlen(s) {\n      var tree = that.dyn_tree;\n      var stree = that.stat_desc.static_tree;\n      var extra = that.stat_desc.extra_bits;\n      var base = that.stat_desc.extra_base;\n      var max_length = that.stat_desc.max_length;\n      var h; // heap index\n\n      var n, m; // iterate over the tree elements\n\n      var bits; // bit length\n\n      var xbits; // extra bits\n\n      var f; // frequency\n\n      var overflow = 0; // number of elements with bit length too large\n\n      for (bits = 0; bits <= MAX_BITS; bits++) {\n        s.bl_count[bits] = 0;\n      } // In a first pass, compute the optimal bit lengths (which may\n      // overflow in the case of the bit length tree).\n\n\n      tree[s.heap[s.heap_max] * 2 + 1] = 0; // root of the heap\n\n      for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n        n = s.heap[h];\n        bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\n\n        if (bits > max_length) {\n          bits = max_length;\n          overflow++;\n        }\n\n        tree[n * 2 + 1] = bits; // We overwrite tree[n*2+1] which is no longer needed\n\n        if (n > that.max_code) continue; // not a leaf node\n\n        s.bl_count[bits]++;\n        xbits = 0;\n        if (n >= base) xbits = extra[n - base];\n        f = tree[n * 2];\n        s.opt_len += f * (bits + xbits);\n        if (stree) s.static_len += f * (stree[n * 2 + 1] + xbits);\n      }\n\n      if (overflow === 0) return; // This happens for example on obj2 and pic of the Calgary corpus\n      // Find the first bit length which could increase:\n\n      do {\n        bits = max_length - 1;\n\n        while (s.bl_count[bits] === 0) {\n          bits--;\n        }\n\n        s.bl_count[bits]--; // move one leaf down the tree\n\n        s.bl_count[bits + 1] += 2; // move one overflow item as its brother\n\n        s.bl_count[max_length]--; // The brother of the overflow item also moves one step up,\n        // but this does not affect bl_count[max_length]\n\n        overflow -= 2;\n      } while (overflow > 0);\n\n      for (bits = max_length; bits !== 0; bits--) {\n        n = s.bl_count[bits];\n\n        while (n !== 0) {\n          m = s.heap[--h];\n          if (m > that.max_code) continue;\n\n          if (tree[m * 2 + 1] != bits) {\n            s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];\n            tree[m * 2 + 1] = bits;\n          }\n\n          n--;\n        }\n      }\n    } // Reverse the first len bits of a code, using straightforward code (a\n    // faster\n    // method would use a table)\n    // IN assertion: 1 <= len <= 15\n\n\n    function bi_reverse(code, // the value to invert\n    len // its bit length\n    ) {\n      var res = 0;\n\n      do {\n        res |= code & 1;\n        code >>>= 1;\n        res <<= 1;\n      } while (--len > 0);\n\n      return res >>> 1;\n    } // Generate the codes for a given tree and bit counts (which need not be\n    // optimal).\n    // IN assertion: the array bl_count contains the bit length statistics for\n    // the given tree and the field len is set for all tree elements.\n    // OUT assertion: the field code is set for all tree elements of non\n    // zero code length.\n\n\n    function gen_codes(tree, // the tree to decorate\n    max_code, // largest code with non zero frequency\n    bl_count // number of codes at each bit length\n    ) {\n      var next_code = []; // next code value for each\n      // bit length\n\n      var code = 0; // running code value\n\n      var bits; // bit index\n\n      var n; // code index\n\n      var len; // The distribution counts are first used to generate the code values\n      // without bit reversal.\n\n      for (bits = 1; bits <= MAX_BITS; bits++) {\n        next_code[bits] = code = code + bl_count[bits - 1] << 1;\n      } // Check that the bit counts in bl_count are consistent. The last code\n      // must be all ones.\n      // Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n      // \"inconsistent bit counts\");\n      // Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n\n      for (n = 0; n <= max_code; n++) {\n        len = tree[n * 2 + 1];\n        if (len === 0) continue; // Now reverse the bits\n\n        tree[n * 2] = bi_reverse(next_code[len]++, len);\n      }\n    } // Construct one Huffman tree and assigns the code bit strings and lengths.\n    // Update the total bit length for the current block.\n    // IN assertion: the field freq is set for all tree elements.\n    // OUT assertions: the fields len and code are set to the optimal bit length\n    // and corresponding code. The length opt_len is updated; static_len is\n    // also updated if stree is not null. The field max_code is set.\n\n\n    that.build_tree = function (s) {\n      var tree = that.dyn_tree;\n      var stree = that.stat_desc.static_tree;\n      var elems = that.stat_desc.elems;\n      var n, m; // iterate over heap elements\n\n      var max_code = -1; // largest code with non zero frequency\n\n      var node; // new node being created\n      // Construct the initial heap, with least frequent element in\n      // heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n      // heap[0] is not used.\n\n      s.heap_len = 0;\n      s.heap_max = HEAP_SIZE;\n\n      for (n = 0; n < elems; n++) {\n        if (tree[n * 2] !== 0) {\n          s.heap[++s.heap_len] = max_code = n;\n          s.depth[n] = 0;\n        } else {\n          tree[n * 2 + 1] = 0;\n        }\n      } // The pkzip format requires that at least one distance code exists,\n      // and that at least one bit should be sent even if there is only one\n      // possible code. So to avoid special checks later on we force at least\n      // two codes of non zero frequency.\n\n\n      while (s.heap_len < 2) {\n        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\n        tree[node * 2] = 1;\n        s.depth[node] = 0;\n        s.opt_len--;\n        if (stree) s.static_len -= stree[node * 2 + 1]; // node is 0 or 1 so it does not have extra bits\n      }\n\n      that.max_code = max_code; // The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n      // establish sub-heaps of increasing lengths:\n\n      for (n = Math.floor(s.heap_len / 2); n >= 1; n--) {\n        s.pqdownheap(tree, n);\n      } // Construct the Huffman tree by repeatedly combining the least two\n      // frequent nodes.\n\n\n      node = elems; // next internal node of the tree\n\n      do {\n        // n = node of least frequency\n        n = s.heap[1];\n        s.heap[1] = s.heap[s.heap_len--];\n        s.pqdownheap(tree, 1);\n        m = s.heap[1]; // m = node of next least frequency\n\n        s.heap[--s.heap_max] = n; // keep the nodes sorted by frequency\n\n        s.heap[--s.heap_max] = m; // Create a new node father of n and m\n\n        tree[node * 2] = tree[n * 2] + tree[m * 2];\n        s.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;\n        tree[n * 2 + 1] = tree[m * 2 + 1] = node; // and insert the new node in the heap\n\n        s.heap[1] = node++;\n        s.pqdownheap(tree, 1);\n      } while (s.heap_len >= 2);\n\n      s.heap[--s.heap_max] = s.heap[1]; // At this point, the fields freq and dad are set. We can now\n      // generate the bit lengths.\n\n      gen_bitlen(s); // The field len is now set, we can generate the bit codes\n\n      gen_codes(tree, that.max_code, s.bl_count);\n    };\n  }\n\n  Tree._length_code = [0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28];\n  Tree.base_length = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0];\n  Tree.base_dist = [0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384, 24576]; // Mapping from a distance to a distance code. dist is the distance - 1 and\n  // must not have side effects. _dist_code[256] and _dist_code[257] are never\n  // used.\n\n  Tree.d_code = function (dist) {\n    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n  }; // extra bits for each length code\n\n\n  Tree.extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]; // extra bits for each distance code\n\n  Tree.extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]; // extra bits for each bit length code\n\n  Tree.extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];\n  Tree.bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]; // StaticTree\n\n  function StaticTree(static_tree, extra_bits, extra_base, elems, max_length) {\n    var that = this;\n    that.static_tree = static_tree;\n    that.extra_bits = extra_bits;\n    that.extra_base = extra_base;\n    that.elems = elems;\n    that.max_length = max_length;\n  }\n\n  StaticTree.static_ltree = [12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8, 130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42, 8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8, 22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8, 222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113, 8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8, 69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8, 173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9, 51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9, 427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379, 9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23, 9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9, 399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9, 223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7, 40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8, 99, 8, 227, 8];\n  StaticTree.static_dtree = [0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5, 25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5];\n  StaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  StaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, MAX_BITS);\n  StaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS); // Deflate\n\n  var MAX_MEM_LEVEL = 9;\n  var DEF_MEM_LEVEL = 8;\n\n  function Config(good_length, max_lazy, nice_length, max_chain, func) {\n    var that = this;\n    that.good_length = good_length;\n    that.max_lazy = max_lazy;\n    that.nice_length = nice_length;\n    that.max_chain = max_chain;\n    that.func = func;\n  }\n\n  var STORED = 0;\n  var FAST = 1;\n  var SLOW = 2;\n  var config_table = [new Config(0, 0, 0, 0, STORED), new Config(4, 4, 8, 4, FAST), new Config(4, 5, 16, 8, FAST), new Config(4, 6, 32, 32, FAST), new Config(4, 4, 16, 16, SLOW), new Config(8, 16, 32, 32, SLOW), new Config(8, 16, 128, 128, SLOW), new Config(8, 32, 128, 256, SLOW), new Config(32, 128, 258, 1024, SLOW), new Config(32, 258, 258, 4096, SLOW)];\n  var z_errmsg = [\"need dictionary\", // Z_NEED_DICT\n  // 2\n  \"stream end\", // Z_STREAM_END 1\n  \"\", // Z_OK 0\n  \"\", // Z_ERRNO (-1)\n  \"stream error\", // Z_STREAM_ERROR (-2)\n  \"data error\", // Z_DATA_ERROR (-3)\n  \"\", // Z_MEM_ERROR (-4)\n  \"buffer error\", // Z_BUF_ERROR (-5)\n  \"\", // Z_VERSION_ERROR (-6)\n  \"\"]; // block not completed, need more input or more output\n\n  var NeedMore = 0; // block flush performed\n\n  var BlockDone = 1; // finish started, need only more output at next deflate\n\n  var FinishStarted = 2; // finish done, accept no more input or output\n\n  var FinishDone = 3; // preset dictionary flag in zlib header\n\n  var PRESET_DICT = 0x20;\n  var INIT_STATE = 42;\n  var BUSY_STATE = 113;\n  var FINISH_STATE = 666; // The deflate compression method\n\n  var Z_DEFLATED = 8;\n  var STORED_BLOCK = 0;\n  var STATIC_TREES = 1;\n  var DYN_TREES = 2;\n  var MIN_MATCH = 3;\n  var MAX_MATCH = 258;\n  var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;\n\n  function smaller(tree, n, m, depth) {\n    var tn2 = tree[n * 2];\n    var tm2 = tree[m * 2];\n    return tn2 < tm2 || tn2 == tm2 && depth[n] <= depth[m];\n  }\n\n  function Deflate() {\n    var that = this;\n    var strm; // pointer back to this zlib stream\n\n    var status; // as the name implies\n    // pending_buf; // output still pending\n\n    var pending_buf_size; // size of pending_buf\n\n    var last_flush; // value of flush param for previous deflate call\n\n    var w_size; // LZ77 window size (32K by default)\n\n    var w_bits; // log2(w_size) (8..16)\n\n    var w_mask; // w_size - 1\n\n    var window; // Sliding window. Input bytes are read into the second half of the window,\n    // and move to the first half later to keep a dictionary of at least wSize\n    // bytes. With this organization, matches are limited to a distance of\n    // wSize-MAX_MATCH bytes, but this ensures that IO is always\n    // performed with a length multiple of the block size. Also, it limits\n    // the window size to 64K, which is quite useful on MSDOS.\n    // To do: use the user input buffer as sliding window.\n\n    var window_size; // Actual size of window: 2*wSize, except when the user input buffer\n    // is directly used as sliding window.\n\n    var prev; // Link to older string with same hash index. To limit the size of this\n    // array to 64K, this link is maintained only for the last 32K strings.\n    // An index in this array is thus a window index modulo 32K.\n\n    var head; // Heads of the hash chains or NIL.\n\n    var ins_h; // hash index of string to be inserted\n\n    var hash_size; // number of elements in hash table\n\n    var hash_bits; // log2(hash_size)\n\n    var hash_mask; // hash_size-1\n    // Number of bits by which ins_h must be shifted at each input\n    // step. It must be such that after MIN_MATCH steps, the oldest\n    // byte no longer takes part in the hash key, that is:\n    // hash_shift * MIN_MATCH >= hash_bits\n\n    var hash_shift; // Window position at the beginning of the current output block. Gets\n    // negative when the window is moved backwards.\n\n    var block_start;\n    var match_length; // length of best match\n\n    var prev_match; // previous match\n\n    var match_available; // set if previous match exists\n\n    var strstart; // start of string to insert\n\n    var match_start; // start of matching string\n\n    var lookahead; // number of valid bytes ahead in window\n    // Length of the best match at previous step. Matches not greater than this\n    // are discarded. This is used in the lazy match evaluation.\n\n    var prev_length; // To speed up deflation, hash chains are never searched beyond this\n    // length. A higher limit improves compression ratio but degrades the speed.\n\n    var max_chain_length; // Attempt to find a better match only when the current match is strictly\n    // smaller than this value. This mechanism is used only for compression\n    // levels >= 4.\n\n    var max_lazy_match; // Insert new strings in the hash table only if the match length is not\n    // greater than this length. This saves time but degrades compression.\n    // max_insert_length is used only for compression levels <= 3.\n\n    var level; // compression level (1..9)\n\n    var strategy; // favor or force Huffman coding\n    // Use a faster search when the previous match is longer than this\n\n    var good_match; // Stop searching when current match exceeds this\n\n    var nice_match;\n    var dyn_ltree; // literal and length tree\n\n    var dyn_dtree; // distance tree\n\n    var bl_tree; // Huffman tree for bit lengths\n\n    var l_desc = new Tree(); // desc for literal tree\n\n    var d_desc = new Tree(); // desc for distance tree\n\n    var bl_desc = new Tree(); // desc for bit length tree\n    // that.heap_len; // number of elements in the heap\n    // that.heap_max; // element of largest frequency\n    // The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n    // The same heap array is used to build all trees.\n    // Depth of each subtree used as tie breaker for trees of equal frequency\n\n    that.depth = [];\n    var l_buf; // index for literals or lengths */\n    // Size of match buffer for literals/lengths. There are 4 reasons for\n    // limiting lit_bufsize to 64K:\n    // - frequencies can be kept in 16 bit counters\n    // - if compression is not successful for the first block, all input\n    // data is still in the window so we can still emit a stored block even\n    // when input comes from standard input. (This can also be done for\n    // all blocks if lit_bufsize is not greater than 32K.)\n    // - if compression is not successful for a file smaller than 64K, we can\n    // even emit a stored file instead of a stored block (saving 5 bytes).\n    // This is applicable only for zip (not gzip or zlib).\n    // - creating new Huffman trees less frequently may not provide fast\n    // adaptation to changes in the input data statistics. (Take for\n    // example a binary file with poorly compressible code followed by\n    // a highly compressible string table.) Smaller buffer sizes give\n    // fast adaptation but have of course the overhead of transmitting\n    // trees more frequently.\n    // - I can't count above 4\n\n    var lit_bufsize;\n    var last_lit; // running index in l_buf\n    // Buffer for distances. To simplify the code, d_buf and l_buf have\n    // the same number of elements. To use different lengths, an extra flag\n    // array would be necessary.\n\n    var d_buf; // index of pendig_buf\n    // that.opt_len; // bit length of current block with optimal trees\n    // that.static_len; // bit length of current block with static trees\n\n    var matches; // number of string matches in current block\n\n    var last_eob_len; // bit length of EOB code for last block\n    // Output buffer. bits are inserted starting at the bottom (least\n    // significant bits).\n\n    var bi_buf; // Number of valid bits in bi_buf. All bits above the last valid bit\n    // are always zero.\n\n    var bi_valid; // number of codes at each bit length for an optimal tree\n\n    that.bl_count = []; // heap used to build the Huffman trees\n\n    that.heap = [];\n    dyn_ltree = [];\n    dyn_dtree = [];\n    bl_tree = [];\n\n    function lm_init() {\n      var i;\n      window_size = 2 * w_size;\n      head[hash_size - 1] = 0;\n\n      for (i = 0; i < hash_size - 1; i++) {\n        head[i] = 0;\n      } // Set the default configuration parameters:\n\n\n      max_lazy_match = config_table[level].max_lazy;\n      good_match = config_table[level].good_length;\n      nice_match = config_table[level].nice_length;\n      max_chain_length = config_table[level].max_chain;\n      strstart = 0;\n      block_start = 0;\n      lookahead = 0;\n      match_length = prev_length = MIN_MATCH - 1;\n      match_available = 0;\n      ins_h = 0;\n    }\n\n    function init_block() {\n      var i; // Initialize the trees.\n\n      for (i = 0; i < L_CODES; i++) {\n        dyn_ltree[i * 2] = 0;\n      }\n\n      for (i = 0; i < D_CODES; i++) {\n        dyn_dtree[i * 2] = 0;\n      }\n\n      for (i = 0; i < BL_CODES; i++) {\n        bl_tree[i * 2] = 0;\n      }\n\n      dyn_ltree[END_BLOCK * 2] = 1;\n      that.opt_len = that.static_len = 0;\n      last_lit = matches = 0;\n    } // Initialize the tree data structures for a new zlib stream.\n\n\n    function tr_init() {\n      l_desc.dyn_tree = dyn_ltree;\n      l_desc.stat_desc = StaticTree.static_l_desc;\n      d_desc.dyn_tree = dyn_dtree;\n      d_desc.stat_desc = StaticTree.static_d_desc;\n      bl_desc.dyn_tree = bl_tree;\n      bl_desc.stat_desc = StaticTree.static_bl_desc;\n      bi_buf = 0;\n      bi_valid = 0;\n      last_eob_len = 8; // enough lookahead for inflate\n      // Initialize the first block of the first file:\n\n      init_block();\n    } // Restore the heap property by moving down the tree starting at node k,\n    // exchanging a node with the smallest of its two sons if necessary,\n    // stopping\n    // when the heap property is re-established (each father smaller than its\n    // two sons).\n\n\n    that.pqdownheap = function (tree, // the tree to restore\n    k // node to move down\n    ) {\n      var heap = that.heap;\n      var v = heap[k];\n      var j = k << 1; // left son of k\n\n      while (j <= that.heap_len) {\n        // Set j to the smallest of the two sons:\n        if (j < that.heap_len && smaller(tree, heap[j + 1], heap[j], that.depth)) {\n          j++;\n        } // Exit if v is smaller than both sons\n\n\n        if (smaller(tree, v, heap[j], that.depth)) break; // Exchange v with the smallest son\n\n        heap[k] = heap[j];\n        k = j; // And continue down the tree, setting j to the left son of k\n\n        j <<= 1;\n      }\n\n      heap[k] = v;\n    }; // Scan a literal or distance tree to determine the frequencies of the codes\n    // in the bit length tree.\n\n\n    function scan_tree(tree, // the tree to be scanned\n    max_code // and its largest code of non zero frequency\n    ) {\n      var n; // iterates over all tree elements\n\n      var prevlen = -1; // last emitted length\n\n      var curlen; // length of current code\n\n      var nextlen = tree[0 * 2 + 1]; // length of next code\n\n      var count = 0; // repeat count of the current code\n\n      var max_count = 7; // max repeat count\n\n      var min_count = 4; // min repeat count\n\n      if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n      }\n\n      tree[(max_code + 1) * 2 + 1] = 0xffff; // guard\n\n      for (n = 0; n <= max_code; n++) {\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1];\n\n        if (++count < max_count && curlen == nextlen) {\n          continue;\n        } else if (count < min_count) {\n          bl_tree[curlen * 2] += count;\n        } else if (curlen !== 0) {\n          if (curlen != prevlen) bl_tree[curlen * 2]++;\n          bl_tree[REP_3_6 * 2]++;\n        } else if (count <= 10) {\n          bl_tree[REPZ_3_10 * 2]++;\n        } else {\n          bl_tree[REPZ_11_138 * 2]++;\n        }\n\n        count = 0;\n        prevlen = curlen;\n\n        if (nextlen === 0) {\n          max_count = 138;\n          min_count = 3;\n        } else if (curlen == nextlen) {\n          max_count = 6;\n          min_count = 3;\n        } else {\n          max_count = 7;\n          min_count = 4;\n        }\n      }\n    } // Construct the Huffman tree for the bit lengths and return the index in\n    // bl_order of the last bit length code to send.\n\n\n    function build_bl_tree() {\n      var max_blindex; // index of last bit length code of non zero freq\n      // Determine the bit length frequencies for literal and distance trees\n\n      scan_tree(dyn_ltree, l_desc.max_code);\n      scan_tree(dyn_dtree, d_desc.max_code); // Build the bit length tree:\n\n      bl_desc.build_tree(that); // opt_len now includes the length of the tree representations, except\n      // the lengths of the bit lengths codes and the 5+5+4 bits for the\n      // counts.\n      // Determine the number of bit length codes to send. The pkzip format\n      // requires that at least 4 bit length codes be sent. (appnote.txt says\n      // 3 but the actual value used is 4.)\n\n      for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n        if (bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0) break;\n      } // Update opt_len to include the bit length tree and counts\n\n\n      that.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n      return max_blindex;\n    } // Output a byte on the stream.\n    // IN assertion: there is enough room in pending_buf.\n\n\n    function put_byte(p) {\n      that.pending_buf[that.pending++] = p;\n    }\n\n    function put_short(w) {\n      put_byte(w & 0xff);\n      put_byte(w >>> 8 & 0xff);\n    }\n\n    function putShortMSB(b) {\n      put_byte(b >> 8 & 0xff);\n      put_byte(b & 0xff & 0xff);\n    }\n\n    function send_bits(value, length) {\n      var val,\n          len = length;\n\n      if (bi_valid > Buf_size - len) {\n        val = value; // bi_buf |= (val << bi_valid);\n\n        bi_buf |= val << bi_valid & 0xffff;\n        put_short(bi_buf);\n        bi_buf = val >>> Buf_size - bi_valid;\n        bi_valid += len - Buf_size;\n      } else {\n        // bi_buf |= (value) << bi_valid;\n        bi_buf |= value << bi_valid & 0xffff;\n        bi_valid += len;\n      }\n    }\n\n    function send_code(c, tree) {\n      var c2 = c * 2;\n      send_bits(tree[c2] & 0xffff, tree[c2 + 1] & 0xffff);\n    } // Send a literal or distance tree in compressed form, using the codes in\n    // bl_tree.\n\n\n    function send_tree(tree, // the tree to be sent\n    max_code // and its largest code of non zero frequency\n    ) {\n      var n; // iterates over all tree elements\n\n      var prevlen = -1; // last emitted length\n\n      var curlen; // length of current code\n\n      var nextlen = tree[0 * 2 + 1]; // length of next code\n\n      var count = 0; // repeat count of the current code\n\n      var max_count = 7; // max repeat count\n\n      var min_count = 4; // min repeat count\n\n      if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n      }\n\n      for (n = 0; n <= max_code; n++) {\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1];\n\n        if (++count < max_count && curlen == nextlen) {\n          continue;\n        } else if (count < min_count) {\n          do {\n            send_code(curlen, bl_tree);\n          } while (--count !== 0);\n        } else if (curlen !== 0) {\n          if (curlen != prevlen) {\n            send_code(curlen, bl_tree);\n            count--;\n          }\n\n          send_code(REP_3_6, bl_tree);\n          send_bits(count - 3, 2);\n        } else if (count <= 10) {\n          send_code(REPZ_3_10, bl_tree);\n          send_bits(count - 3, 3);\n        } else {\n          send_code(REPZ_11_138, bl_tree);\n          send_bits(count - 11, 7);\n        }\n\n        count = 0;\n        prevlen = curlen;\n\n        if (nextlen === 0) {\n          max_count = 138;\n          min_count = 3;\n        } else if (curlen == nextlen) {\n          max_count = 6;\n          min_count = 3;\n        } else {\n          max_count = 7;\n          min_count = 4;\n        }\n      }\n    } // Send the header for a block using dynamic Huffman trees: the counts, the\n    // lengths of the bit length codes, the literal tree and the distance tree.\n    // IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n\n\n    function send_all_trees(lcodes, dcodes, blcodes) {\n      var rank; // index in bl_order\n\n      send_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt\n\n      send_bits(dcodes - 1, 5);\n      send_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt\n\n      for (rank = 0; rank < blcodes; rank++) {\n        send_bits(bl_tree[Tree.bl_order[rank] * 2 + 1], 3);\n      }\n\n      send_tree(dyn_ltree, lcodes - 1); // literal tree\n\n      send_tree(dyn_dtree, dcodes - 1); // distance tree\n    } // Flush the bit buffer, keeping at most 7 bits in it.\n\n\n    function bi_flush() {\n      if (bi_valid == 16) {\n        put_short(bi_buf);\n        bi_buf = 0;\n        bi_valid = 0;\n      } else if (bi_valid >= 8) {\n        put_byte(bi_buf & 0xff);\n        bi_buf >>>= 8;\n        bi_valid -= 8;\n      }\n    } // Send one empty static block to give enough lookahead for inflate.\n    // This takes 10 bits, of which 7 may remain in the bit buffer.\n    // The current inflate code requires 9 bits of lookahead. If the\n    // last two codes for the previous block (real code plus EOB) were coded\n    // on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode\n    // the last real code. In this case we send two empty static blocks instead\n    // of one. (There are no problems if the previous block is stored or fixed.)\n    // To simplify the code, we assume the worst case of last real code encoded\n    // on one bit only.\n\n\n    function _tr_align() {\n      send_bits(STATIC_TREES << 1, 3);\n      send_code(END_BLOCK, StaticTree.static_ltree);\n      bi_flush(); // Of the 10 bits for the empty block, we have already sent\n      // (10 - bi_valid) bits. The lookahead for the last real code (before\n      // the EOB of the previous block) was thus at least one plus the length\n      // of the EOB plus what we have just sent of the empty static block.\n\n      if (1 + last_eob_len + 10 - bi_valid < 9) {\n        send_bits(STATIC_TREES << 1, 3);\n        send_code(END_BLOCK, StaticTree.static_ltree);\n        bi_flush();\n      }\n\n      last_eob_len = 7;\n    } // Save the match info and tally the frequency counts. Return true if\n    // the current block must be flushed.\n\n\n    function _tr_tally(dist, // distance of matched string\n    lc // match length-MIN_MATCH or unmatched char (if dist==0)\n    ) {\n      var out_length, in_length, dcode;\n      that.pending_buf[d_buf + last_lit * 2] = dist >>> 8 & 0xff;\n      that.pending_buf[d_buf + last_lit * 2 + 1] = dist & 0xff;\n      that.pending_buf[l_buf + last_lit] = lc & 0xff;\n      last_lit++;\n\n      if (dist === 0) {\n        // lc is the unmatched char\n        dyn_ltree[lc * 2]++;\n      } else {\n        matches++; // Here, lc is the match length - MIN_MATCH\n\n        dist--; // dist = match distance - 1\n\n        dyn_ltree[(Tree._length_code[lc] + LITERALS + 1) * 2]++;\n        dyn_dtree[Tree.d_code(dist) * 2]++;\n      }\n\n      if ((last_lit & 0x1fff) === 0 && level > 2) {\n        // Compute an upper bound for the compressed length\n        out_length = last_lit * 8;\n        in_length = strstart - block_start;\n\n        for (dcode = 0; dcode < D_CODES; dcode++) {\n          out_length += dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);\n        }\n\n        out_length >>>= 3;\n        if (matches < Math.floor(last_lit / 2) && out_length < Math.floor(in_length / 2)) return true;\n      }\n\n      return last_lit == lit_bufsize - 1; // We avoid equality with lit_bufsize because of wraparound at 64K\n      // on 16 bit machines and because stored blocks are restricted to\n      // 64K-1 bytes.\n    } // Send the block data compressed using the given Huffman trees\n\n\n    function compress_block(ltree, dtree) {\n      var dist; // distance of matched string\n\n      var lc; // match length or unmatched char (if dist === 0)\n\n      var lx = 0; // running index in l_buf\n\n      var code; // the code to send\n\n      var extra; // number of extra bits to send\n\n      if (last_lit !== 0) {\n        do {\n          dist = that.pending_buf[d_buf + lx * 2] << 8 & 0xff00 | that.pending_buf[d_buf + lx * 2 + 1] & 0xff;\n          lc = that.pending_buf[l_buf + lx] & 0xff;\n          lx++;\n\n          if (dist === 0) {\n            send_code(lc, ltree); // send a literal byte\n          } else {\n            // Here, lc is the match length - MIN_MATCH\n            code = Tree._length_code[lc];\n            send_code(code + LITERALS + 1, ltree); // send the length\n            // code\n\n            extra = Tree.extra_lbits[code];\n\n            if (extra !== 0) {\n              lc -= Tree.base_length[code];\n              send_bits(lc, extra); // send the extra length bits\n            }\n\n            dist--; // dist is now the match distance - 1\n\n            code = Tree.d_code(dist);\n            send_code(code, dtree); // send the distance code\n\n            extra = Tree.extra_dbits[code];\n\n            if (extra !== 0) {\n              dist -= Tree.base_dist[code];\n              send_bits(dist, extra); // send the extra distance bits\n            }\n          } // literal or match pair ?\n          // Check that the overlay between pending_buf and d_buf+l_buf is\n          // ok:\n\n        } while (lx < last_lit);\n      }\n\n      send_code(END_BLOCK, ltree);\n      last_eob_len = ltree[END_BLOCK * 2 + 1];\n    } // Flush the bit buffer and align the output on a byte boundary\n\n\n    function bi_windup() {\n      if (bi_valid > 8) {\n        put_short(bi_buf);\n      } else if (bi_valid > 0) {\n        put_byte(bi_buf & 0xff);\n      }\n\n      bi_buf = 0;\n      bi_valid = 0;\n    } // Copy a stored block, storing first the length and its\n    // one's complement if requested.\n\n\n    function copy_block(buf, // the input data\n    len, // its length\n    header // true if block header must be written\n    ) {\n      bi_windup(); // align on byte boundary\n\n      last_eob_len = 8; // enough lookahead for inflate\n\n      if (header) {\n        put_short(len);\n        put_short(~len);\n      }\n\n      that.pending_buf.set(window.subarray(buf, buf + len), that.pending);\n      that.pending += len;\n    } // Send a stored block\n\n\n    function _tr_stored_block(buf, // input block\n    stored_len, // length of input block\n    eof // true if this is the last block for a file\n    ) {\n      send_bits((STORED_BLOCK << 1) + (eof ? 1 : 0), 3); // send block type\n\n      copy_block(buf, stored_len, true); // with header\n    } // Determine the best encoding for the current block: dynamic trees, static\n    // trees or store, and output the encoded block to the zip file.\n\n\n    function _tr_flush_block(buf, // input block, or NULL if too old\n    stored_len, // length of input block\n    eof // true if this is the last block for a file\n    ) {\n      var opt_lenb, static_lenb; // opt_len and static_len in bytes\n\n      var max_blindex = 0; // index of last bit length code of non zero freq\n      // Build the Huffman trees unless a stored block is forced\n\n      if (level > 0) {\n        // Construct the literal and distance trees\n        l_desc.build_tree(that);\n        d_desc.build_tree(that); // At this point, opt_len and static_len are the total bit lengths\n        // of\n        // the compressed block data, excluding the tree representations.\n        // Build the bit length tree for the above two trees, and get the\n        // index\n        // in bl_order of the last bit length code to send.\n\n        max_blindex = build_bl_tree(); // Determine the best encoding. Compute first the block length in\n        // bytes\n\n        opt_lenb = that.opt_len + 3 + 7 >>> 3;\n        static_lenb = that.static_len + 3 + 7 >>> 3;\n        if (static_lenb <= opt_lenb) opt_lenb = static_lenb;\n      } else {\n        opt_lenb = static_lenb = stored_len + 5; // force a stored block\n      }\n\n      if (stored_len + 4 <= opt_lenb && buf != -1) {\n        // 4: two words for the lengths\n        // The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n        // Otherwise we can't have processed more than WSIZE input bytes\n        // since\n        // the last block flush, because compression would have been\n        // successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n        // transform a block into a stored block.\n        _tr_stored_block(buf, stored_len, eof);\n      } else if (static_lenb == opt_lenb) {\n        send_bits((STATIC_TREES << 1) + (eof ? 1 : 0), 3);\n        compress_block(StaticTree.static_ltree, StaticTree.static_dtree);\n      } else {\n        send_bits((DYN_TREES << 1) + (eof ? 1 : 0), 3);\n        send_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);\n        compress_block(dyn_ltree, dyn_dtree);\n      } // The above check is made mod 2^32, for files larger than 512 MB\n      // and uLong implemented on 32 bits.\n\n\n      init_block();\n\n      if (eof) {\n        bi_windup();\n      }\n    }\n\n    function flush_block_only(eof) {\n      _tr_flush_block(block_start >= 0 ? block_start : -1, strstart - block_start, eof);\n\n      block_start = strstart;\n      strm.flush_pending();\n    } // Fill the window when the lookahead becomes insufficient.\n    // Updates strstart and lookahead.\n    //\n    // IN assertion: lookahead < MIN_LOOKAHEAD\n    // OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n    // At least one byte has been read, or avail_in === 0; reads are\n    // performed for at least two bytes (required for the zip translate_eol\n    // option -- not supported here).\n\n\n    function fill_window() {\n      var n, m;\n      var p;\n      var more; // Amount of free space at the end of the window.\n\n      do {\n        more = window_size - lookahead - strstart; // Deal with !@#$% 64K limit:\n\n        if (more === 0 && strstart === 0 && lookahead === 0) {\n          more = w_size;\n        } else if (more == -1) {\n          // Very unlikely, but possible on 16 bit machine if strstart ==\n          // 0\n          // and lookahead == 1 (input done one byte at time)\n          more--; // If the window is almost full and there is insufficient\n          // lookahead,\n          // move the upper half to the lower one to make room in the\n          // upper half.\n        } else if (strstart >= w_size + w_size - MIN_LOOKAHEAD) {\n          window.set(window.subarray(w_size, w_size + w_size), 0);\n          match_start -= w_size;\n          strstart -= w_size; // we now have strstart >= MAX_DIST\n\n          block_start -= w_size; // Slide the hash table (could be avoided with 32 bit values\n          // at the expense of memory usage). We slide even when level ==\n          // 0\n          // to keep the hash table consistent if we switch back to level\n          // > 0\n          // later. (Using level 0 permanently is not an optimal usage of\n          // zlib, so we don't care about this pathological case.)\n\n          n = hash_size;\n          p = n;\n\n          do {\n            m = head[--p] & 0xffff;\n            head[p] = m >= w_size ? m - w_size : 0;\n          } while (--n !== 0);\n\n          n = w_size;\n          p = n;\n\n          do {\n            m = prev[--p] & 0xffff;\n            prev[p] = m >= w_size ? m - w_size : 0; // If n is not on any hash chain, prev[n] is garbage but\n            // its value will never be used.\n          } while (--n !== 0);\n\n          more += w_size;\n        }\n\n        if (strm.avail_in === 0) return; // If there was no sliding:\n        // strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n        // more == window_size - lookahead - strstart\n        // => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n        // => more >= window_size - 2*WSIZE + 2\n        // In the BIG_MEM or MMAP case (not yet supported),\n        // window_size == input_size + MIN_LOOKAHEAD &&\n        // strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n        // Otherwise, window_size == 2*WSIZE so more >= 2.\n        // If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n\n        n = strm.read_buf(window, strstart + lookahead, more);\n        lookahead += n; // Initialize the hash value now that we have some input:\n\n        if (lookahead >= MIN_MATCH) {\n          ins_h = window[strstart] & 0xff;\n          ins_h = (ins_h << hash_shift ^ window[strstart + 1] & 0xff) & hash_mask;\n        } // If the whole input has less than MIN_MATCH bytes, ins_h is\n        // garbage,\n        // but this is not important since only literal bytes will be\n        // emitted.\n\n      } while (lookahead < MIN_LOOKAHEAD && strm.avail_in !== 0);\n    } // Copy without compression as much as possible from the input stream,\n    // return\n    // the current block state.\n    // This function does not insert new strings in the dictionary since\n    // uncompressible data is probably not useful. This function is used\n    // only for the level=0 compression option.\n    // NOTE: this function should be optimized to avoid extra copying from\n    // window to pending_buf.\n\n\n    function deflate_stored(flush) {\n      // Stored blocks are limited to 0xffff bytes, pending_buf is limited\n      // to pending_buf_size, and each stored block has a 5 byte header:\n      var max_block_size = 0xffff;\n      var max_start;\n\n      if (max_block_size > pending_buf_size - 5) {\n        max_block_size = pending_buf_size - 5;\n      } // Copy as much as possible from input to output:\n\n\n      while (true) {\n        // Fill the window as much as possible:\n        if (lookahead <= 1) {\n          fill_window();\n          if (lookahead === 0 && flush == Z_NO_FLUSH) return NeedMore;\n          if (lookahead === 0) break; // flush the current block\n        }\n\n        strstart += lookahead;\n        lookahead = 0; // Emit a stored block if pending_buf will be full:\n\n        max_start = block_start + max_block_size;\n\n        if (strstart === 0 || strstart >= max_start) {\n          // strstart === 0 is possible when wraparound on 16-bit machine\n          lookahead = strstart - max_start;\n          strstart = max_start;\n          flush_block_only(false);\n          if (strm.avail_out === 0) return NeedMore;\n        } // Flush if we may have to slide, otherwise block_start may become\n        // negative and the data will be gone:\n\n\n        if (strstart - block_start >= w_size - MIN_LOOKAHEAD) {\n          flush_block_only(false);\n          if (strm.avail_out === 0) return NeedMore;\n        }\n      }\n\n      flush_block_only(flush == Z_FINISH);\n      if (strm.avail_out === 0) return flush == Z_FINISH ? FinishStarted : NeedMore;\n      return flush == Z_FINISH ? FinishDone : BlockDone;\n    }\n\n    function longest_match(cur_match) {\n      var chain_length = max_chain_length; // max hash chain length\n\n      var scan = strstart; // current string\n\n      var match; // matched string\n\n      var len; // length of current match\n\n      var best_len = prev_length; // best match length so far\n\n      var limit = strstart > w_size - MIN_LOOKAHEAD ? strstart - (w_size - MIN_LOOKAHEAD) : 0;\n      var _nice_match = nice_match; // Stop when cur_match becomes <= limit. To simplify the code,\n      // we prevent matches with the string of window index 0.\n\n      var wmask = w_mask;\n      var strend = strstart + MAX_MATCH;\n      var scan_end1 = window[scan + best_len - 1];\n      var scan_end = window[scan + best_len]; // The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of\n      // 16.\n      // It is easy to get rid of this optimization if necessary.\n      // Do not waste too much time if we already have a good match:\n\n      if (prev_length >= good_match) {\n        chain_length >>= 2;\n      } // Do not look for matches beyond the end of the input. This is\n      // necessary\n      // to make deflate deterministic.\n\n\n      if (_nice_match > lookahead) _nice_match = lookahead;\n\n      do {\n        match = cur_match; // Skip to next match if the match length cannot increase\n        // or if the match length is less than 2:\n\n        if (window[match + best_len] != scan_end || window[match + best_len - 1] != scan_end1 || window[match] != window[scan] || window[++match] != window[scan + 1]) continue; // The check at best_len-1 can be removed because it will be made\n        // again later. (This heuristic is not always a win.)\n        // It is not necessary to compare scan[2] and match[2] since they\n        // are always equal when the other bytes match, given that\n        // the hash keys are equal and that HASH_BITS >= 8.\n\n        scan += 2;\n        match++; // We check for insufficient lookahead only every 8th comparison;\n        // the 256th check will be made at strstart+258.\n\n        do {} while (window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match] && scan < strend);\n\n        len = MAX_MATCH - (strend - scan);\n        scan = strend - MAX_MATCH;\n\n        if (len > best_len) {\n          match_start = cur_match;\n          best_len = len;\n          if (len >= _nice_match) break;\n          scan_end1 = window[scan + best_len - 1];\n          scan_end = window[scan + best_len];\n        }\n      } while ((cur_match = prev[cur_match & wmask] & 0xffff) > limit && --chain_length !== 0);\n\n      if (best_len <= lookahead) return best_len;\n      return lookahead;\n    } // Compress as much as possible from the input stream, return the current\n    // block state.\n    // This function does not perform lazy evaluation of matches and inserts\n    // new strings in the dictionary only for unmatched strings or for short\n    // matches. It is used only for the fast compression options.\n\n\n    function deflate_fast(flush) {\n      // short hash_head = 0; // head of the hash chain\n      var hash_head = 0; // head of the hash chain\n\n      var bflush; // set if current block must be flushed\n\n      while (true) {\n        // Make sure that we always have enough lookahead, except\n        // at the end of the input file. We need MAX_MATCH bytes\n        // for the next match, plus MIN_MATCH bytes to insert the\n        // string following the next match.\n        if (lookahead < MIN_LOOKAHEAD) {\n          fill_window();\n\n          if (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n            return NeedMore;\n          }\n\n          if (lookahead === 0) break; // flush the current block\n        } // Insert the string window[strstart .. strstart+2] in the\n        // dictionary, and set hash_head to the head of the hash chain:\n\n\n        if (lookahead >= MIN_MATCH) {\n          ins_h = (ins_h << hash_shift ^ window[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask; // prev[strstart&w_mask]=hash_head=head[ins_h];\n\n          hash_head = head[ins_h] & 0xffff;\n          prev[strstart & w_mask] = head[ins_h];\n          head[ins_h] = strstart;\n        } // Find the longest match, discarding those <= prev_length.\n        // At this point we have always match_length < MIN_MATCH\n\n\n        if (hash_head !== 0 && (strstart - hash_head & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n          // To simplify the code, we prevent matches with the string\n          // of window index 0 (in particular we have to avoid a match\n          // of the string with itself at the start of the input file).\n          if (strategy != Z_HUFFMAN_ONLY) {\n            match_length = longest_match(hash_head);\n          } // longest_match() sets match_start\n\n        }\n\n        if (match_length >= MIN_MATCH) {\n          // check_match(strstart, match_start, match_length);\n          bflush = _tr_tally(strstart - match_start, match_length - MIN_MATCH);\n          lookahead -= match_length; // Insert new strings in the hash table only if the match length\n          // is not too large. This saves time but degrades compression.\n\n          if (match_length <= max_lazy_match && lookahead >= MIN_MATCH) {\n            match_length--; // string at strstart already in hash table\n\n            do {\n              strstart++;\n              ins_h = (ins_h << hash_shift ^ window[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask; // prev[strstart&w_mask]=hash_head=head[ins_h];\n\n              hash_head = head[ins_h] & 0xffff;\n              prev[strstart & w_mask] = head[ins_h];\n              head[ins_h] = strstart; // strstart never exceeds WSIZE-MAX_MATCH, so there are\n              // always MIN_MATCH bytes ahead.\n            } while (--match_length !== 0);\n\n            strstart++;\n          } else {\n            strstart += match_length;\n            match_length = 0;\n            ins_h = window[strstart] & 0xff;\n            ins_h = (ins_h << hash_shift ^ window[strstart + 1] & 0xff) & hash_mask; // If lookahead < MIN_MATCH, ins_h is garbage, but it does\n            // not\n            // matter since it will be recomputed at next deflate call.\n          }\n        } else {\n          // No match, output a literal byte\n          bflush = _tr_tally(0, window[strstart] & 0xff);\n          lookahead--;\n          strstart++;\n        }\n\n        if (bflush) {\n          flush_block_only(false);\n          if (strm.avail_out === 0) return NeedMore;\n        }\n      }\n\n      flush_block_only(flush == Z_FINISH);\n\n      if (strm.avail_out === 0) {\n        if (flush == Z_FINISH) return FinishStarted;else return NeedMore;\n      }\n\n      return flush == Z_FINISH ? FinishDone : BlockDone;\n    } // Same as above, but achieves better compression. We use a lazy\n    // evaluation for matches: a match is finally adopted only if there is\n    // no better match at the next window position.\n\n\n    function deflate_slow(flush) {\n      // short hash_head = 0; // head of hash chain\n      var hash_head = 0; // head of hash chain\n\n      var bflush; // set if current block must be flushed\n\n      var max_insert; // Process the input block.\n\n      while (true) {\n        // Make sure that we always have enough lookahead, except\n        // at the end of the input file. We need MAX_MATCH bytes\n        // for the next match, plus MIN_MATCH bytes to insert the\n        // string following the next match.\n        if (lookahead < MIN_LOOKAHEAD) {\n          fill_window();\n\n          if (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n            return NeedMore;\n          }\n\n          if (lookahead === 0) break; // flush the current block\n        } // Insert the string window[strstart .. strstart+2] in the\n        // dictionary, and set hash_head to the head of the hash chain:\n\n\n        if (lookahead >= MIN_MATCH) {\n          ins_h = (ins_h << hash_shift ^ window[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask; // prev[strstart&w_mask]=hash_head=head[ins_h];\n\n          hash_head = head[ins_h] & 0xffff;\n          prev[strstart & w_mask] = head[ins_h];\n          head[ins_h] = strstart;\n        } // Find the longest match, discarding those <= prev_length.\n\n\n        prev_length = match_length;\n        prev_match = match_start;\n        match_length = MIN_MATCH - 1;\n\n        if (hash_head !== 0 && prev_length < max_lazy_match && (strstart - hash_head & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n          // To simplify the code, we prevent matches with the string\n          // of window index 0 (in particular we have to avoid a match\n          // of the string with itself at the start of the input file).\n          if (strategy != Z_HUFFMAN_ONLY) {\n            match_length = longest_match(hash_head);\n          } // longest_match() sets match_start\n\n\n          if (match_length <= 5 && (strategy == Z_FILTERED || match_length == MIN_MATCH && strstart - match_start > 4096)) {\n            // If prev_match is also MIN_MATCH, match_start is garbage\n            // but we will ignore the current match anyway.\n            match_length = MIN_MATCH - 1;\n          }\n        } // If there was a match at the previous step and the current\n        // match is not better, output the previous match:\n\n\n        if (prev_length >= MIN_MATCH && match_length <= prev_length) {\n          max_insert = strstart + lookahead - MIN_MATCH; // Do not insert strings in hash table beyond this.\n          // check_match(strstart-1, prev_match, prev_length);\n\n          bflush = _tr_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH); // Insert in hash table all strings up to the end of the match.\n          // strstart-1 and strstart are already inserted. If there is not\n          // enough lookahead, the last two strings are not inserted in\n          // the hash table.\n\n          lookahead -= prev_length - 1;\n          prev_length -= 2;\n\n          do {\n            if (++strstart <= max_insert) {\n              ins_h = (ins_h << hash_shift ^ window[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask; // prev[strstart&w_mask]=hash_head=head[ins_h];\n\n              hash_head = head[ins_h] & 0xffff;\n              prev[strstart & w_mask] = head[ins_h];\n              head[ins_h] = strstart;\n            }\n          } while (--prev_length !== 0);\n\n          match_available = 0;\n          match_length = MIN_MATCH - 1;\n          strstart++;\n\n          if (bflush) {\n            flush_block_only(false);\n            if (strm.avail_out === 0) return NeedMore;\n          }\n        } else if (match_available !== 0) {\n          // If there was no match at the previous position, output a\n          // single literal. If there was a match but the current match\n          // is longer, truncate the previous match to a single literal.\n          bflush = _tr_tally(0, window[strstart - 1] & 0xff);\n\n          if (bflush) {\n            flush_block_only(false);\n          }\n\n          strstart++;\n          lookahead--;\n          if (strm.avail_out === 0) return NeedMore;\n        } else {\n          // There is no previous match to compare with, wait for\n          // the next step to decide.\n          match_available = 1;\n          strstart++;\n          lookahead--;\n        }\n      }\n\n      if (match_available !== 0) {\n        bflush = _tr_tally(0, window[strstart - 1] & 0xff);\n        match_available = 0;\n      }\n\n      flush_block_only(flush == Z_FINISH);\n\n      if (strm.avail_out === 0) {\n        if (flush == Z_FINISH) return FinishStarted;else return NeedMore;\n      }\n\n      return flush == Z_FINISH ? FinishDone : BlockDone;\n    }\n\n    function deflateReset(strm) {\n      strm.total_in = strm.total_out = 0;\n      strm.msg = null; //\n\n      that.pending = 0;\n      that.pending_out = 0;\n      status = BUSY_STATE;\n      last_flush = Z_NO_FLUSH;\n      tr_init();\n      lm_init();\n      return Z_OK;\n    }\n\n    that.deflateInit = function (strm, _level, bits, _method, memLevel, _strategy) {\n      if (!_method) _method = Z_DEFLATED;\n      if (!memLevel) memLevel = DEF_MEM_LEVEL;\n      if (!_strategy) _strategy = Z_DEFAULT_STRATEGY; // byte[] my_version=ZLIB_VERSION;\n      //\n      // if (!version || version[0] != my_version[0]\n      // || stream_size != sizeof(z_stream)) {\n      // return Z_VERSION_ERROR;\n      // }\n\n      strm.msg = null;\n      if (_level == Z_DEFAULT_COMPRESSION) _level = 6;\n\n      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || _method != Z_DEFLATED || bits < 9 || bits > 15 || _level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {\n        return Z_STREAM_ERROR;\n      }\n\n      strm.dstate = that;\n      w_bits = bits;\n      w_size = 1 << w_bits;\n      w_mask = w_size - 1;\n      hash_bits = memLevel + 7;\n      hash_size = 1 << hash_bits;\n      hash_mask = hash_size - 1;\n      hash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n      window = new Uint8Array(w_size * 2);\n      prev = [];\n      head = [];\n      lit_bufsize = 1 << memLevel + 6; // 16K elements by default\n      // We overlay pending_buf and d_buf+l_buf. This works since the average\n      // output size for (length,distance) codes is <= 24 bits.\n\n      that.pending_buf = new Uint8Array(lit_bufsize * 4);\n      pending_buf_size = lit_bufsize * 4;\n      d_buf = Math.floor(lit_bufsize / 2);\n      l_buf = (1 + 2) * lit_bufsize;\n      level = _level;\n      strategy = _strategy;\n      return deflateReset(strm);\n    };\n\n    that.deflateEnd = function () {\n      if (status != INIT_STATE && status != BUSY_STATE && status != FINISH_STATE) {\n        return Z_STREAM_ERROR;\n      } // Deallocate in reverse order of allocations:\n\n\n      that.pending_buf = null;\n      head = null;\n      prev = null;\n      window = null; // free\n\n      that.dstate = null;\n      return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;\n    };\n\n    that.deflateParams = function (strm, _level, _strategy) {\n      var err = Z_OK;\n\n      if (_level == Z_DEFAULT_COMPRESSION) {\n        _level = 6;\n      }\n\n      if (_level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {\n        return Z_STREAM_ERROR;\n      }\n\n      if (config_table[level].func != config_table[_level].func && strm.total_in !== 0) {\n        // Flush the last buffer:\n        err = strm.deflate(Z_PARTIAL_FLUSH);\n      }\n\n      if (level != _level) {\n        level = _level;\n        max_lazy_match = config_table[level].max_lazy;\n        good_match = config_table[level].good_length;\n        nice_match = config_table[level].nice_length;\n        max_chain_length = config_table[level].max_chain;\n      }\n\n      strategy = _strategy;\n      return err;\n    };\n\n    that.deflateSetDictionary = function (strm, dictionary, dictLength) {\n      var length = dictLength;\n      var n,\n          index = 0;\n      if (!dictionary || status != INIT_STATE) return Z_STREAM_ERROR;\n      if (length < MIN_MATCH) return Z_OK;\n\n      if (length > w_size - MIN_LOOKAHEAD) {\n        length = w_size - MIN_LOOKAHEAD;\n        index = dictLength - length; // use the tail of the dictionary\n      }\n\n      window.set(dictionary.subarray(index, index + length), 0);\n      strstart = length;\n      block_start = length; // Insert all strings in the hash table (except for the last two bytes).\n      // s->lookahead stays null, so s->ins_h will be recomputed at the next\n      // call of fill_window.\n\n      ins_h = window[0] & 0xff;\n      ins_h = (ins_h << hash_shift ^ window[1] & 0xff) & hash_mask;\n\n      for (n = 0; n <= length - MIN_MATCH; n++) {\n        ins_h = (ins_h << hash_shift ^ window[n + (MIN_MATCH - 1)] & 0xff) & hash_mask;\n        prev[n & w_mask] = head[ins_h];\n        head[ins_h] = n;\n      }\n\n      return Z_OK;\n    };\n\n    that.deflate = function (_strm, flush) {\n      var i, header, level_flags, old_flush, bstate;\n\n      if (flush > Z_FINISH || flush < 0) {\n        return Z_STREAM_ERROR;\n      }\n\n      if (!_strm.next_out || !_strm.next_in && _strm.avail_in !== 0 || status == FINISH_STATE && flush != Z_FINISH) {\n        _strm.msg = z_errmsg[Z_NEED_DICT - Z_STREAM_ERROR];\n        return Z_STREAM_ERROR;\n      }\n\n      if (_strm.avail_out === 0) {\n        _strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];\n        return Z_BUF_ERROR;\n      }\n\n      strm = _strm; // just in case\n\n      old_flush = last_flush;\n      last_flush = flush; // Write the zlib header\n\n      if (status == INIT_STATE) {\n        header = Z_DEFLATED + (w_bits - 8 << 4) << 8;\n        level_flags = (level - 1 & 0xff) >> 1;\n        if (level_flags > 3) level_flags = 3;\n        header |= level_flags << 6;\n        if (strstart !== 0) header |= PRESET_DICT;\n        header += 31 - header % 31;\n        status = BUSY_STATE;\n        putShortMSB(header);\n      } // Flush as much pending output as possible\n\n\n      if (that.pending !== 0) {\n        strm.flush_pending();\n\n        if (strm.avail_out === 0) {\n          // console.log(\" avail_out==0\");\n          // Since avail_out is 0, deflate will be called again with\n          // more output space, but possibly with both pending and\n          // avail_in equal to zero. There won't be anything to do,\n          // but this is not an error situation so make sure we\n          // return OK instead of BUF_ERROR at next call of deflate:\n          last_flush = -1;\n          return Z_OK;\n        } // Make sure there is something to do and avoid duplicate\n        // consecutive\n        // flushes. For repeated and useless calls with Z_FINISH, we keep\n        // returning Z_STREAM_END instead of Z_BUFF_ERROR.\n\n      } else if (strm.avail_in === 0 && flush <= old_flush && flush != Z_FINISH) {\n        strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];\n        return Z_BUF_ERROR;\n      } // User must not provide more input after the first FINISH:\n\n\n      if (status == FINISH_STATE && strm.avail_in !== 0) {\n        _strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];\n        return Z_BUF_ERROR;\n      } // Start a new block or continue the current one.\n\n\n      if (strm.avail_in !== 0 || lookahead !== 0 || flush != Z_NO_FLUSH && status != FINISH_STATE) {\n        bstate = -1;\n\n        switch (config_table[level].func) {\n          case STORED:\n            bstate = deflate_stored(flush);\n            break;\n\n          case FAST:\n            bstate = deflate_fast(flush);\n            break;\n\n          case SLOW:\n            bstate = deflate_slow(flush);\n            break;\n\n          default:\n        }\n\n        if (bstate == FinishStarted || bstate == FinishDone) {\n          status = FINISH_STATE;\n        }\n\n        if (bstate == NeedMore || bstate == FinishStarted) {\n          if (strm.avail_out === 0) {\n            last_flush = -1; // avoid BUF_ERROR next call, see above\n          }\n\n          return Z_OK; // If flush != Z_NO_FLUSH && avail_out === 0, the next call\n          // of deflate should use the same flush parameter to make sure\n          // that the flush is complete. So we don't have to output an\n          // empty block here, this will be done at next call. This also\n          // ensures that for a very small output buffer, we emit at most\n          // one empty block.\n        }\n\n        if (bstate == BlockDone) {\n          if (flush == Z_PARTIAL_FLUSH) {\n            _tr_align();\n          } else {\n            // FULL_FLUSH or SYNC_FLUSH\n            _tr_stored_block(0, 0, false); // For a full flush, this empty block will be recognized\n            // as a special marker by inflate_sync().\n\n\n            if (flush == Z_FULL_FLUSH) {\n              // state.head[s.hash_size-1]=0;\n              for (i = 0; i < hash_size\n              /*-1*/\n              ; i++) {\n                // forget history\n                head[i] = 0;\n              }\n            }\n          }\n\n          strm.flush_pending();\n\n          if (strm.avail_out === 0) {\n            last_flush = -1; // avoid BUF_ERROR at next call, see above\n\n            return Z_OK;\n          }\n        }\n      }\n\n      if (flush != Z_FINISH) return Z_OK;\n      return Z_STREAM_END;\n    };\n  } // ZStream\n\n\n  function ZStream() {\n    var that = this;\n    that.next_in_index = 0;\n    that.next_out_index = 0; // that.next_in; // next input byte\n\n    that.avail_in = 0; // number of bytes available at next_in\n\n    that.total_in = 0; // total nb of input bytes read so far\n    // that.next_out; // next output byte should be put there\n\n    that.avail_out = 0; // remaining free space at next_out\n\n    that.total_out = 0; // total nb of bytes output so far\n    // that.msg;\n    // that.dstate;\n  }\n\n  ZStream.prototype = {\n    deflateInit: function deflateInit(level, bits) {\n      var that = this;\n      that.dstate = new Deflate();\n      if (!bits) bits = MAX_BITS;\n      return that.dstate.deflateInit(that, level, bits);\n    },\n    deflate: function deflate(flush) {\n      var that = this;\n\n      if (!that.dstate) {\n        return Z_STREAM_ERROR;\n      }\n\n      return that.dstate.deflate(that, flush);\n    },\n    deflateEnd: function deflateEnd() {\n      var that = this;\n      if (!that.dstate) return Z_STREAM_ERROR;\n      var ret = that.dstate.deflateEnd();\n      that.dstate = null;\n      return ret;\n    },\n    deflateParams: function deflateParams(level, strategy) {\n      var that = this;\n      if (!that.dstate) return Z_STREAM_ERROR;\n      return that.dstate.deflateParams(that, level, strategy);\n    },\n    deflateSetDictionary: function deflateSetDictionary(dictionary, dictLength) {\n      var that = this;\n      if (!that.dstate) return Z_STREAM_ERROR;\n      return that.dstate.deflateSetDictionary(that, dictionary, dictLength);\n    },\n    // Read a new buffer from the current input stream, update the\n    // total number of bytes read. All deflate() input goes through\n    // this function so some applications may wish to modify it to avoid\n    // allocating a large strm->next_in buffer and copying from it.\n    // (See also flush_pending()).\n    read_buf: function read_buf(buf, start, size) {\n      var that = this;\n      var len = that.avail_in;\n      if (len > size) len = size;\n      if (len === 0) return 0;\n      that.avail_in -= len;\n      buf.set(that.next_in.subarray(that.next_in_index, that.next_in_index + len), start);\n      that.next_in_index += len;\n      that.total_in += len;\n      return len;\n    },\n    // Flush as much pending output as possible. All deflate() output goes\n    // through this function so some applications may wish to modify it\n    // to avoid allocating a large strm->next_out buffer and copying into it.\n    // (See also read_buf()).\n    flush_pending: function flush_pending() {\n      var that = this;\n      var len = that.dstate.pending;\n      if (len > that.avail_out) len = that.avail_out;\n      if (len === 0) return; // if (that.dstate.pending_buf.length <= that.dstate.pending_out || that.next_out.length <= that.next_out_index\n      // || that.dstate.pending_buf.length < (that.dstate.pending_out + len) || that.next_out.length < (that.next_out_index +\n      // len)) {\n      // console.log(that.dstate.pending_buf.length + \", \" + that.dstate.pending_out + \", \" + that.next_out.length + \", \" +\n      // that.next_out_index + \", \" + len);\n      // console.log(\"avail_out=\" + that.avail_out);\n      // }\n\n      that.next_out.set(that.dstate.pending_buf.subarray(that.dstate.pending_out, that.dstate.pending_out + len), that.next_out_index);\n      that.next_out_index += len;\n      that.dstate.pending_out += len;\n      that.total_out += len;\n      that.avail_out -= len;\n      that.dstate.pending -= len;\n\n      if (that.dstate.pending === 0) {\n        that.dstate.pending_out = 0;\n      }\n    }\n  }; // Deflater\n\n  function Deflater(options) {\n    var that = this;\n    var z = new ZStream();\n    var bufsize = 512;\n    var flush = Z_NO_FLUSH;\n    var buf = new Uint8Array(bufsize);\n    var level = options ? options.level : Z_DEFAULT_COMPRESSION;\n    if (typeof level == \"undefined\") level = Z_DEFAULT_COMPRESSION;\n    z.deflateInit(level);\n    z.next_out = buf;\n\n    that.append = function (data, onprogress) {\n      var err,\n          buffers = [],\n          lastIndex = 0,\n          bufferIndex = 0,\n          bufferSize = 0,\n          array;\n      if (!data.length) return;\n      z.next_in_index = 0;\n      z.next_in = data;\n      z.avail_in = data.length;\n\n      do {\n        z.next_out_index = 0;\n        z.avail_out = bufsize;\n        err = z.deflate(flush);\n        if (err != Z_OK) throw new Error(\"deflating: \" + z.msg);\n        if (z.next_out_index) if (z.next_out_index == bufsize) buffers.push(new Uint8Array(buf));else buffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n        bufferSize += z.next_out_index;\n\n        if (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n          onprogress(z.next_in_index);\n          lastIndex = z.next_in_index;\n        }\n      } while (z.avail_in > 0 || z.avail_out === 0);\n\n      array = new Uint8Array(bufferSize);\n      buffers.forEach(function (chunk) {\n        array.set(chunk, bufferIndex);\n        bufferIndex += chunk.length;\n      });\n      return array;\n    };\n\n    that.flush = function () {\n      var err,\n          buffers = [],\n          bufferIndex = 0,\n          bufferSize = 0,\n          array;\n\n      do {\n        z.next_out_index = 0;\n        z.avail_out = bufsize;\n        err = z.deflate(Z_FINISH);\n        if (err != Z_STREAM_END && err != Z_OK) throw new Error(\"deflating: \" + z.msg);\n        if (bufsize - z.avail_out > 0) buffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n        bufferSize += z.next_out_index;\n      } while (z.avail_in > 0 || z.avail_out === 0);\n\n      z.deflateEnd();\n      array = new Uint8Array(bufferSize);\n      buffers.forEach(function (chunk) {\n        array.set(chunk, bufferIndex);\n        bufferIndex += chunk.length;\n      });\n      return array;\n    };\n  } // 'zip' may not be defined in z-worker and some tests\n\n\n  var env = global.zip || global;\n  env.Deflater = env._jzlib_Deflater = Deflater;\n})(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || Function('return typeof this === \"object\" && this.content')() || Function('return this')()); // `self` is undefined in Firefox for Android content script context\n// while `this` is nsIContentFrameMessageManager\n// with an attribute `content` that corresponds to the window\n\n/**\n * A class to parse color values\n * @author Stoyan Stefanov <sstoo@gmail.com>\n * {@link   http://www.phpied.com/rgb-color-parser-in-javascript/}\n * @license Use it if you like it\n */\n(function (global) {\n\n  function RGBColor(color_string) {\n    color_string = color_string || '';\n    this.ok = false; // strip any leading #\n\n    if (color_string.charAt(0) == '#') {\n      // remove # if any\n      color_string = color_string.substr(1, 6);\n    }\n\n    color_string = color_string.replace(/ /g, '');\n    color_string = color_string.toLowerCase();\n    var channels; // before getting into regexps, try simple matches\n    // and overwrite the input\n\n    var simple_colors = {\n      aliceblue: 'f0f8ff',\n      antiquewhite: 'faebd7',\n      aqua: '00ffff',\n      aquamarine: '7fffd4',\n      azure: 'f0ffff',\n      beige: 'f5f5dc',\n      bisque: 'ffe4c4',\n      black: '000000',\n      blanchedalmond: 'ffebcd',\n      blue: '0000ff',\n      blueviolet: '8a2be2',\n      brown: 'a52a2a',\n      burlywood: 'deb887',\n      cadetblue: '5f9ea0',\n      chartreuse: '7fff00',\n      chocolate: 'd2691e',\n      coral: 'ff7f50',\n      cornflowerblue: '6495ed',\n      cornsilk: 'fff8dc',\n      crimson: 'dc143c',\n      cyan: '00ffff',\n      darkblue: '00008b',\n      darkcyan: '008b8b',\n      darkgoldenrod: 'b8860b',\n      darkgray: 'a9a9a9',\n      darkgreen: '006400',\n      darkkhaki: 'bdb76b',\n      darkmagenta: '8b008b',\n      darkolivegreen: '556b2f',\n      darkorange: 'ff8c00',\n      darkorchid: '9932cc',\n      darkred: '8b0000',\n      darksalmon: 'e9967a',\n      darkseagreen: '8fbc8f',\n      darkslateblue: '483d8b',\n      darkslategray: '2f4f4f',\n      darkturquoise: '00ced1',\n      darkviolet: '9400d3',\n      deeppink: 'ff1493',\n      deepskyblue: '00bfff',\n      dimgray: '696969',\n      dodgerblue: '1e90ff',\n      feldspar: 'd19275',\n      firebrick: 'b22222',\n      floralwhite: 'fffaf0',\n      forestgreen: '228b22',\n      fuchsia: 'ff00ff',\n      gainsboro: 'dcdcdc',\n      ghostwhite: 'f8f8ff',\n      gold: 'ffd700',\n      goldenrod: 'daa520',\n      gray: '808080',\n      green: '008000',\n      greenyellow: 'adff2f',\n      honeydew: 'f0fff0',\n      hotpink: 'ff69b4',\n      indianred: 'cd5c5c',\n      indigo: '4b0082',\n      ivory: 'fffff0',\n      khaki: 'f0e68c',\n      lavender: 'e6e6fa',\n      lavenderblush: 'fff0f5',\n      lawngreen: '7cfc00',\n      lemonchiffon: 'fffacd',\n      lightblue: 'add8e6',\n      lightcoral: 'f08080',\n      lightcyan: 'e0ffff',\n      lightgoldenrodyellow: 'fafad2',\n      lightgrey: 'd3d3d3',\n      lightgreen: '90ee90',\n      lightpink: 'ffb6c1',\n      lightsalmon: 'ffa07a',\n      lightseagreen: '20b2aa',\n      lightskyblue: '87cefa',\n      lightslateblue: '8470ff',\n      lightslategray: '778899',\n      lightsteelblue: 'b0c4de',\n      lightyellow: 'ffffe0',\n      lime: '00ff00',\n      limegreen: '32cd32',\n      linen: 'faf0e6',\n      magenta: 'ff00ff',\n      maroon: '800000',\n      mediumaquamarine: '66cdaa',\n      mediumblue: '0000cd',\n      mediumorchid: 'ba55d3',\n      mediumpurple: '9370d8',\n      mediumseagreen: '3cb371',\n      mediumslateblue: '7b68ee',\n      mediumspringgreen: '00fa9a',\n      mediumturquoise: '48d1cc',\n      mediumvioletred: 'c71585',\n      midnightblue: '191970',\n      mintcream: 'f5fffa',\n      mistyrose: 'ffe4e1',\n      moccasin: 'ffe4b5',\n      navajowhite: 'ffdead',\n      navy: '000080',\n      oldlace: 'fdf5e6',\n      olive: '808000',\n      olivedrab: '6b8e23',\n      orange: 'ffa500',\n      orangered: 'ff4500',\n      orchid: 'da70d6',\n      palegoldenrod: 'eee8aa',\n      palegreen: '98fb98',\n      paleturquoise: 'afeeee',\n      palevioletred: 'd87093',\n      papayawhip: 'ffefd5',\n      peachpuff: 'ffdab9',\n      peru: 'cd853f',\n      pink: 'ffc0cb',\n      plum: 'dda0dd',\n      powderblue: 'b0e0e6',\n      purple: '800080',\n      red: 'ff0000',\n      rosybrown: 'bc8f8f',\n      royalblue: '4169e1',\n      saddlebrown: '8b4513',\n      salmon: 'fa8072',\n      sandybrown: 'f4a460',\n      seagreen: '2e8b57',\n      seashell: 'fff5ee',\n      sienna: 'a0522d',\n      silver: 'c0c0c0',\n      skyblue: '87ceeb',\n      slateblue: '6a5acd',\n      slategray: '708090',\n      snow: 'fffafa',\n      springgreen: '00ff7f',\n      steelblue: '4682b4',\n      tan: 'd2b48c',\n      teal: '008080',\n      thistle: 'd8bfd8',\n      tomato: 'ff6347',\n      turquoise: '40e0d0',\n      violet: 'ee82ee',\n      violetred: 'd02090',\n      wheat: 'f5deb3',\n      white: 'ffffff',\n      whitesmoke: 'f5f5f5',\n      yellow: 'ffff00',\n      yellowgreen: '9acd32'\n    };\n\n    for (var key in simple_colors) {\n      if (color_string == key) {\n        color_string = simple_colors[key];\n      }\n    } // emd of simple type-in colors\n    // array of color definition objects\n\n\n    var color_defs = [{\n      re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n      example: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],\n      process: function process(bits) {\n        return [parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3])];\n      }\n    }, {\n      re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n      example: ['#00ff00', '336699'],\n      process: function process(bits) {\n        return [parseInt(bits[1], 16), parseInt(bits[2], 16), parseInt(bits[3], 16)];\n      }\n    }, {\n      re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n      example: ['#fb0', 'f0f'],\n      process: function process(bits) {\n        return [parseInt(bits[1] + bits[1], 16), parseInt(bits[2] + bits[2], 16), parseInt(bits[3] + bits[3], 16)];\n      }\n    }]; // search through the definitions to find a match\n\n    for (var i = 0; i < color_defs.length; i++) {\n      var re = color_defs[i].re;\n      var processor = color_defs[i].process;\n      var bits = re.exec(color_string);\n\n      if (bits) {\n        channels = processor(bits);\n        this.r = channels[0];\n        this.g = channels[1];\n        this.b = channels[2];\n        this.ok = true;\n      }\n    } // validate/cleanup values\n\n\n    this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r;\n    this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g;\n    this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b; // some getters\n\n    this.toRGB = function () {\n      return 'rgb(' + this.r + ', ' + this.g + ', ' + this.b + ')';\n    };\n\n    this.toHex = function () {\n      var r = this.r.toString(16);\n      var g = this.g.toString(16);\n      var b = this.b.toString(16);\n      if (r.length == 1) r = '0' + r;\n      if (g.length == 1) g = '0' + g;\n      if (b.length == 1) b = '0' + b;\n      return '#' + r + g + b;\n    };\n  }\n\n  global.RGBColor = RGBColor;\n})(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || Function('return typeof this === \"object\" && this.content')() || Function('return this')()); // `self` is undefined in Firefox for Android content script context\n// while `this` is nsIContentFrameMessageManager\n// with an attribute `content` that corresponds to the window\n\n/************************************************\n * Title : custom font                          *\n * Start Data : 2017. 01. 22.                   *\n * Comment : TEXT API                           *\n ************************************************/\n\n/******************************\n * jsPDF extension API Design *\n * ****************************/\n(function (jsPDF) {\n\n  var PLUS = '+'.charCodeAt(0);\n  var SLASH = '/'.charCodeAt(0);\n  var NUMBER = '0'.charCodeAt(0);\n  var LOWER = 'a'.charCodeAt(0);\n  var UPPER = 'A'.charCodeAt(0);\n  var PLUS_URL_SAFE = '-'.charCodeAt(0);\n  var SLASH_URL_SAFE = '_'.charCodeAt(0);\n  /*****************************************************************/\n\n  /* function : b64ToByteArray                                     */\n\n  /* comment : Base64 encoded TTF file contents (b64) are decoded  */\n\n  /*     by Byte array and stored.                                 */\n\n  /*****************************************************************/\n\n  var b64ToByteArray = function b64ToByteArray(b64) {\n    var i, j, l, tmp, placeHolders, arr;\n\n    if (b64.length % 4 > 0) {\n      throw new Error('Invalid string. Length must be a multiple of 4');\n    } // the number of equal signs (place holders)\n    // if there are two placeholders, than the two characters before it\n    // represent one byte\n    // if there is only one, then the three characters before it represent 2 bytes\n    // this is just a cheap hack to not do indexOf twice\n\n\n    var len = b64.length;\n    placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0; // base64 is 4/3 + up to two characters of the original data\n\n    arr = new Uint8Array(b64.length * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars\n\n    l = placeHolders > 0 ? b64.length - 4 : b64.length;\n    var L = 0;\n\n    function push(v) {\n      arr[L++] = v;\n    }\n\n    for (i = 0, j = 0; i < l; i += 4, j += 3) {\n      tmp = decode(b64.charAt(i)) << 18 | decode(b64.charAt(i + 1)) << 12 | decode(b64.charAt(i + 2)) << 6 | decode(b64.charAt(i + 3));\n      push((tmp & 0xFF0000) >> 16);\n      push((tmp & 0xFF00) >> 8);\n      push(tmp & 0xFF);\n    }\n\n    if (placeHolders === 2) {\n      tmp = decode(b64.charAt(i)) << 2 | decode(b64.charAt(i + 1)) >> 4;\n      push(tmp & 0xFF);\n    } else if (placeHolders === 1) {\n      tmp = decode(b64.charAt(i)) << 10 | decode(b64.charAt(i + 1)) << 4 | decode(b64.charAt(i + 2)) >> 2;\n      push(tmp >> 8 & 0xFF);\n      push(tmp & 0xFF);\n    }\n\n    return arr;\n  };\n  /***************************************************************/\n\n  /* function : decode                                           */\n\n  /* comment : Change the base64 encoded font's content to match */\n\n  /*   the base64 index value.                                   */\n\n  /***************************************************************/\n\n\n  var decode = function decode(elt) {\n    var code = elt.charCodeAt(0);\n    if (code === PLUS || code === PLUS_URL_SAFE) return 62; // '+'\n\n    if (code === SLASH || code === SLASH_URL_SAFE) return 63; // '/'\n\n    if (code < NUMBER) return -1; //no match\n\n    if (code < NUMBER + 10) return code - NUMBER + 26 + 26;\n    if (code < UPPER + 26) return code - UPPER;\n    if (code < LOWER + 26) return code - LOWER + 26;\n  };\n\n  jsPDF.API.TTFFont = function () {\n    /************************************************************************/\n\n    /* function : open                                                       */\n\n    /* comment : Decode the encoded ttf content and create a TTFFont object. */\n\n    /************************************************************************/\n    TTFFont.open = function (filename, name, vfs, encoding) {\n      var contents;\n\n      if (typeof vfs !== \"string\") {\n        throw new Error('Invalid argument supplied in TTFFont.open');\n      }\n\n      contents = b64ToByteArray(vfs);\n      return new TTFFont(contents, name, encoding);\n    };\n    /***************************************************************/\n\n    /* function : TTFFont gernerator                               */\n\n    /* comment : Decode TTF contents are parsed, Data,             */\n\n    /* Subset object is created, and registerTTF function is called.*/\n\n    /***************************************************************/\n\n\n    function TTFFont(rawData, name, encoding) {\n      var data;\n\n      this.rawData = rawData;\n      data = this.contents = new Data(rawData);\n      this.contents.pos = 4;\n\n      if (data.readString(4) === 'ttcf') {\n        if (!name) {\n          throw new Error(\"Must specify a font name for TTC files.\");\n        }\n        throw new Error(\"Font \" + name + \" not found in TTC file.\");\n      } else {\n        data.pos = 0;\n        this.parse();\n        this.subset = new Subset(this);\n        this.registerTTF();\n      }\n    }\n    /********************************************************/\n\n    /* function : parse                                     */\n\n    /* comment : TTF Parses the file contents by each table.*/\n\n    /********************************************************/\n\n\n    TTFFont.prototype.parse = function () {\n      this.directory = new Directory(this.contents);\n      this.head = new HeadTable(this);\n      this.name = new NameTable(this);\n      this.cmap = new CmapTable(this);\n      this.toUnicode = new Map();\n      this.hhea = new HheaTable(this);\n      this.maxp = new MaxpTable(this);\n      this.hmtx = new HmtxTable(this);\n      this.post = new PostTable(this);\n      this.os2 = new OS2Table(this);\n      this.loca = new LocaTable(this);\n      this.glyf = new GlyfTable(this);\n      this.ascender = this.os2.exists && this.os2.ascender || this.hhea.ascender;\n      this.decender = this.os2.exists && this.os2.decender || this.hhea.decender;\n      this.lineGap = this.os2.exists && this.os2.lineGap || this.hhea.lineGap;\n      return this.bbox = [this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax];\n    };\n    /***************************************************************/\n\n    /* function : registerTTF                                      */\n\n    /* comment : Get the value to assign pdf font descriptors.     */\n\n    /***************************************************************/\n\n\n    TTFFont.prototype.registerTTF = function () {\n      var e, hi, low, raw, _ref;\n\n      this.scaleFactor = 1000.0 / this.head.unitsPerEm;\n\n      this.bbox = function () {\n        var _i, _len, _ref, _results;\n\n        _ref = this.bbox;\n        _results = [];\n\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          e = _ref[_i];\n\n          _results.push(Math.round(e * this.scaleFactor));\n        }\n\n        return _results;\n      }.call(this);\n\n      this.stemV = 0;\n\n      if (this.post.exists) {\n        raw = this.post.italic_angle;\n        hi = raw >> 16;\n        low = raw & 0xFF;\n\n        if (hi & 0x8000 !== 0) {\n          hi = -((hi ^ 0xFFFF) + 1);\n        }\n\n        this.italicAngle = +(\"\" + hi + \".\" + low);\n      } else {\n        this.italicAngle = 0;\n      }\n\n      this.ascender = Math.round(this.ascender * this.scaleFactor);\n      this.decender = Math.round(this.decender * this.scaleFactor);\n      this.lineGap = Math.round(this.lineGap * this.scaleFactor);\n      this.capHeight = this.os2.exists && this.os2.capHeight || this.ascender;\n      this.xHeight = this.os2.exists && this.os2.xHeight || 0;\n      this.familyClass = (this.os2.exists && this.os2.familyClass || 0) >> 8;\n      this.isSerif = (_ref = this.familyClass) === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7;\n      this.isScript = this.familyClass === 10;\n      this.flags = 0;\n\n      if (this.post.isFixedPitch) {\n        this.flags |= 1 << 0;\n      }\n\n      if (this.isSerif) {\n        this.flags |= 1 << 1;\n      }\n\n      if (this.isScript) {\n        this.flags |= 1 << 3;\n      }\n\n      if (this.italicAngle !== 0) {\n        this.flags |= 1 << 6;\n      }\n\n      this.flags |= 1 << 5;\n\n      if (!this.cmap.unicode) {\n        throw new Error('No unicode cmap for font');\n      }\n    };\n\n    TTFFont.prototype.characterToGlyph = function (character) {\n      var _ref;\n\n      return ((_ref = this.cmap.unicode) != null ? _ref.codeMap[character] : void 0) || 0;\n    };\n\n    TTFFont.prototype.widthOfGlyph = function (glyph) {\n      var scale;\n      scale = 1000.0 / this.head.unitsPerEm;\n      return this.hmtx.forGlyph(glyph).advance * scale;\n    };\n\n    TTFFont.prototype.widthOfString = function (string, size, charSpace) {\n      var charCode, i, scale, width, _i, _ref, charSpace;\n\n      string = '' + string;\n      width = 0;\n\n      for (i = _i = 0, _ref = string.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n        charCode = string.charCodeAt(i);\n        width += this.widthOfGlyph(this.characterToGlyph(charCode)) + charSpace * (1000 / size) || 0;\n      }\n\n      scale = size / 1000;\n      return width * scale;\n    };\n\n    TTFFont.prototype.lineHeight = function (size, includeGap) {\n      var gap;\n\n      if (includeGap == null) {\n        includeGap = false;\n      }\n\n      gap = includeGap ? this.lineGap : 0;\n      return (this.ascender + gap - this.decender) / 1000 * size;\n    };\n\n    return TTFFont;\n  }();\n  /************************************************************************************************/\n\n  /* function : Data                                                                              */\n\n  /* comment : The ttf data decoded and stored in an array is read and written to the Data object.*/\n\n  /************************************************************************************************/\n\n\n  var Data = function () {\n    function Data(data) {\n      this.data = data != null ? data : [];\n      this.pos = 0;\n      this.length = this.data.length;\n    }\n\n    Data.prototype.readByte = function () {\n      return this.data[this.pos++];\n    };\n\n    Data.prototype.writeByte = function (byte) {\n      return this.data[this.pos++] = byte;\n    };\n\n    Data.prototype.readUInt32 = function () {\n      var b1, b2, b3, b4;\n      b1 = this.readByte() * 0x1000000;\n      b2 = this.readByte() << 16;\n      b3 = this.readByte() << 8;\n      b4 = this.readByte();\n      return b1 + b2 + b3 + b4;\n    };\n\n    Data.prototype.writeUInt32 = function (val) {\n      this.writeByte(val >>> 24 & 0xff);\n      this.writeByte(val >> 16 & 0xff);\n      this.writeByte(val >> 8 & 0xff);\n      return this.writeByte(val & 0xff);\n    };\n\n    Data.prototype.readInt32 = function () {\n      var int;\n      int = this.readUInt32();\n\n      if (int >= 0x80000000) {\n        return int - 0x100000000;\n      } else {\n        return int;\n      }\n    };\n\n    Data.prototype.writeInt32 = function (val) {\n      if (val < 0) {\n        val += 0x100000000;\n      }\n\n      return this.writeUInt32(val);\n    };\n\n    Data.prototype.readUInt16 = function () {\n      var b1, b2;\n      b1 = this.readByte() << 8;\n      b2 = this.readByte();\n      return b1 | b2;\n    };\n\n    Data.prototype.writeUInt16 = function (val) {\n      this.writeByte(val >> 8 & 0xff);\n      return this.writeByte(val & 0xff);\n    };\n\n    Data.prototype.readInt16 = function () {\n      var int;\n      int = this.readUInt16();\n\n      if (int >= 0x8000) {\n        return int - 0x10000;\n      } else {\n        return int;\n      }\n    };\n\n    Data.prototype.writeInt16 = function (val) {\n      if (val < 0) {\n        val += 0x10000;\n      }\n\n      return this.writeUInt16(val);\n    };\n\n    Data.prototype.readString = function (length) {\n      var i, ret, _i;\n\n      ret = [];\n\n      for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {\n        ret[i] = String.fromCharCode(this.readByte());\n      }\n\n      return ret.join('');\n    };\n\n    Data.prototype.writeString = function (val) {\n      var i, _i, _ref, _results;\n\n      _results = [];\n\n      for (i = _i = 0, _ref = val.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n        _results.push(this.writeByte(val.charCodeAt(i)));\n      }\n\n      return _results;\n    };\n    /*Data.prototype.stringAt = function (pos, length) {\n        this.pos = pos;\n        return this.readString(length);\n    };*/\n\n\n    Data.prototype.readShort = function () {\n      return this.readInt16();\n    };\n\n    Data.prototype.writeShort = function (val) {\n      return this.writeInt16(val);\n    };\n\n    Data.prototype.readLongLong = function () {\n      var b1, b2, b3, b4, b5, b6, b7, b8;\n      b1 = this.readByte();\n      b2 = this.readByte();\n      b3 = this.readByte();\n      b4 = this.readByte();\n      b5 = this.readByte();\n      b6 = this.readByte();\n      b7 = this.readByte();\n      b8 = this.readByte();\n\n      if (b1 & 0x80) {\n        return ((b1 ^ 0xff) * 0x100000000000000 + (b2 ^ 0xff) * 0x1000000000000 + (b3 ^ 0xff) * 0x10000000000 + (b4 ^ 0xff) * 0x100000000 + (b5 ^ 0xff) * 0x1000000 + (b6 ^ 0xff) * 0x10000 + (b7 ^ 0xff) * 0x100 + (b8 ^ 0xff) + 1) * -1;\n      }\n\n      return b1 * 0x100000000000000 + b2 * 0x1000000000000 + b3 * 0x10000000000 + b4 * 0x100000000 + b5 * 0x1000000 + b6 * 0x10000 + b7 * 0x100 + b8;\n    };\n\n    Data.prototype.writeLongLong = function (val) {\n      var high, low;\n      high = Math.floor(val / 0x100000000);\n      low = val & 0xffffffff;\n      this.writeByte(high >> 24 & 0xff);\n      this.writeByte(high >> 16 & 0xff);\n      this.writeByte(high >> 8 & 0xff);\n      this.writeByte(high & 0xff);\n      this.writeByte(low >> 24 & 0xff);\n      this.writeByte(low >> 16 & 0xff);\n      this.writeByte(low >> 8 & 0xff);\n      return this.writeByte(low & 0xff);\n    };\n\n    Data.prototype.readInt = function () {\n      return this.readInt32();\n    };\n\n    Data.prototype.writeInt = function (val) {\n      return this.writeInt32(val);\n    };\n    /*Data.prototype.slice = function (start, end) {\n        return this.data.slice(start, end);\n    };*/\n\n\n    Data.prototype.read = function (bytes) {\n      var buf, i, _i;\n\n      buf = [];\n\n      for (i = _i = 0; 0 <= bytes ? _i < bytes : _i > bytes; i = 0 <= bytes ? ++_i : --_i) {\n        buf.push(this.readByte());\n      }\n\n      return buf;\n    };\n\n    Data.prototype.write = function (bytes) {\n      var byte, _i, _len, _results;\n\n      _results = [];\n\n      for (_i = 0, _len = bytes.length; _i < _len; _i++) {\n        byte = bytes[_i];\n\n        _results.push(this.writeByte(byte));\n      }\n\n      return _results;\n    };\n\n    return Data;\n  }();\n\n  var Directory = function () {\n    var checksum;\n    /*****************************************************************************************************/\n\n    /* function : Directory generator                                                                    */\n\n    /* comment : Initialize the offset, tag, length, and checksum for each table for the font to be used.*/\n\n    /*****************************************************************************************************/\n\n    function Directory(data) {\n      var entry, i, _i, _ref;\n\n      this.scalarType = data.readInt();\n      this.tableCount = data.readShort();\n      this.searchRange = data.readShort();\n      this.entrySelector = data.readShort();\n      this.rangeShift = data.readShort();\n      this.tables = {};\n\n      for (i = _i = 0, _ref = this.tableCount; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n        entry = {\n          tag: data.readString(4),\n          checksum: data.readInt(),\n          offset: data.readInt(),\n          length: data.readInt()\n        };\n        this.tables[entry.tag] = entry;\n      }\n    }\n    /********************************************************************************************************/\n\n    /* function : encode                                                                                    */\n\n    /* comment : It encodes and stores the font table object and information used for the directory object. */\n\n    /********************************************************************************************************/\n\n\n    Directory.prototype.encode = function (tables) {\n      var adjustment, directory, directoryLength, entrySelector, headOffset, log2, offset, rangeShift, searchRange, sum, table, tableCount, tableData, tag;\n      tableCount = Object.keys(tables).length;\n      log2 = Math.log(2);\n      searchRange = Math.floor(Math.log(tableCount) / log2) * 16;\n      entrySelector = Math.floor(searchRange / log2);\n      rangeShift = tableCount * 16 - searchRange;\n      directory = new Data();\n      directory.writeInt(this.scalarType);\n      directory.writeShort(tableCount);\n      directory.writeShort(searchRange);\n      directory.writeShort(entrySelector);\n      directory.writeShort(rangeShift);\n      directoryLength = tableCount * 16;\n      offset = directory.pos + directoryLength;\n      headOffset = null;\n      tableData = [];\n\n      for (tag in tables) {\n        table = tables[tag];\n        directory.writeString(tag);\n        directory.writeInt(checksum(table));\n        directory.writeInt(offset);\n        directory.writeInt(table.length);\n        tableData = tableData.concat(table);\n\n        if (tag === 'head') {\n          headOffset = offset;\n        }\n\n        offset += table.length;\n\n        while (offset % 4) {\n          tableData.push(0);\n          offset++;\n        }\n      }\n\n      directory.write(tableData);\n      sum = checksum(directory.data);\n      adjustment = 0xB1B0AFBA - sum;\n      directory.pos = headOffset + 8;\n      directory.writeUInt32(adjustment);\n      return directory.data;\n    };\n    /***************************************************************/\n\n    /* function : checksum                                         */\n\n    /* comment : Duplicate the table for the tag.                  */\n\n    /***************************************************************/\n\n\n    checksum = function checksum(data) {\n      var i, sum, tmp, _i, _ref;\n\n      data = __slice.call(data);\n\n      while (data.length % 4) {\n        data.push(0);\n      }\n\n      tmp = new Data(data);\n      sum = 0;\n\n      for (i = _i = 0, _ref = data.length; _i < _ref; i = _i += 4) {\n        sum += tmp.readUInt32();\n      }\n\n      return sum & 0xFFFFFFFF;\n    };\n\n    return Directory;\n  }();\n\n  var Table,\n      __hasProp = {}.hasOwnProperty,\n      __extends = function __extends(child, parent) {\n    for (var key in parent) {\n      if (__hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  };\n  /***************************************************************/\n\n  /* function : Table                                            */\n\n  /* comment : Save info for each table, and parse the table.    */\n\n  /***************************************************************/\n\n  Table = function () {\n    function Table(file) {\n      var info;\n      this.file = file;\n      info = this.file.directory.tables[this.tag];\n      this.exists = !!info;\n\n      if (info) {\n        this.offset = info.offset, this.length = info.length;\n        this.parse(this.file.contents);\n      }\n    }\n\n    Table.prototype.parse = function () {};\n\n    Table.prototype.encode = function () {};\n\n    Table.prototype.raw = function () {\n      if (!this.exists) {\n        return null;\n      }\n\n      this.file.contents.pos = this.offset;\n      return this.file.contents.read(this.length);\n    };\n\n    return Table;\n  }();\n\n  var HeadTable = function (_super) {\n    __extends(HeadTable, _super);\n\n    function HeadTable() {\n      return HeadTable.__super__.constructor.apply(this, arguments);\n    }\n\n    HeadTable.prototype.tag = 'head';\n\n    HeadTable.prototype.parse = function (data) {\n      data.pos = this.offset;\n      this.version = data.readInt();\n      this.revision = data.readInt();\n      this.checkSumAdjustment = data.readInt();\n      this.magicNumber = data.readInt();\n      this.flags = data.readShort();\n      this.unitsPerEm = data.readShort();\n      this.created = data.readLongLong();\n      this.modified = data.readLongLong();\n      this.xMin = data.readShort();\n      this.yMin = data.readShort();\n      this.xMax = data.readShort();\n      this.yMax = data.readShort();\n      this.macStyle = data.readShort();\n      this.lowestRecPPEM = data.readShort();\n      this.fontDirectionHint = data.readShort();\n      this.indexToLocFormat = data.readShort();\n      return this.glyphDataFormat = data.readShort();\n    };\n\n    HeadTable.prototype.encode = function (indexToLocFormat) {\n      var table;\n      table = new Data();\n      table.writeInt(this.version);\n      table.writeInt(this.revision);\n      table.writeInt(this.checkSumAdjustment);\n      table.writeInt(this.magicNumber);\n      table.writeShort(this.flags);\n      table.writeShort(this.unitsPerEm);\n      table.writeLongLong(this.created);\n      table.writeLongLong(this.modified);\n      table.writeShort(this.xMin);\n      table.writeShort(this.yMin);\n      table.writeShort(this.xMax);\n      table.writeShort(this.yMax);\n      table.writeShort(this.macStyle);\n      table.writeShort(this.lowestRecPPEM);\n      table.writeShort(this.fontDirectionHint);\n      table.writeShort(indexToLocFormat);\n      table.writeShort(this.glyphDataFormat);\n      return table.data;\n    };\n\n    return HeadTable;\n  }(Table);\n  /************************************************************************************/\n\n  /* function : CmapEntry                                                             */\n\n  /* comment : Cmap Initializes and encodes object information (required by pdf spec).*/\n\n  /************************************************************************************/\n\n\n  var CmapEntry = function () {\n    function CmapEntry(data, offset) {\n      var code, count, endCode, glyphId, glyphIds, i, idDelta, idRangeOffset, index, saveOffset, segCount, segCountX2, start, startCode, tail, _i, _j, _k, _len;\n\n      this.platformID = data.readUInt16();\n      this.encodingID = data.readShort();\n      this.offset = offset + data.readInt();\n      saveOffset = data.pos;\n      data.pos = this.offset;\n      this.format = data.readUInt16();\n      this.length = data.readUInt16();\n      this.language = data.readUInt16();\n      this.isUnicode = this.platformID === 3 && this.encodingID === 1 && this.format === 4 || this.platformID === 0 && this.format === 4;\n      this.codeMap = {};\n\n      switch (this.format) {\n        case 0:\n          for (i = _i = 0; _i < 256; i = ++_i) {\n            this.codeMap[i] = data.readByte();\n          }\n\n          break;\n\n        case 4:\n          segCountX2 = data.readUInt16();\n          segCount = segCountX2 / 2;\n          data.pos += 6;\n\n          endCode = function () {\n            var _j, _results;\n\n            _results = [];\n\n            for (i = _j = 0; 0 <= segCount ? _j < segCount : _j > segCount; i = 0 <= segCount ? ++_j : --_j) {\n              _results.push(data.readUInt16());\n            }\n\n            return _results;\n          }();\n\n          data.pos += 2;\n\n          startCode = function () {\n            var _j, _results;\n\n            _results = [];\n\n            for (i = _j = 0; 0 <= segCount ? _j < segCount : _j > segCount; i = 0 <= segCount ? ++_j : --_j) {\n              _results.push(data.readUInt16());\n            }\n\n            return _results;\n          }();\n\n          idDelta = function () {\n            var _j, _results;\n\n            _results = [];\n\n            for (i = _j = 0; 0 <= segCount ? _j < segCount : _j > segCount; i = 0 <= segCount ? ++_j : --_j) {\n              _results.push(data.readUInt16());\n            }\n\n            return _results;\n          }();\n\n          idRangeOffset = function () {\n            var _j, _results;\n\n            _results = [];\n\n            for (i = _j = 0; 0 <= segCount ? _j < segCount : _j > segCount; i = 0 <= segCount ? ++_j : --_j) {\n              _results.push(data.readUInt16());\n            }\n\n            return _results;\n          }();\n\n          count = (this.length - data.pos + this.offset) / 2;\n\n          glyphIds = function () {\n            var _j, _results;\n\n            _results = [];\n\n            for (i = _j = 0; 0 <= count ? _j < count : _j > count; i = 0 <= count ? ++_j : --_j) {\n              _results.push(data.readUInt16());\n            }\n\n            return _results;\n          }();\n\n          for (i = _j = 0, _len = endCode.length; _j < _len; i = ++_j) {\n            tail = endCode[i];\n            start = startCode[i];\n\n            for (code = _k = start; start <= tail ? _k <= tail : _k >= tail; code = start <= tail ? ++_k : --_k) {\n              if (idRangeOffset[i] === 0) {\n                glyphId = code + idDelta[i];\n              } else {\n                index = idRangeOffset[i] / 2 + (code - start) - (segCount - i);\n                glyphId = glyphIds[index] || 0;\n\n                if (glyphId !== 0) {\n                  glyphId += idDelta[i];\n                }\n              }\n\n              this.codeMap[code] = glyphId & 0xFFFF;\n            }\n          }\n\n      }\n\n      data.pos = saveOffset;\n    }\n\n    CmapEntry.encode = function (charmap, encoding) {\n      var charMap, code, codeMap, codes, delta, deltas, diff, endCode, endCodes, entrySelector, glyphIDs, i, id, indexes, last, map, nextID, offset, old, rangeOffsets, rangeShift, result, searchRange, segCount, segCountX2, startCode, startCodes, startGlyph, subtable, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _name, _o, _p, _q;\n\n      subtable = new Data();\n      codes = Object.keys(charmap).sort(function (a, b) {\n        return a - b;\n      });\n\n      switch (encoding) {\n        case 'macroman':\n          id = 0;\n\n          indexes = function () {\n            var _i, _results;\n\n            _results = [];\n\n            for (i = _i = 0; _i < 256; i = ++_i) {\n              _results.push(0);\n            }\n\n            return _results;\n          }();\n\n          map = {\n            0: 0\n          };\n          codeMap = {};\n\n          for (_i = 0, _len = codes.length; _i < _len; _i++) {\n            code = codes[_i];\n\n            if (map[_name = charmap[code]] == null) {\n              map[_name] = ++id;\n            }\n\n            codeMap[code] = {\n              old: charmap[code],\n              \"new\": map[charmap[code]]\n            };\n            indexes[code] = map[charmap[code]];\n          }\n\n          subtable.writeUInt16(1);\n          subtable.writeUInt16(0);\n          subtable.writeUInt32(12);\n          subtable.writeUInt16(0);\n          subtable.writeUInt16(262);\n          subtable.writeUInt16(0);\n          subtable.write(indexes);\n          return result = {\n            charMap: codeMap,\n            subtable: subtable.data,\n            maxGlyphID: id + 1\n          };\n\n        case 'unicode':\n          startCodes = [];\n          endCodes = [];\n          nextID = 0;\n          map = {};\n          charMap = {};\n          last = diff = null;\n\n          for (_j = 0, _len1 = codes.length; _j < _len1; _j++) {\n            code = codes[_j];\n            old = charmap[code];\n\n            if (map[old] == null) {\n              map[old] = ++nextID;\n            }\n\n            charMap[code] = {\n              old: old,\n              \"new\": map[old]\n            };\n            delta = map[old] - code;\n\n            if (last == null || delta !== diff) {\n              if (last) {\n                endCodes.push(last);\n              }\n\n              startCodes.push(code);\n              diff = delta;\n            }\n\n            last = code;\n          }\n\n          if (last) {\n            endCodes.push(last);\n          }\n\n          endCodes.push(0xFFFF);\n          startCodes.push(0xFFFF);\n          segCount = startCodes.length;\n          segCountX2 = segCount * 2;\n          searchRange = 2 * Math.pow(Math.log(segCount) / Math.LN2, 2);\n          entrySelector = Math.log(searchRange / 2) / Math.LN2;\n          rangeShift = 2 * segCount - searchRange;\n          deltas = [];\n          rangeOffsets = [];\n          glyphIDs = [];\n\n          for (i = _k = 0, _len2 = startCodes.length; _k < _len2; i = ++_k) {\n            startCode = startCodes[i];\n            endCode = endCodes[i];\n\n            if (startCode === 0xFFFF) {\n              deltas.push(0);\n              rangeOffsets.push(0);\n              break;\n            }\n\n            startGlyph = charMap[startCode][\"new\"];\n\n            if (startCode - startGlyph >= 0x8000) {\n              deltas.push(0);\n              rangeOffsets.push(2 * (glyphIDs.length + segCount - i));\n\n              for (code = _l = startCode; startCode <= endCode ? _l <= endCode : _l >= endCode; code = startCode <= endCode ? ++_l : --_l) {\n                glyphIDs.push(charMap[code][\"new\"]);\n              }\n            } else {\n              deltas.push(startGlyph - startCode);\n              rangeOffsets.push(0);\n            }\n          }\n\n          subtable.writeUInt16(3);\n          subtable.writeUInt16(1);\n          subtable.writeUInt32(12);\n          subtable.writeUInt16(4);\n          subtable.writeUInt16(16 + segCount * 8 + glyphIDs.length * 2);\n          subtable.writeUInt16(0);\n          subtable.writeUInt16(segCountX2);\n          subtable.writeUInt16(searchRange);\n          subtable.writeUInt16(entrySelector);\n          subtable.writeUInt16(rangeShift);\n\n          for (_m = 0, _len3 = endCodes.length; _m < _len3; _m++) {\n            code = endCodes[_m];\n            subtable.writeUInt16(code);\n          }\n\n          subtable.writeUInt16(0);\n\n          for (_n = 0, _len4 = startCodes.length; _n < _len4; _n++) {\n            code = startCodes[_n];\n            subtable.writeUInt16(code);\n          }\n\n          for (_o = 0, _len5 = deltas.length; _o < _len5; _o++) {\n            delta = deltas[_o];\n            subtable.writeUInt16(delta);\n          }\n\n          for (_p = 0, _len6 = rangeOffsets.length; _p < _len6; _p++) {\n            offset = rangeOffsets[_p];\n            subtable.writeUInt16(offset);\n          }\n\n          for (_q = 0, _len7 = glyphIDs.length; _q < _len7; _q++) {\n            id = glyphIDs[_q];\n            subtable.writeUInt16(id);\n          }\n\n          return result = {\n            charMap: charMap,\n            subtable: subtable.data,\n            maxGlyphID: nextID + 1\n          };\n      }\n    };\n\n    return CmapEntry;\n  }();\n\n  var CmapTable = function (_super) {\n    __extends(CmapTable, _super);\n\n    function CmapTable() {\n      return CmapTable.__super__.constructor.apply(this, arguments);\n    }\n\n    CmapTable.prototype.tag = 'cmap';\n\n    CmapTable.prototype.parse = function (data) {\n      var entry, i, tableCount, _i;\n\n      data.pos = this.offset;\n      this.version = data.readUInt16();\n      tableCount = data.readUInt16();\n      this.tables = [];\n      this.unicode = null;\n\n      for (i = _i = 0; 0 <= tableCount ? _i < tableCount : _i > tableCount; i = 0 <= tableCount ? ++_i : --_i) {\n        entry = new CmapEntry(data, this.offset);\n        this.tables.push(entry);\n\n        if (entry.isUnicode) {\n          if (this.unicode == null) {\n            this.unicode = entry;\n          }\n        }\n      }\n\n      return true;\n    };\n    /*************************************************************************/\n\n    /* function : encode                                                     */\n\n    /* comment : Encode the cmap table corresponding to the input character. */\n\n    /*************************************************************************/\n\n\n    CmapTable.encode = function (charmap, encoding) {\n      var result, table;\n\n      if (encoding == null) {\n        encoding = 'macroman';\n      }\n\n      result = CmapEntry.encode(charmap, encoding);\n      table = new Data();\n      table.writeUInt16(0);\n      table.writeUInt16(1);\n      result.table = table.data.concat(result.subtable);\n      return result;\n    };\n\n    return CmapTable;\n  }(Table);\n\n  var HheaTable = function (_super) {\n    __extends(HheaTable, _super);\n\n    function HheaTable() {\n      return HheaTable.__super__.constructor.apply(this, arguments);\n    }\n\n    HheaTable.prototype.tag = 'hhea';\n\n    HheaTable.prototype.parse = function (data) {\n      data.pos = this.offset;\n      this.version = data.readInt();\n      this.ascender = data.readShort();\n      this.decender = data.readShort();\n      this.lineGap = data.readShort();\n      this.advanceWidthMax = data.readShort();\n      this.minLeftSideBearing = data.readShort();\n      this.minRightSideBearing = data.readShort();\n      this.xMaxExtent = data.readShort();\n      this.caretSlopeRise = data.readShort();\n      this.caretSlopeRun = data.readShort();\n      this.caretOffset = data.readShort();\n      data.pos += 4 * 2;\n      this.metricDataFormat = data.readShort();\n      return this.numberOfMetrics = data.readUInt16();\n    };\n    /*HheaTable.prototype.encode = function (ids) {\n        var i, table, _i, _ref;\n        table = new Data;\n        table.writeInt(this.version);\n        table.writeShort(this.ascender);\n        table.writeShort(this.decender);\n        table.writeShort(this.lineGap);\n        table.writeShort(this.advanceWidthMax);\n        table.writeShort(this.minLeftSideBearing);\n        table.writeShort(this.minRightSideBearing);\n        table.writeShort(this.xMaxExtent);\n        table.writeShort(this.caretSlopeRise);\n        table.writeShort(this.caretSlopeRun);\n        table.writeShort(this.caretOffset);\n        for (i = _i = 0, _ref = 4 * 2; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n            table.writeByte(0);\n        }\n        table.writeShort(this.metricDataFormat);\n        table.writeUInt16(ids.length);\n        return table.data;\n    };*/\n\n\n    return HheaTable;\n  }(Table);\n\n  var OS2Table = function (_super) {\n    __extends(OS2Table, _super);\n\n    function OS2Table() {\n      return OS2Table.__super__.constructor.apply(this, arguments);\n    }\n\n    OS2Table.prototype.tag = 'OS/2';\n\n    OS2Table.prototype.parse = function (data) {\n      var i;\n      data.pos = this.offset;\n      this.version = data.readUInt16();\n      this.averageCharWidth = data.readShort();\n      this.weightClass = data.readUInt16();\n      this.widthClass = data.readUInt16();\n      this.type = data.readShort();\n      this.ySubscriptXSize = data.readShort();\n      this.ySubscriptYSize = data.readShort();\n      this.ySubscriptXOffset = data.readShort();\n      this.ySubscriptYOffset = data.readShort();\n      this.ySuperscriptXSize = data.readShort();\n      this.ySuperscriptYSize = data.readShort();\n      this.ySuperscriptXOffset = data.readShort();\n      this.ySuperscriptYOffset = data.readShort();\n      this.yStrikeoutSize = data.readShort();\n      this.yStrikeoutPosition = data.readShort();\n      this.familyClass = data.readShort();\n\n      this.panose = function () {\n        var _i, _results;\n\n        _results = [];\n\n        for (i = _i = 0; _i < 10; i = ++_i) {\n          _results.push(data.readByte());\n        }\n\n        return _results;\n      }();\n\n      this.charRange = function () {\n        var _i, _results;\n\n        _results = [];\n\n        for (i = _i = 0; _i < 4; i = ++_i) {\n          _results.push(data.readInt());\n        }\n\n        return _results;\n      }();\n\n      this.vendorID = data.readString(4);\n      this.selection = data.readShort();\n      this.firstCharIndex = data.readShort();\n      this.lastCharIndex = data.readShort();\n\n      if (this.version > 0) {\n        this.ascent = data.readShort();\n        this.descent = data.readShort();\n        this.lineGap = data.readShort();\n        this.winAscent = data.readShort();\n        this.winDescent = data.readShort();\n\n        this.codePageRange = function () {\n          var _i, _results;\n\n          _results = [];\n\n          for (i = _i = 0; _i < 2; i = ++_i) {\n            _results.push(data.readInt());\n          }\n\n          return _results;\n        }();\n\n        if (this.version > 1) {\n          this.xHeight = data.readShort();\n          this.capHeight = data.readShort();\n          this.defaultChar = data.readShort();\n          this.breakChar = data.readShort();\n          return this.maxContext = data.readShort();\n        }\n      }\n    };\n    /*OS2Table.prototype.encode = function () {\n        return this.raw();\n    };*/\n\n\n    return OS2Table;\n  }(Table);\n\n  var PostTable = function (_super) {\n\n    __extends(PostTable, _super);\n\n    function PostTable() {\n      return PostTable.__super__.constructor.apply(this, arguments);\n    }\n\n    PostTable.prototype.tag = 'post';\n\n    PostTable.prototype.parse = function (data) {\n      var i, length, numberOfGlyphs, _i, _results;\n\n      data.pos = this.offset;\n      this.format = data.readInt();\n      this.italicAngle = data.readInt();\n      this.underlinePosition = data.readShort();\n      this.underlineThickness = data.readShort();\n      this.isFixedPitch = data.readInt();\n      this.minMemType42 = data.readInt();\n      this.maxMemType42 = data.readInt();\n      this.minMemType1 = data.readInt();\n      this.maxMemType1 = data.readInt();\n\n      switch (this.format) {\n        case 0x00010000:\n          break;\n\n        case 0x00020000:\n          numberOfGlyphs = data.readUInt16();\n          this.glyphNameIndex = [];\n\n          for (i = _i = 0; 0 <= numberOfGlyphs ? _i < numberOfGlyphs : _i > numberOfGlyphs; i = 0 <= numberOfGlyphs ? ++_i : --_i) {\n            this.glyphNameIndex.push(data.readUInt16());\n          }\n\n          this.names = [];\n          _results = [];\n\n          while (data.pos < this.offset + this.length) {\n            length = data.readByte();\n\n            _results.push(this.names.push(data.readString(length)));\n          }\n\n          return _results;\n          break;\n\n        case 0x00025000:\n          numberOfGlyphs = data.readUInt16();\n          return this.offsets = data.read(numberOfGlyphs);\n\n        case 0x00030000:\n          break;\n\n        case 0x00040000:\n          return this.map = function () {\n            var _j, _ref, _results1;\n\n            _results1 = [];\n\n            for (i = _j = 0, _ref = this.file.maxp.numGlyphs; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {\n              _results1.push(data.readUInt32());\n            }\n\n            return _results1;\n          }.call(this);\n      }\n    };\n    return PostTable;\n  }(Table);\n  /*********************************************************************************************************/\n\n  /* function : NameEntry                                                                                  */\n\n  /* comment : Store copyright information, platformID, encodingID, and languageID in the NameEntry object.*/\n\n  /*********************************************************************************************************/\n\n\n  var NameEntry = function () {\n    function NameEntry(raw, entry) {\n      this.raw = raw;\n      this.length = raw.length;\n      this.platformID = entry.platformID;\n      this.encodingID = entry.encodingID;\n      this.languageID = entry.languageID;\n    }\n\n    return NameEntry;\n  }();\n\n  var NameTable = function (_super) {\n\n    __extends(NameTable, _super);\n\n    function NameTable() {\n      return NameTable.__super__.constructor.apply(this, arguments);\n    }\n\n    NameTable.prototype.tag = 'name';\n\n    NameTable.prototype.parse = function (data) {\n      var count, entries, entry, format, i, name, stringOffset, strings, text, _i, _j, _len, _name;\n\n      data.pos = this.offset;\n      format = data.readShort();\n      count = data.readShort();\n      stringOffset = data.readShort();\n      entries = [];\n\n      for (i = _i = 0; 0 <= count ? _i < count : _i > count; i = 0 <= count ? ++_i : --_i) {\n        entries.push({\n          platformID: data.readShort(),\n          encodingID: data.readShort(),\n          languageID: data.readShort(),\n          nameID: data.readShort(),\n          length: data.readShort(),\n          offset: this.offset + stringOffset + data.readShort()\n        });\n      }\n\n      strings = {};\n\n      for (i = _j = 0, _len = entries.length; _j < _len; i = ++_j) {\n        entry = entries[i];\n        data.pos = entry.offset;\n        text = data.readString(entry.length);\n        name = new NameEntry(text, entry);\n\n        if (strings[_name = entry.nameID] == null) {\n          strings[_name] = [];\n        }\n\n        strings[entry.nameID].push(name);\n      }\n\n      this.strings = strings;\n      this.copyright = strings[0];\n      this.fontFamily = strings[1];\n      this.fontSubfamily = strings[2];\n      this.uniqueSubfamily = strings[3];\n      this.fontName = strings[4];\n      this.version = strings[5];\n\n      try {\n        this.postscriptName = strings[6][0].raw.replace(/[\\x00-\\x19\\x80-\\xff]/g, \"\");\n      } catch (e) {\n        this.postscriptName = strings[4][0].raw.replace(/[\\x00-\\x19\\x80-\\xff]/g, \"\");\n      }\n\n      this.trademark = strings[7];\n      this.manufacturer = strings[8];\n      this.designer = strings[9];\n      this.description = strings[10];\n      this.vendorUrl = strings[11];\n      this.designerUrl = strings[12];\n      this.license = strings[13];\n      this.licenseUrl = strings[14];\n      this.preferredFamily = strings[15];\n      this.preferredSubfamily = strings[17];\n      this.compatibleFull = strings[18];\n      return this.sampleText = strings[19];\n    };\n    /*NameTable.prototype.encode = function () {\n        var id, list, nameID, nameTable, postscriptName, strCount, strTable, string, strings, table, val, _i, _len, _ref;\n        strings = {};\n        _ref = this.strings;\n        for (id in _ref) {\n            val = _ref[id];\n            strings[id] = val;\n        }\n        postscriptName = new NameEntry(\"\" + subsetTag + \"+\" + this.postscriptName, {\n            platformID: 1\n            , encodingID: 0\n            , languageID: 0\n        });\n        strings[6] = [postscriptName];\n        subsetTag = successorOf(subsetTag);\n        strCount = 0;\n        for (id in strings) {\n            list = strings[id];\n            if (list != null) {\n                strCount += list.length;\n            }\n        }\n        table = new Data;\n        strTable = new Data;\n        table.writeShort(0);\n        table.writeShort(strCount);\n        table.writeShort(6 + 12 * strCount);\n        for (nameID in strings) {\n            list = strings[nameID];\n            if (list != null) {\n                for (_i = 0, _len = list.length; _i < _len; _i++) {\n                    string = list[_i];\n                    table.writeShort(string.platformID);\n                    table.writeShort(string.encodingID);\n                    table.writeShort(string.languageID);\n                    table.writeShort(nameID);\n                    table.writeShort(string.length);\n                    table.writeShort(strTable.pos);\n                    strTable.writeString(string.raw);\n                }\n            }\n        }\n        return nameTable = {\n            postscriptName: postscriptName.raw\n            , table: table.data.concat(strTable.data)\n        };\n    };*/\n\n    return NameTable;\n  }(Table);\n\n  var MaxpTable = function (_super) {\n    __extends(MaxpTable, _super);\n\n    function MaxpTable() {\n      return MaxpTable.__super__.constructor.apply(this, arguments);\n    }\n\n    MaxpTable.prototype.tag = 'maxp';\n\n    MaxpTable.prototype.parse = function (data) {\n      data.pos = this.offset;\n      this.version = data.readInt();\n      this.numGlyphs = data.readUInt16();\n      this.maxPoints = data.readUInt16();\n      this.maxContours = data.readUInt16();\n      this.maxCompositePoints = data.readUInt16();\n      this.maxComponentContours = data.readUInt16();\n      this.maxZones = data.readUInt16();\n      this.maxTwilightPoints = data.readUInt16();\n      this.maxStorage = data.readUInt16();\n      this.maxFunctionDefs = data.readUInt16();\n      this.maxInstructionDefs = data.readUInt16();\n      this.maxStackElements = data.readUInt16();\n      this.maxSizeOfInstructions = data.readUInt16();\n      this.maxComponentElements = data.readUInt16();\n      return this.maxComponentDepth = data.readUInt16();\n    };\n    /*MaxpTable.prototype.encode = function (ids) {\n        var table;\n        table = new Data;\n        table.writeInt(this.version);\n        table.writeUInt16(ids.length);\n        table.writeUInt16(this.maxPoints);\n        table.writeUInt16(this.maxContours);\n        table.writeUInt16(this.maxCompositePoints);\n        table.writeUInt16(this.maxComponentContours);\n        table.writeUInt16(this.maxZones);\n        table.writeUInt16(this.maxTwilightPoints);\n        table.writeUInt16(this.maxStorage);\n        table.writeUInt16(this.maxFunctionDefs);\n        table.writeUInt16(this.maxInstructionDefs);\n        table.writeUInt16(this.maxStackElements);\n        table.writeUInt16(this.maxSizeOfInstructions);\n        table.writeUInt16(this.maxComponentElements);\n        table.writeUInt16(this.maxComponentDepth);\n        return table.data;\n    };*/\n\n\n    return MaxpTable;\n  }(Table);\n\n  var HmtxTable = function (_super) {\n    __extends(HmtxTable, _super);\n\n    function HmtxTable() {\n      return HmtxTable.__super__.constructor.apply(this, arguments);\n    }\n\n    HmtxTable.prototype.tag = 'hmtx';\n\n    HmtxTable.prototype.parse = function (data) {\n      var i, last, lsbCount, m, _i, _j, _ref, _results;\n\n      data.pos = this.offset;\n      this.metrics = [];\n\n      for (i = _i = 0, _ref = this.file.hhea.numberOfMetrics; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n        this.metrics.push({\n          advance: data.readUInt16(),\n          lsb: data.readInt16()\n        });\n      }\n\n      lsbCount = this.file.maxp.numGlyphs - this.file.hhea.numberOfMetrics;\n\n      this.leftSideBearings = function () {\n        var _j, _results;\n\n        _results = [];\n\n        for (i = _j = 0; 0 <= lsbCount ? _j < lsbCount : _j > lsbCount; i = 0 <= lsbCount ? ++_j : --_j) {\n          _results.push(data.readInt16());\n        }\n\n        return _results;\n      }();\n\n      this.widths = function () {\n        var _j, _len, _ref1, _results;\n\n        _ref1 = this.metrics;\n        _results = [];\n\n        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {\n          m = _ref1[_j];\n\n          _results.push(m.advance);\n        }\n\n        return _results;\n      }.call(this);\n\n      last = this.widths[this.widths.length - 1];\n      _results = [];\n\n      for (i = _j = 0; 0 <= lsbCount ? _j < lsbCount : _j > lsbCount; i = 0 <= lsbCount ? ++_j : --_j) {\n        _results.push(this.widths.push(last));\n      }\n\n      return _results;\n    };\n    /***************************************************************/\n\n    /* function : forGlyph                                         */\n\n    /* comment : Returns the advance width and lsb for this glyph. */\n\n    /***************************************************************/\n\n\n    HmtxTable.prototype.forGlyph = function (id) {\n      var metrics;\n\n      if (id in this.metrics) {\n        return this.metrics[id];\n      }\n\n      return metrics = {\n        advance: this.metrics[this.metrics.length - 1].advance,\n        lsb: this.leftSideBearings[id - this.metrics.length]\n      };\n    };\n    /*HmtxTable.prototype.encode = function (mapping) {\n        var id, metric, table, _i, _len;\n        table = new Data;\n        for (_i = 0, _len = mapping.length; _i < _len; _i++) {\n            id = mapping[_i];\n            metric = this.forGlyph(id);\n            table.writeUInt16(metric.advance);\n            table.writeUInt16(metric.lsb);\n        }\n        return table.data;\n    };*/\n\n\n    return HmtxTable;\n  }(Table);\n\n  var __slice = [].slice;\n\n  var GlyfTable = function (_super) {\n    __extends(GlyfTable, _super);\n\n    function GlyfTable() {\n      return GlyfTable.__super__.constructor.apply(this, arguments);\n    }\n\n    GlyfTable.prototype.tag = 'glyf';\n\n    GlyfTable.prototype.parse = function (data) {\n      return this.cache = {};\n    };\n\n    GlyfTable.prototype.glyphFor = function (id) {\n      id = id;\n      var data, index, length, loca, numberOfContours, raw, xMax, xMin, yMax, yMin;\n\n      if (id in this.cache) {\n        return this.cache[id];\n      }\n\n      loca = this.file.loca;\n      data = this.file.contents;\n      index = loca.indexOf(id);\n      length = loca.lengthOf(id);\n\n      if (length === 0) {\n        return this.cache[id] = null;\n      }\n\n      data.pos = this.offset + index;\n      raw = new Data(data.read(length));\n      numberOfContours = raw.readShort();\n      xMin = raw.readShort();\n      yMin = raw.readShort();\n      xMax = raw.readShort();\n      yMax = raw.readShort();\n\n      if (numberOfContours === -1) {\n        this.cache[id] = new CompoundGlyph(raw, xMin, yMin, xMax, yMax);\n      } else {\n        this.cache[id] = new SimpleGlyph(raw, numberOfContours, xMin, yMin, xMax, yMax);\n      }\n\n      return this.cache[id];\n    };\n\n    GlyfTable.prototype.encode = function (glyphs, mapping, old2new) {\n      var glyph, id, offsets, table, _i, _len;\n\n      table = [];\n      offsets = [];\n\n      for (_i = 0, _len = mapping.length; _i < _len; _i++) {\n        id = mapping[_i];\n        glyph = glyphs[id];\n        offsets.push(table.length);\n\n        if (glyph) {\n          table = table.concat(glyph.encode(old2new));\n        }\n      }\n\n      offsets.push(table.length);\n      return {\n        table: table,\n        offsets: offsets\n      };\n    };\n\n    return GlyfTable;\n  }(Table);\n\n  var SimpleGlyph = function () {\n    /**************************************************************************/\n\n    /* function : SimpleGlyph                                                 */\n\n    /* comment : Stores raw, xMin, yMin, xMax, and yMax values for this glyph.*/\n\n    /**************************************************************************/\n    function SimpleGlyph(raw, numberOfContours, xMin, yMin, xMax, yMax) {\n      this.raw = raw;\n      this.numberOfContours = numberOfContours;\n      this.xMin = xMin;\n      this.yMin = yMin;\n      this.xMax = xMax;\n      this.yMax = yMax;\n      this.compound = false;\n    }\n\n    SimpleGlyph.prototype.encode = function () {\n      return this.raw.data;\n    };\n\n    return SimpleGlyph;\n  }();\n\n  var CompoundGlyph = function () {\n    var ARG_1_AND_2_ARE_WORDS, MORE_COMPONENTS, WE_HAVE_AN_X_AND_Y_SCALE, WE_HAVE_A_SCALE, WE_HAVE_A_TWO_BY_TWO;\n    ARG_1_AND_2_ARE_WORDS = 0x0001;\n    WE_HAVE_A_SCALE = 0x0008;\n    MORE_COMPONENTS = 0x0020;\n    WE_HAVE_AN_X_AND_Y_SCALE = 0x0040;\n    WE_HAVE_A_TWO_BY_TWO = 0x0080;\n    /********************************************************************************************************************/\n\n    /* function : CompoundGlypg generator                                                                               */\n\n    /* comment : It stores raw, xMin, yMin, xMax, yMax, glyph id, and glyph offset for the corresponding compound glyph.*/\n\n    /********************************************************************************************************************/\n\n    function CompoundGlyph(raw, xMin, yMin, xMax, yMax) {\n      var data, flags;\n      this.raw = raw;\n      this.xMin = xMin;\n      this.yMin = yMin;\n      this.xMax = xMax;\n      this.yMax = yMax;\n      this.compound = true;\n      this.glyphIDs = [];\n      this.glyphOffsets = [];\n      data = this.raw;\n\n      while (true) {\n        flags = data.readShort();\n        this.glyphOffsets.push(data.pos);\n        this.glyphIDs.push(data.readShort());\n\n        if (!(flags & MORE_COMPONENTS)) {\n          break;\n        }\n\n        if (flags & ARG_1_AND_2_ARE_WORDS) {\n          data.pos += 4;\n        } else {\n          data.pos += 2;\n        }\n\n        if (flags & WE_HAVE_A_TWO_BY_TWO) {\n          data.pos += 8;\n        } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n          data.pos += 4;\n        } else if (flags & WE_HAVE_A_SCALE) {\n          data.pos += 2;\n        }\n      }\n    }\n    /****************************************************************************************************************/\n\n    /* function : CompoundGlypg encode                                                                              */\n\n    /* comment : After creating a table for the characters you typed, you call directory.encode to encode the table.*/\n\n    /****************************************************************************************************************/\n\n\n    CompoundGlyph.prototype.encode = function (mapping) {\n      var i, id, result, _i, _len, _ref;\n\n      result = new Data(__slice.call(this.raw.data));\n      _ref = this.glyphIDs;\n\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        id = _ref[i];\n        result.pos = this.glyphOffsets[i];\n      }\n\n      return result.data;\n    };\n\n    return CompoundGlyph;\n  }();\n\n  var LocaTable = function (_super) {\n    __extends(LocaTable, _super);\n\n    function LocaTable() {\n      return LocaTable.__super__.constructor.apply(this, arguments);\n    }\n\n    LocaTable.prototype.tag = 'loca';\n\n    LocaTable.prototype.parse = function (data) {\n      var format, i;\n      data.pos = this.offset;\n      format = this.file.head.indexToLocFormat;\n\n      if (format === 0) {\n        return this.offsets = function () {\n          var _i, _ref, _results;\n\n          _results = [];\n\n          for (i = _i = 0, _ref = this.length; _i < _ref; i = _i += 2) {\n            _results.push(data.readUInt16() * 2);\n          }\n\n          return _results;\n        }.call(this);\n      } else {\n        return this.offsets = function () {\n          var _i, _ref, _results;\n\n          _results = [];\n\n          for (i = _i = 0, _ref = this.length; _i < _ref; i = _i += 4) {\n            _results.push(data.readUInt32());\n          }\n\n          return _results;\n        }.call(this);\n      }\n    };\n\n    LocaTable.prototype.indexOf = function (id) {\n      return this.offsets[id];\n    };\n\n    LocaTable.prototype.lengthOf = function (id) {\n      return this.offsets[id + 1] - this.offsets[id];\n    };\n\n    LocaTable.prototype.encode = function (offsets, activeGlyphs) {\n      var LocaTable = new Uint32Array(this.offsets.length);\n      var glyfPtr = 0;\n      var listGlyf = 0;\n\n      for (var k = 0; k < LocaTable.length; ++k) {\n        LocaTable[k] = glyfPtr;\n\n        if (listGlyf < activeGlyphs.length && activeGlyphs[listGlyf] == k) {\n          ++listGlyf;\n          LocaTable[k] = glyfPtr;\n          var start = this.offsets[k];\n          var len = this.offsets[k + 1] - start;\n\n          if (len > 0) {\n            glyfPtr += len;\n          }\n        }\n      }\n\n      var newLocaTable = new Array(LocaTable.length * 4);\n\n      for (var j = 0; j < LocaTable.length; ++j) {\n        newLocaTable[4 * j + 3] = LocaTable[j] & 0x000000ff;\n        newLocaTable[4 * j + 2] = (LocaTable[j] & 0x0000ff00) >> 8;\n        newLocaTable[4 * j + 1] = (LocaTable[j] & 0x00ff0000) >> 16;\n        newLocaTable[4 * j] = (LocaTable[j] & 0xff000000) >> 24;\n      }\n\n      return newLocaTable;\n    };\n\n    return LocaTable;\n  }(Table);\n  /************************************************************************************/\n\n  /* function : invert                                                                */\n\n  /* comment : Change the object's (key: value) to create an object with (value: key).*/\n\n  /************************************************************************************/\n\n\n  var invert = function invert(object) {\n    var key, ret, val;\n    ret = {};\n\n    for (key in object) {\n      val = object[key];\n      ret[val] = key;\n    }\n\n    return ret;\n  };\n  /*var successorOf = function (input) {\n      var added, alphabet, carry, i, index, isUpperCase, last, length, next, result;\n      alphabet = 'abcdefghijklmnopqrstuvwxyz';\n      length = alphabet.length;\n      result = input;\n      i = input.length;\n      while (i >= 0) {\n          last = input.charAt(--i);\n          if (isNaN(last)) {\n              index = alphabet.indexOf(last.toLowerCase());\n              if (index === -1) {\n                  next = last;\n                  carry = true;\n              }\n              else {\n                  next = alphabet.charAt((index + 1) % length);\n                  isUpperCase = last === last.toUpperCase();\n                  if (isUpperCase) {\n                      next = next.toUpperCase();\n                  }\n                  carry = index + 1 >= length;\n                  if (carry && i === 0) {\n                      added = isUpperCase ? 'A' : 'a';\n                      result = added + next + result.slice(1);\n                      break;\n                  }\n              }\n          }\n          else {\n              next = +last + 1;\n              carry = next > 9;\n              if (carry) {\n                  next = 0;\n              }\n              if (carry && i === 0) {\n                  result = '1' + next + result.slice(1);\n                  break;\n              }\n          }\n          result = result.slice(0, i) + next + result.slice(i + 1);\n          if (!carry) {\n              break;\n          }\n      }\n      return result;\n  };*/\n\n\n  var Subset = function () {\n    function Subset(font) {\n      this.font = font;\n      this.subset = {};\n      this.unicodes = {};\n      this.next = 33;\n    }\n    /*Subset.prototype.use = function (character) {\n        var i, _i, _ref;\n        if (typeof character === 'string') {\n            for (i = _i = 0, _ref = character.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n                this.use(character.charCodeAt(i));\n            }\n            return;\n        }\n        if (!this.unicodes[character]) {\n            this.subset[this.next] = character;\n            return this.unicodes[character] = this.next++;\n        }\n    };*/\n\n    /*Subset.prototype.encodeText = function (text) {\n        var char, i, string, _i, _ref;\n        string = '';\n        for (i = _i = 0, _ref = text.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n            char = this.unicodes[text.charCodeAt(i)];\n            string += String.fromCharCode(char);\n        }\n        return string;\n    };*/\n\n    /***************************************************************/\n\n    /* function : generateCmap                                     */\n\n    /* comment : Returns the unicode cmap for this font.         */\n\n    /***************************************************************/\n\n\n    Subset.prototype.generateCmap = function () {\n      var mapping, roman, unicode, unicodeCmap, _ref;\n\n      unicodeCmap = this.font.cmap.tables[0].codeMap;\n      mapping = {};\n      _ref = this.subset;\n\n      for (roman in _ref) {\n        unicode = _ref[roman];\n        mapping[roman] = unicodeCmap[unicode];\n      }\n\n      return mapping;\n    };\n    /*Subset.prototype.glyphIDs = function () {\n        var ret, roman, unicode, unicodeCmap, val, _ref;\n        unicodeCmap = this.font.cmap.tables[0].codeMap;\n        ret = [0];\n        _ref = this.subset;\n        for (roman in _ref) {\n            unicode = _ref[roman];\n            val = unicodeCmap[unicode];\n            if ((val != null) && __indexOf.call(ret, val) < 0) {\n                ret.push(val);\n            }\n        }\n        return ret.sort();\n    };*/\n\n    /******************************************************************/\n\n    /* function : glyphsFor                                           */\n\n    /* comment : Returns simple glyph objects for the input character.*/\n\n    /******************************************************************/\n\n\n    Subset.prototype.glyphsFor = function (glyphIDs) {\n      var additionalIDs, glyph, glyphs, id, _i, _len, _ref;\n\n      glyphs = {};\n\n      for (_i = 0, _len = glyphIDs.length; _i < _len; _i++) {\n        id = glyphIDs[_i];\n        glyphs[id] = this.font.glyf.glyphFor(id);\n      }\n\n      additionalIDs = [];\n\n      for (id in glyphs) {\n        glyph = glyphs[id];\n\n        if (glyph != null ? glyph.compound : void 0) {\n          additionalIDs.push.apply(additionalIDs, glyph.glyphIDs);\n        }\n      }\n\n      if (additionalIDs.length > 0) {\n        _ref = this.glyphsFor(additionalIDs);\n\n        for (id in _ref) {\n          glyph = _ref[id];\n          glyphs[id] = glyph;\n        }\n      }\n\n      return glyphs;\n    };\n    /***************************************************************/\n\n    /* function : encode                                           */\n\n    /* comment : Encode various tables for the characters you use. */\n\n    /***************************************************************/\n\n\n    Subset.prototype.encode = function (glyID, indexToLocFormat) {\n      var cmap, code, glyf, glyphs, id, ids, loca, new2old, newIDs, nextGlyphID, old2new, oldID, oldIDs, tables, _ref;\n\n      cmap = CmapTable.encode(this.generateCmap(), 'unicode');\n      glyphs = this.glyphsFor(glyID);\n      old2new = {\n        0: 0\n      };\n      _ref = cmap.charMap;\n\n      for (code in _ref) {\n        ids = _ref[code];\n        old2new[ids.old] = ids[\"new\"];\n      }\n\n      nextGlyphID = cmap.maxGlyphID;\n\n      for (oldID in glyphs) {\n        if (!(oldID in old2new)) {\n          old2new[oldID] = nextGlyphID++;\n        }\n      }\n\n      new2old = invert(old2new);\n      newIDs = Object.keys(new2old).sort(function (a, b) {\n        return a - b;\n      });\n\n      oldIDs = function () {\n        var _i, _len, _results;\n\n        _results = [];\n\n        for (_i = 0, _len = newIDs.length; _i < _len; _i++) {\n          id = newIDs[_i];\n\n          _results.push(new2old[id]);\n        }\n\n        return _results;\n      }();\n\n      glyf = this.font.glyf.encode(glyphs, oldIDs, old2new);\n      loca = this.font.loca.encode(glyf.offsets, oldIDs);\n      tables = {\n        cmap: this.font.cmap.raw(),\n        glyf: glyf.table,\n        loca: loca,\n        hmtx: this.font.hmtx.raw(),\n        hhea: this.font.hhea.raw(),\n        maxp: this.font.maxp.raw(),\n        post: this.font.post.raw(),\n        name: this.font.name.raw(),\n        head: this.font.head.encode(indexToLocFormat)\n      };\n\n      if (this.font.os2.exists) {\n        tables['OS/2'] = this.font.os2.raw();\n      }\n\n      return this.font.directory.encode(tables);\n    };\n\n    return Subset;\n  }();\n\n  jsPDF.API.PDFObject = function () {\n    var pad;\n\n    function PDFObject() {}\n\n    pad = function pad(str, length) {\n      return (Array(length + 1).join('0') + str).slice(-length);\n    };\n    /*****************************************************************************/\n\n    /* function : convert                                                        */\n\n    /* comment :Converts pdf tag's / FontBBox and array values in / W to strings */\n\n    /*****************************************************************************/\n\n\n    PDFObject.convert = function (object) {\n      var e, items, key, out, val;\n\n      if (Array.isArray(object)) {\n        items = function () {\n          var _i, _len, _results;\n\n          _results = [];\n\n          for (_i = 0, _len = object.length; _i < _len; _i++) {\n            e = object[_i];\n\n            _results.push(PDFObject.convert(e));\n          }\n\n          return _results;\n        }().join(' ');\n\n        return '[' + items + ']';\n      } else if (typeof object === 'string') {\n        return '/' + object;\n      } else if (object != null ? object.isString : void 0) {\n        return '(' + object + ')';\n      } else if (object instanceof Date) {\n        return '(D:' + pad(object.getUTCFullYear(), 4) + pad(object.getUTCMonth(), 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + 'Z)';\n      } else if ({}.toString.call(object) === '[object Object]') {\n        out = ['<<'];\n\n        for (key in object) {\n          val = object[key];\n          out.push('/' + key + ' ' + PDFObject.convert(val));\n        }\n\n        out.push('>>');\n        return out.join('\\n');\n      } else {\n        return '' + object;\n      }\n    };\n\n    return PDFObject;\n  }();\n})(jsPDF);\n\n// Generated by CoffeeScript 1.4.0\n\n/*\n# PNG.js\n# Copyright (c) 2011 Devon Govett\n# MIT LICENSE\n# \n# \n*/\n(function (global) {\n  var PNG;\n\n  PNG = function () {\n    var APNG_BLEND_OP_SOURCE, APNG_DISPOSE_OP_BACKGROUND, APNG_DISPOSE_OP_PREVIOUS, makeImage, scratchCanvas, scratchCtx;\n\n    PNG.load = function (url, canvas, callback) {\n      var xhr;\n\n      if (typeof canvas === 'function') {\n        callback = canvas;\n      }\n\n      xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", url, true);\n      xhr.responseType = \"arraybuffer\";\n\n      xhr.onload = function () {\n        var data, png;\n        data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);\n        png = new PNG(data);\n\n        if (typeof (canvas != null ? canvas.getContext : void 0) === 'function') {\n          png.render(canvas);\n        }\n\n        return typeof callback === \"function\" ? callback(png) : void 0;\n      };\n\n      return xhr.send(null);\n    };\n    APNG_DISPOSE_OP_BACKGROUND = 1;\n    APNG_DISPOSE_OP_PREVIOUS = 2;\n    APNG_BLEND_OP_SOURCE = 0;\n\n    function PNG(data) {\n      var chunkSize, colors, palLen, delayDen, delayNum, frame, i, index, key, section, palShort, text, _i, _j, _ref;\n\n      this.data = data;\n      this.pos = 8;\n      this.palette = [];\n      this.imgData = [];\n      this.transparency = {};\n      this.animation = null;\n      this.text = {};\n      frame = null;\n\n      while (true) {\n        chunkSize = this.readUInt32();\n\n        section = function () {\n          var _i, _results;\n\n          _results = [];\n\n          for (i = _i = 0; _i < 4; i = ++_i) {\n            _results.push(String.fromCharCode(this.data[this.pos++]));\n          }\n\n          return _results;\n        }.call(this).join('');\n\n        switch (section) {\n          case 'IHDR':\n            this.width = this.readUInt32();\n            this.height = this.readUInt32();\n            this.bits = this.data[this.pos++];\n            this.colorType = this.data[this.pos++];\n            this.compressionMethod = this.data[this.pos++];\n            this.filterMethod = this.data[this.pos++];\n            this.interlaceMethod = this.data[this.pos++];\n            break;\n\n          case 'acTL':\n            this.animation = {\n              numFrames: this.readUInt32(),\n              numPlays: this.readUInt32() || Infinity,\n              frames: []\n            };\n            break;\n\n          case 'PLTE':\n            this.palette = this.read(chunkSize);\n            break;\n\n          case 'fcTL':\n            if (frame) {\n              this.animation.frames.push(frame);\n            }\n\n            this.pos += 4;\n            frame = {\n              width: this.readUInt32(),\n              height: this.readUInt32(),\n              xOffset: this.readUInt32(),\n              yOffset: this.readUInt32()\n            };\n            delayNum = this.readUInt16();\n            delayDen = this.readUInt16() || 100;\n            frame.delay = 1000 * delayNum / delayDen;\n            frame.disposeOp = this.data[this.pos++];\n            frame.blendOp = this.data[this.pos++];\n            frame.data = [];\n            break;\n\n          case 'IDAT':\n          case 'fdAT':\n            if (section === 'fdAT') {\n              this.pos += 4;\n              chunkSize -= 4;\n            }\n\n            data = (frame != null ? frame.data : void 0) || this.imgData;\n\n            for (i = _i = 0; 0 <= chunkSize ? _i < chunkSize : _i > chunkSize; i = 0 <= chunkSize ? ++_i : --_i) {\n              data.push(this.data[this.pos++]);\n            }\n\n            break;\n\n          case 'tRNS':\n            this.transparency = {};\n\n            switch (this.colorType) {\n              case 3:\n                palLen = this.palette.length / 3;\n                this.transparency.indexed = this.read(chunkSize);\n                if (this.transparency.indexed.length > palLen) throw new Error('More transparent colors than palette size');\n                /*\n                 * According to the PNG spec trns should be increased to the same size as palette if shorter\n                 */\n                //palShort = 255 - this.transparency.indexed.length;\n\n                palShort = palLen - this.transparency.indexed.length;\n\n                if (palShort > 0) {\n                  for (i = _j = 0; 0 <= palShort ? _j < palShort : _j > palShort; i = 0 <= palShort ? ++_j : --_j) {\n                    this.transparency.indexed.push(255);\n                  }\n                }\n\n                break;\n\n              case 0:\n                this.transparency.grayscale = this.read(chunkSize)[0];\n                break;\n\n              case 2:\n                this.transparency.rgb = this.read(chunkSize);\n            }\n\n            break;\n\n          case 'tEXt':\n            text = this.read(chunkSize);\n            index = text.indexOf(0);\n            key = String.fromCharCode.apply(String, text.slice(0, index));\n            this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));\n            break;\n\n          case 'IEND':\n            if (frame) {\n              this.animation.frames.push(frame);\n            }\n\n            this.colors = function () {\n              switch (this.colorType) {\n                case 0:\n                case 3:\n                case 4:\n                  return 1;\n\n                case 2:\n                case 6:\n                  return 3;\n              }\n            }.call(this);\n\n            this.hasAlphaChannel = (_ref = this.colorType) === 4 || _ref === 6;\n            colors = this.colors + (this.hasAlphaChannel ? 1 : 0);\n            this.pixelBitlength = this.bits * colors;\n\n            this.colorSpace = function () {\n              switch (this.colors) {\n                case 1:\n                  return 'DeviceGray';\n\n                case 3:\n                  return 'DeviceRGB';\n              }\n            }.call(this);\n\n            this.imgData = new Uint8Array(this.imgData);\n            return;\n\n          default:\n            this.pos += chunkSize;\n        }\n\n        this.pos += 4;\n\n        if (this.pos > this.data.length) {\n          throw new Error(\"Incomplete or corrupt PNG file\");\n        }\n      }\n\n      return;\n    }\n\n    PNG.prototype.read = function (bytes) {\n      var i, _i, _results;\n\n      _results = [];\n\n      for (i = _i = 0; 0 <= bytes ? _i < bytes : _i > bytes; i = 0 <= bytes ? ++_i : --_i) {\n        _results.push(this.data[this.pos++]);\n      }\n\n      return _results;\n    };\n\n    PNG.prototype.readUInt32 = function () {\n      var b1, b2, b3, b4;\n      b1 = this.data[this.pos++] << 24;\n      b2 = this.data[this.pos++] << 16;\n      b3 = this.data[this.pos++] << 8;\n      b4 = this.data[this.pos++];\n      return b1 | b2 | b3 | b4;\n    };\n\n    PNG.prototype.readUInt16 = function () {\n      var b1, b2;\n      b1 = this.data[this.pos++] << 8;\n      b2 = this.data[this.pos++];\n      return b1 | b2;\n    };\n\n    PNG.prototype.decodePixels = function (data) {\n      var pixelBytes = this.pixelBitlength / 8;\n      var fullPixels = new Uint8Array(this.width * this.height * pixelBytes);\n      var pos = 0;\n\n      var _this = this;\n\n      if (data == null) {\n        data = this.imgData;\n      }\n\n      if (data.length === 0) {\n        return new Uint8Array(0);\n      }\n\n      data = new FlateStream(data);\n      data = data.getBytes();\n\n      function pass(x0, y0, dx, dy) {\n        var abyte, c, col, i, left, length, p, pa, paeth, pb, pc, pixels, row, scanlineLength, upper, upperLeft, _i, _j, _k, _l, _m;\n\n        var w = Math.ceil((_this.width - x0) / dx),\n            h = Math.ceil((_this.height - y0) / dy);\n        var isFull = _this.width == w && _this.height == h;\n        scanlineLength = pixelBytes * w;\n        pixels = isFull ? fullPixels : new Uint8Array(scanlineLength * h);\n        length = data.length;\n        row = 0;\n        c = 0;\n\n        while (row < h && pos < length) {\n          switch (data[pos++]) {\n            case 0:\n              for (i = _i = 0; _i < scanlineLength; i = _i += 1) {\n                pixels[c++] = data[pos++];\n              }\n\n              break;\n\n            case 1:\n              for (i = _j = 0; _j < scanlineLength; i = _j += 1) {\n                abyte = data[pos++];\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n                pixels[c++] = (abyte + left) % 256;\n              }\n\n              break;\n\n            case 2:\n              for (i = _k = 0; _k < scanlineLength; i = _k += 1) {\n                abyte = data[pos++];\n                col = (i - i % pixelBytes) / pixelBytes;\n                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                pixels[c++] = (upper + abyte) % 256;\n              }\n\n              break;\n\n            case 3:\n              for (i = _l = 0; _l < scanlineLength; i = _l += 1) {\n                abyte = data[pos++];\n                col = (i - i % pixelBytes) / pixelBytes;\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                pixels[c++] = (abyte + Math.floor((left + upper) / 2)) % 256;\n              }\n\n              break;\n\n            case 4:\n              for (i = _m = 0; _m < scanlineLength; i = _m += 1) {\n                abyte = data[pos++];\n                col = (i - i % pixelBytes) / pixelBytes;\n                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];\n\n                if (row === 0) {\n                  upper = upperLeft = 0;\n                } else {\n                  upper = pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];\n                  upperLeft = col && pixels[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i % pixelBytes];\n                }\n\n                p = left + upper - upperLeft;\n                pa = Math.abs(p - left);\n                pb = Math.abs(p - upper);\n                pc = Math.abs(p - upperLeft);\n\n                if (pa <= pb && pa <= pc) {\n                  paeth = left;\n                } else if (pb <= pc) {\n                  paeth = upper;\n                } else {\n                  paeth = upperLeft;\n                }\n\n                pixels[c++] = (abyte + paeth) % 256;\n              }\n\n              break;\n\n            default:\n              throw new Error(\"Invalid filter algorithm: \" + data[pos - 1]);\n          }\n\n          if (!isFull) {\n            var fullPos = ((y0 + row * dy) * _this.width + x0) * pixelBytes;\n            var partPos = row * scanlineLength;\n\n            for (i = 0; i < w; i += 1) {\n              for (var j = 0; j < pixelBytes; j += 1) {\n                fullPixels[fullPos++] = pixels[partPos++];\n              }\n\n              fullPos += (dx - 1) * pixelBytes;\n            }\n          }\n\n          row++;\n        }\n      }\n\n      if (_this.interlaceMethod == 1) {\n        /*\n          1 6 4 6 2 6 4 6\n          7 7 7 7 7 7 7 7\n          5 6 5 6 5 6 5 6\n          7 7 7 7 7 7 7 7\n          3 6 4 6 3 6 4 6\n          7 7 7 7 7 7 7 7\n          5 6 5 6 5 6 5 6\n          7 7 7 7 7 7 7 7\n        */\n        pass(0, 0, 8, 8); // 1\n\n        /* NOTE these seem to follow the pattern:\n         * pass(x, 0, 2*x, 2*x);\n         * pass(0, x,   x, 2*x);\n         * with x being 4, 2, 1.\n         */\n\n        pass(4, 0, 8, 8); // 2\n\n        pass(0, 4, 4, 8); // 3\n\n        pass(2, 0, 4, 4); // 4\n\n        pass(0, 2, 2, 4); // 5\n\n        pass(1, 0, 2, 2); // 6\n\n        pass(0, 1, 1, 2); // 7\n      } else {\n        pass(0, 0, 1, 1);\n      }\n\n      return fullPixels;\n    };\n\n    PNG.prototype.decodePalette = function () {\n      var c, i, length, palette, pos, ret, transparency, _i, _ref, _ref1;\n\n      palette = this.palette;\n      transparency = this.transparency.indexed || [];\n      ret = new Uint8Array((transparency.length || 0) + palette.length);\n      pos = 0;\n      length = palette.length;\n      c = 0;\n\n      for (i = _i = 0, _ref = palette.length; _i < _ref; i = _i += 3) {\n        ret[pos++] = palette[i];\n        ret[pos++] = palette[i + 1];\n        ret[pos++] = palette[i + 2];\n        ret[pos++] = (_ref1 = transparency[c++]) != null ? _ref1 : 255;\n      }\n\n      return ret;\n    };\n\n    PNG.prototype.copyToImageData = function (imageData, pixels) {\n      var alpha, colors, data, i, input, j, k, length, palette, v, _ref;\n\n      colors = this.colors;\n      palette = null;\n      alpha = this.hasAlphaChannel;\n\n      if (this.palette.length) {\n        palette = (_ref = this._decodedPalette) != null ? _ref : this._decodedPalette = this.decodePalette();\n        colors = 4;\n        alpha = true;\n      }\n\n      data = imageData.data || imageData;\n      length = data.length;\n      input = palette || pixels;\n      i = j = 0;\n\n      if (colors === 1) {\n        while (i < length) {\n          k = palette ? pixels[i / 4] * 4 : j;\n          v = input[k++];\n          data[i++] = v;\n          data[i++] = v;\n          data[i++] = v;\n          data[i++] = alpha ? input[k++] : 255;\n          j = k;\n        }\n      } else {\n        while (i < length) {\n          k = palette ? pixels[i / 4] * 4 : j;\n          data[i++] = input[k++];\n          data[i++] = input[k++];\n          data[i++] = input[k++];\n          data[i++] = alpha ? input[k++] : 255;\n          j = k;\n        }\n      }\n    };\n\n    PNG.prototype.decode = function () {\n      var ret;\n      ret = new Uint8Array(this.width * this.height * 4);\n      this.copyToImageData(ret, this.decodePixels());\n      return ret;\n    };\n\n    try {\n      scratchCanvas = global.document.createElement('canvas');\n      scratchCtx = scratchCanvas.getContext('2d');\n    } catch (e) {\n      return -1;\n    }\n\n    makeImage = function makeImage(imageData) {\n      var img;\n      scratchCtx.width = imageData.width;\n      scratchCtx.height = imageData.height;\n      scratchCtx.clearRect(0, 0, imageData.width, imageData.height);\n      scratchCtx.putImageData(imageData, 0, 0);\n      img = new Image();\n      img.src = scratchCanvas.toDataURL();\n      return img;\n    };\n\n    PNG.prototype.decodeFrames = function (ctx) {\n      var frame, i, imageData, pixels, _i, _len, _ref, _results;\n\n      if (!this.animation) {\n        return;\n      }\n\n      _ref = this.animation.frames;\n      _results = [];\n\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        frame = _ref[i];\n        imageData = ctx.createImageData(frame.width, frame.height);\n        pixels = this.decodePixels(new Uint8Array(frame.data));\n        this.copyToImageData(imageData, pixels);\n        frame.imageData = imageData;\n\n        _results.push(frame.image = makeImage(imageData));\n      }\n\n      return _results;\n    };\n\n    PNG.prototype.renderFrame = function (ctx, number) {\n      var frame, frames, prev;\n      frames = this.animation.frames;\n      frame = frames[number];\n      prev = frames[number - 1];\n\n      if (number === 0) {\n        ctx.clearRect(0, 0, this.width, this.height);\n      }\n\n      if ((prev != null ? prev.disposeOp : void 0) === APNG_DISPOSE_OP_BACKGROUND) {\n        ctx.clearRect(prev.xOffset, prev.yOffset, prev.width, prev.height);\n      } else if ((prev != null ? prev.disposeOp : void 0) === APNG_DISPOSE_OP_PREVIOUS) {\n        ctx.putImageData(prev.imageData, prev.xOffset, prev.yOffset);\n      }\n\n      if (frame.blendOp === APNG_BLEND_OP_SOURCE) {\n        ctx.clearRect(frame.xOffset, frame.yOffset, frame.width, frame.height);\n      }\n\n      return ctx.drawImage(frame.image, frame.xOffset, frame.yOffset);\n    };\n\n    PNG.prototype.animate = function (ctx) {\n      var _doFrame,\n          frameNumber,\n          frames,\n          numFrames,\n          numPlays,\n          _ref,\n          _this = this;\n\n      frameNumber = 0;\n      _ref = this.animation, numFrames = _ref.numFrames, frames = _ref.frames, numPlays = _ref.numPlays;\n      return (_doFrame = function doFrame() {\n        var f, frame;\n        f = frameNumber++ % numFrames;\n        frame = frames[f];\n\n        _this.renderFrame(ctx, f);\n\n        if (numFrames > 1 && frameNumber / numFrames < numPlays) {\n          return _this.animation._timeout = setTimeout(_doFrame, frame.delay);\n        }\n      })();\n    };\n\n    PNG.prototype.stopAnimation = function () {\n      var _ref;\n\n      return clearTimeout((_ref = this.animation) != null ? _ref._timeout : void 0);\n    };\n\n    PNG.prototype.render = function (canvas) {\n      var ctx, data;\n\n      if (canvas._png) {\n        canvas._png.stopAnimation();\n      }\n\n      canvas._png = this;\n      canvas.width = this.width;\n      canvas.height = this.height;\n      ctx = canvas.getContext(\"2d\");\n\n      if (this.animation) {\n        this.decodeFrames(ctx);\n        return this.animate(ctx);\n      } else {\n        data = ctx.createImageData(this.width, this.height);\n        this.copyToImageData(data, this.decodePixels());\n        return ctx.putImageData(data, 0, 0);\n      }\n    };\n\n    return PNG;\n  }();\n\n  global.PNG = PNG;\n})(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || Function('return typeof this === \"object\" && this.content')() || Function('return this')()); // `self` is undefined in Firefox for Android content script context\n// while `this` is nsIContentFrameMessageManager\n// with an attribute `content` that corresponds to the window\n\n/*\n * Extracted from pdf.js\n * https://github.com/andreasgal/pdf.js\n *\n * Copyright (c) 2011 Mozilla Foundation\n *\n * Contributors: Andreas Gal <gal@mozilla.com>\n *               Chris G Jones <cjones@mozilla.com>\n *               Shaon Barman <shaon.barman@gmail.com>\n *               Vivien Nicolas <21@vingtetun.org>\n *               Justin D'Arcangelo <justindarc@gmail.com>\n *               Yury Delendik\n *\n * \n */\nvar DecodeStream = function () {\n  function constructor() {\n    this.pos = 0;\n    this.bufferLength = 0;\n    this.eof = false;\n    this.buffer = null;\n  }\n\n  constructor.prototype = {\n    ensureBuffer: function decodestream_ensureBuffer(requested) {\n      var buffer = this.buffer;\n      var current = buffer ? buffer.byteLength : 0;\n      if (requested < current) return buffer;\n      var size = 512;\n\n      while (size < requested) {\n        size <<= 1;\n      }\n\n      var buffer2 = new Uint8Array(size);\n\n      for (var i = 0; i < current; ++i) {\n        buffer2[i] = buffer[i];\n      }\n\n      return this.buffer = buffer2;\n    },\n    getByte: function decodestream_getByte() {\n      var pos = this.pos;\n\n      while (this.bufferLength <= pos) {\n        if (this.eof) return null;\n        this.readBlock();\n      }\n\n      return this.buffer[this.pos++];\n    },\n    getBytes: function decodestream_getBytes(length) {\n      var pos = this.pos;\n\n      if (length) {\n        this.ensureBuffer(pos + length);\n        var end = pos + length;\n\n        while (!this.eof && this.bufferLength < end) {\n          this.readBlock();\n        }\n\n        var bufEnd = this.bufferLength;\n        if (end > bufEnd) end = bufEnd;\n      } else {\n        while (!this.eof) {\n          this.readBlock();\n        }\n\n        var end = this.bufferLength;\n      }\n\n      this.pos = end;\n      return this.buffer.subarray(pos, end);\n    },\n    lookChar: function decodestream_lookChar() {\n      var pos = this.pos;\n\n      while (this.bufferLength <= pos) {\n        if (this.eof) return null;\n        this.readBlock();\n      }\n\n      return String.fromCharCode(this.buffer[this.pos]);\n    },\n    getChar: function decodestream_getChar() {\n      var pos = this.pos;\n\n      while (this.bufferLength <= pos) {\n        if (this.eof) return null;\n        this.readBlock();\n      }\n\n      return String.fromCharCode(this.buffer[this.pos++]);\n    },\n    makeSubStream: function decodestream_makeSubstream(start, length, dict) {\n      var end = start + length;\n\n      while (this.bufferLength <= end && !this.eof) {\n        this.readBlock();\n      }\n\n      return new Stream(this.buffer, start, length, dict);\n    },\n    skip: function decodestream_skip(n) {\n      if (!n) n = 1;\n      this.pos += n;\n    },\n    reset: function decodestream_reset() {\n      this.pos = 0;\n    }\n  };\n  return constructor;\n}();\n\nvar FlateStream = function () {\n  if (typeof Uint32Array === 'undefined') {\n    return undefined;\n  }\n\n  var codeLenCodeMap = new Uint32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n  var lengthDecode = new Uint32Array([0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a, 0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f, 0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073, 0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102]);\n  var distDecode = new Uint32Array([0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d, 0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1, 0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01, 0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001]);\n  var fixedLitCodeTab = [new Uint32Array([0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0, 0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0, 0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0, 0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8, 0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8, 0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8, 0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4, 0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4, 0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4, 0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc, 0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec, 0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc, 0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2, 0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2, 0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2, 0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca, 0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea, 0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da, 0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6, 0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6, 0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6, 0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce, 0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee, 0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de, 0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe, 0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1, 0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1, 0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1, 0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9, 0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9, 0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9, 0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5, 0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5, 0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5, 0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd, 0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed, 0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd, 0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3, 0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3, 0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3, 0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb, 0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb, 0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db, 0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7, 0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7, 0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7, 0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf, 0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef, 0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df, 0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff]), 9];\n  var fixedDistCodeTab = [new Uint32Array([0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c, 0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000, 0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d, 0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000]), 5];\n\n  function error(e) {\n    throw new Error(e);\n  }\n\n  function constructor(bytes) {\n    //var bytes = stream.getBytes();\n    var bytesPos = 0;\n    var cmf = bytes[bytesPos++];\n    var flg = bytes[bytesPos++];\n    if (cmf == -1 || flg == -1) error('Invalid header in flate stream');\n    if ((cmf & 0x0f) != 0x08) error('Unknown compression method in flate stream');\n    if (((cmf << 8) + flg) % 31 != 0) error('Bad FCHECK in flate stream');\n    if (flg & 0x20) error('FDICT bit set in flate stream');\n    this.bytes = bytes;\n    this.bytesPos = bytesPos;\n    this.codeSize = 0;\n    this.codeBuf = 0;\n    DecodeStream.call(this);\n  }\n\n  constructor.prototype = Object.create(DecodeStream.prototype);\n\n  constructor.prototype.getBits = function (bits) {\n    var codeSize = this.codeSize;\n    var codeBuf = this.codeBuf;\n    var bytes = this.bytes;\n    var bytesPos = this.bytesPos;\n    var b;\n\n    while (codeSize < bits) {\n      if (typeof (b = bytes[bytesPos++]) == 'undefined') error('Bad encoding in flate stream');\n      codeBuf |= b << codeSize;\n      codeSize += 8;\n    }\n\n    b = codeBuf & (1 << bits) - 1;\n    this.codeBuf = codeBuf >> bits;\n    this.codeSize = codeSize -= bits;\n    this.bytesPos = bytesPos;\n    return b;\n  };\n\n  constructor.prototype.getCode = function (table) {\n    var codes = table[0];\n    var maxLen = table[1];\n    var codeSize = this.codeSize;\n    var codeBuf = this.codeBuf;\n    var bytes = this.bytes;\n    var bytesPos = this.bytesPos;\n\n    while (codeSize < maxLen) {\n      var b;\n      if (typeof (b = bytes[bytesPos++]) == 'undefined') error('Bad encoding in flate stream');\n      codeBuf |= b << codeSize;\n      codeSize += 8;\n    }\n\n    var code = codes[codeBuf & (1 << maxLen) - 1];\n    var codeLen = code >> 16;\n    var codeVal = code & 0xffff;\n    if (codeSize == 0 || codeSize < codeLen || codeLen == 0) error('Bad encoding in flate stream');\n    this.codeBuf = codeBuf >> codeLen;\n    this.codeSize = codeSize - codeLen;\n    this.bytesPos = bytesPos;\n    return codeVal;\n  };\n\n  constructor.prototype.generateHuffmanTable = function (lengths) {\n    var n = lengths.length; // find max code length\n\n    var maxLen = 0;\n\n    for (var i = 0; i < n; ++i) {\n      if (lengths[i] > maxLen) maxLen = lengths[i];\n    } // build the table\n\n\n    var size = 1 << maxLen;\n    var codes = new Uint32Array(size);\n\n    for (var len = 1, code = 0, skip = 2; len <= maxLen; ++len, code <<= 1, skip <<= 1) {\n      for (var val = 0; val < n; ++val) {\n        if (lengths[val] == len) {\n          // bit-reverse the code\n          var code2 = 0;\n          var t = code;\n\n          for (var i = 0; i < len; ++i) {\n            code2 = code2 << 1 | t & 1;\n            t >>= 1;\n          } // fill the table entries\n\n\n          for (var i = code2; i < size; i += skip) {\n            codes[i] = len << 16 | val;\n          }\n\n          ++code;\n        }\n      }\n    }\n\n    return [codes, maxLen];\n  };\n\n  constructor.prototype.readBlock = function () {\n    function repeat(stream, array, len, offset, what) {\n      var repeat = stream.getBits(len) + offset;\n\n      while (repeat-- > 0) {\n        array[i++] = what;\n      }\n    } // read block header\n\n\n    var hdr = this.getBits(3);\n    if (hdr & 1) this.eof = true;\n    hdr >>= 1;\n\n    if (hdr == 0) {\n      // uncompressed block\n      var bytes = this.bytes;\n      var bytesPos = this.bytesPos;\n      var b;\n      if (typeof (b = bytes[bytesPos++]) == 'undefined') error('Bad block header in flate stream');\n      var blockLen = b;\n      if (typeof (b = bytes[bytesPos++]) == 'undefined') error('Bad block header in flate stream');\n      blockLen |= b << 8;\n      if (typeof (b = bytes[bytesPos++]) == 'undefined') error('Bad block header in flate stream');\n      var check = b;\n      if (typeof (b = bytes[bytesPos++]) == 'undefined') error('Bad block header in flate stream');\n      check |= b << 8;\n      if (check != (~blockLen & 0xffff)) error('Bad uncompressed block length in flate stream');\n      this.codeBuf = 0;\n      this.codeSize = 0;\n      var bufferLength = this.bufferLength;\n      var buffer = this.ensureBuffer(bufferLength + blockLen);\n      var end = bufferLength + blockLen;\n      this.bufferLength = end;\n\n      for (var n = bufferLength; n < end; ++n) {\n        if (typeof (b = bytes[bytesPos++]) == 'undefined') {\n          this.eof = true;\n          break;\n        }\n\n        buffer[n] = b;\n      }\n\n      this.bytesPos = bytesPos;\n      return;\n    }\n\n    var litCodeTable;\n    var distCodeTable;\n\n    if (hdr == 1) {\n      // compressed block, fixed codes\n      litCodeTable = fixedLitCodeTab;\n      distCodeTable = fixedDistCodeTab;\n    } else if (hdr == 2) {\n      // compressed block, dynamic codes\n      var numLitCodes = this.getBits(5) + 257;\n      var numDistCodes = this.getBits(5) + 1;\n      var numCodeLenCodes = this.getBits(4) + 4; // build the code lengths code table\n\n      var codeLenCodeLengths = Array(codeLenCodeMap.length);\n      var i = 0;\n\n      while (i < numCodeLenCodes) {\n        codeLenCodeLengths[codeLenCodeMap[i++]] = this.getBits(3);\n      }\n\n      var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths); // build the literal and distance code tables\n\n      var len = 0;\n      var i = 0;\n      var codes = numLitCodes + numDistCodes;\n      var codeLengths = new Array(codes);\n\n      while (i < codes) {\n        var code = this.getCode(codeLenCodeTab);\n\n        if (code == 16) {\n          repeat(this, codeLengths, 2, 3, len);\n        } else if (code == 17) {\n          repeat(this, codeLengths, 3, 3, len = 0);\n        } else if (code == 18) {\n          repeat(this, codeLengths, 7, 11, len = 0);\n        } else {\n          codeLengths[i++] = len = code;\n        }\n      }\n\n      litCodeTable = this.generateHuffmanTable(codeLengths.slice(0, numLitCodes));\n      distCodeTable = this.generateHuffmanTable(codeLengths.slice(numLitCodes, codes));\n    } else {\n      error('Unknown block type in flate stream');\n    }\n\n    var buffer = this.buffer;\n    var limit = buffer ? buffer.length : 0;\n    var pos = this.bufferLength;\n\n    while (true) {\n      var code1 = this.getCode(litCodeTable);\n\n      if (code1 < 256) {\n        if (pos + 1 >= limit) {\n          buffer = this.ensureBuffer(pos + 1);\n          limit = buffer.length;\n        }\n\n        buffer[pos++] = code1;\n        continue;\n      }\n\n      if (code1 == 256) {\n        this.bufferLength = pos;\n        return;\n      }\n\n      code1 -= 257;\n      code1 = lengthDecode[code1];\n      var code2 = code1 >> 16;\n      if (code2 > 0) code2 = this.getBits(code2);\n      var len = (code1 & 0xffff) + code2;\n      code1 = this.getCode(distCodeTable);\n      code1 = distDecode[code1];\n      code2 = code1 >> 16;\n      if (code2 > 0) code2 = this.getBits(code2);\n      var dist = (code1 & 0xffff) + code2;\n\n      if (pos + len >= limit) {\n        buffer = this.ensureBuffer(pos + len);\n        limit = buffer.length;\n      }\n\n      for (var k = 0; k < len; ++k, ++pos) {\n        buffer[pos] = buffer[pos - dist];\n      }\n    }\n  };\n\n  return constructor;\n}();\n/*rollup-keeper-start*/\n\n\nwindow.tmp = FlateStream;\n/*rollup-keeper-end*/\n\ntry {\nmodule.exports = jsPDF;\n}\ncatch (e) {}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jspdf/dist/jspdf.node.debug.js\n");

/***/ })

}]);